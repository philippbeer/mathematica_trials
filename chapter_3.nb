(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1265134,      24787]
NotebookOptionsPosition[   1252767,      24572]
NotebookOutlinePosition[   1253290,      24591]
CellTagsIndexPosition[   1253247,      24588]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 SuperscriptBox["2", "6"]], "Input",
 CellChangeTimes->{{3.83848399258475*^9, 3.838484000269287*^9}},
 CellLabel->
  "In[248]:=",ExpressionUUID->"7ea7e4f7-7914-4443-8e13-0d6396ee708b"],

Cell[BoxData["64"], "Output",
 CellChangeTimes->{3.838484000933964*^9},
 CellLabel->
  "Out[248]=",ExpressionUUID->"2cf920b2-79da-4a25-8f16-a3304f6da599"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["2", "100"]], "Input",
 CellChangeTimes->{{3.838484005280107*^9, 3.838484009373349*^9}},
 CellLabel->
  "In[249]:=",ExpressionUUID->"b3a5eea0-190b-45b1-93b7-1129b177e587"],

Cell[BoxData["1267650600228229401496703205376"], "Output",
 CellChangeTimes->{3.838484009710183*^9},
 CellLabel->
  "Out[249]=",ExpressionUUID->"4d2306b4-54c7-469b-b3e1-613234fad2c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "plot sin(x)", Typeset`newq$$ = 
   "plot sin(x)", Typeset`chosen$$ = "Plot[Sin[x], {x, -2*Pi, 2*Pi}]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["plot sin(x)", 
                  Defer[
                   Plot[
                    Sin[$CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "plot sin(x)", 
                    Defer[
                    Plot[
                    Sin[$CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[250]:=",ExpressionUUID->"316bdf21-461b-46a0-bf75-994d0a00be34"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$351307#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{(-2) Pi, 2 Pi}, {-0.9999996658276197, 
     0.9999993650500513}}, {{-6.283185307179586, 
    6.283185307179586}, {-0.9999996658276197, 0.9999993650500513}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838484279105912*^9},
 CellLabel->
  "Out[250]=",ExpressionUUID->"df635865-9ba9-41e3-9496-bd8fde0f5324"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "plot the cosine of x", Typeset`newq$$ = 
   "plot the cosine of x", Typeset`chosen$$ = 
   "Plot[Cos[x], {x, -2*Pi, 2*Pi}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "plot the cosine of x", 
                  Defer[
                   Plot[
                    Cos[$CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "plot the cosine of x", 
                    Defer[
                    Plot[
                    Cos[$CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[251]:=",ExpressionUUID->"56176361-24e6-4427-964d-aa3b2c2e9fae"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
ehuyTB7a2StcZ1P8/86Dwv9/HvT/AB6k2Sc=
       "]]},
     Annotation[#, "Charting`Private`Tag$352150#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{(-2) Pi, 2 Pi}, {-0.999999512844876, 
     0.9999999999999671}}, {{-6.283185307179586, 
    6.283185307179586}, {-0.999999512844876, 0.9999999999999671}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384843593321342`*^9},
 CellLabel->
  "Out[251]=",ExpressionUUID->"13895803-2bb1-4654-8fc6-015cb721dabf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "graph sine of x", Typeset`newq$$ = 
   "graph sine of x", Typeset`chosen$$ = "Plot[Sin[x], {x, -2*Pi, 2*Pi}]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "graph sine of x", 
                  Defer[
                   Plot[
                    Sin[$CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "graph sine of x", 
                    Defer[
                    Plot[
                    Sin[$CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{
                    RowBox[{"-", "2"}], "*", "Pi"}], ",", " ", 
                    RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[252]:=",ExpressionUUID->"d4b79860-2739-4c58-aa1a-cbfe7ac93ade"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$352992#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{(-2) Pi, 2 Pi}, {-0.9999996658276197, 
     0.9999993650500513}}, {{-6.283185307179586, 
    6.283185307179586}, {-0.9999996658276197, 0.9999993650500513}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838484379655094*^9},
 CellLabel->
  "Out[252]=",ExpressionUUID->"f8e23d2d-7f93-443d-a4f9-edda510590c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = " 100 digits of pi", Typeset`newq$$ = 
   " 100 digits of pi", Typeset`chosen$$ = 
   "ResourceFunction[\"NthDigit\"][Pi, {1, 100}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 " 100 digits of pi", 
                  Defer[
                   ResourceFunction["NthDigit"][Pi, {1, 100}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  InterpretationBox[
                   TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                   ResourceFunction["NthDigit"],
                   Selectable->False], "[", 
                  RowBox[{"Pi", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  InterpretationBox[
                   TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                   ResourceFunction["NthDigit"],
                   Selectable->False], "[", 
                  RowBox[{"Pi", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    AdjustmentBox[
                    "\"[\[FilledSmallSquare]]\"", BoxBaselineShift -> -0.25, 
                    BoxMargins -> {{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                     FontColor -> RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]], ShowStringCharacters -> False, 
                    FontFamily -> "Source Sans Pro Black", FontSize -> 
                    0.65 Inherited, FontWeight -> "Heavy", 
                    PrivateFontOptions -> {"OperatorSubstitution" -> False}], 
                    
                    StyleBox[
                    RowBox[{
                    StyleBox["\"NthDigit\"", "ResourceFunctionLabel"], " "}], 
                    ShowAutoStyles -> False, ShowStringCharacters -> False, 
                    FontSize -> 0.9 Inherited, FontColor -> GrayLevel[0.1]]}},
                     GridBoxSpacings -> {"Columns" -> {{0.25}}}], Alignment -> 
                    Left, BaseStyle -> {
                    LineSpacing -> {0, 0}, LineBreakWithin -> False}, 
                    BaselinePosition -> Baseline, 
                    FrameMargins -> {{3, 0}, {0, 0}}], Background -> 
                    RGBColor[0.968627, 0.976471, 0.984314], BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, 
                    FrameMargins -> {{0, 0}, {1, 1}}, FrameStyle -> 
                    RGBColor[0.831373, 0.847059, 0.85098], RoundingRadius -> 
                    4], {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""}, TagBoxNote -> 
                    "FunctionResourceBox"], 
                    ResourceFunction["NthDigit"], Selectable -> False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}]], "Input"],
                   All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    " 100 digits of pi", 
                    Defer[
                    ResourceFunction["NthDigit"][Pi, {1, 100}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                    ResourceFunction["NthDigit"],
                    Selectable->False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                    ResourceFunction["NthDigit"],
                    Selectable->False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    AdjustmentBox[
                    "\"[\[FilledSmallSquare]]\"", BoxBaselineShift -> -0.25, 
                    BoxMargins -> {{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                     FontColor -> RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]], ShowStringCharacters -> False, 
                    FontFamily -> "Source Sans Pro Black", FontSize -> 
                    0.65 Inherited, FontWeight -> "Heavy", 
                    PrivateFontOptions -> {"OperatorSubstitution" -> False}], 
                    
                    StyleBox[
                    RowBox[{
                    StyleBox["\"NthDigit\"", "ResourceFunctionLabel"], " "}], 
                    ShowAutoStyles -> False, ShowStringCharacters -> False, 
                    FontSize -> 0.9 Inherited, FontColor -> GrayLevel[0.1]]}},
                     GridBoxSpacings -> {"Columns" -> {{0.25}}}], Alignment -> 
                    Left, BaseStyle -> {
                    LineSpacing -> {0, 0}, LineBreakWithin -> False}, 
                    BaselinePosition -> Baseline, 
                    FrameMargins -> {{3, 0}, {0, 0}}], Background -> 
                    RGBColor[0.968627, 0.976471, 0.984314], BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, 
                    FrameMargins -> {{0, 0}, {1, 1}}, FrameStyle -> 
                    RGBColor[0.831373, 0.847059, 0.85098], RoundingRadius -> 
                    4], {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""}, TagBoxNote -> 
                    "FunctionResourceBox"], 
                    ResourceFunction["NthDigit"], Selectable -> False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}]], "Input"],
                     All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[254]:=",ExpressionUUID->"212c7a17-e28d-409f-82d4-2c4ae75688a7"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    FrameBox[
     PaneBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
            BoxBaselineShift->-0.25,
            BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
           
           FontColor->RGBColor[
            0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
          ShowStringCharacters->False,
          FontFamily->"Source Sans Pro Black",
          FontSize->0.65 Inherited,
          FontWeight->"Heavy",
          PrivateFontOptions->{"OperatorSubstitution"->False}], 
         StyleBox[
          RowBox[{
           StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], " "}],
          ShowAutoStyles->False,
          ShowStringCharacters->False,
          FontSize->0.9 Inherited,
          FontColor->GrayLevel[0.1]]}
       },
       GridBoxSpacings->{"Columns" -> {{0.25}}}],
      Alignment->Left,
      BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
      BaselinePosition->Baseline,
      FrameMargins->{{3, 0}, {0, 0}}],
     Background->RGBColor[0.968627, 0.976471, 0.984314],
     BaselinePosition->Baseline,
     DefaultBaseStyle->{},
     FrameMargins->{{0, 0}, {1, 1}},
     FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
     RoundingRadius->4],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "\"NthDigit\""},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction["NthDigit"],
   Selectable->False], "[", 
  RowBox[{"\[Pi]", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "100"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.838484435047093*^9, 3.838484436769828*^9}},
 CellLabel->
  "Out[254]=",ExpressionUUID->"ecf1318c-9da8-44ee-aa82-eea73655446e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "100 digits of pi", Typeset`newq$$ = 
   "100 digits of pi", Typeset`chosen$$ = 
   "ResourceFunction[\"NthDigit\"][Pi, {1, 100}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "100 digits of pi", 
                  Defer[
                   ResourceFunction["NthDigit"][Pi, {1, 100}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  InterpretationBox[
                   TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                   ResourceFunction["NthDigit"],
                   Selectable->False], "[", 
                  RowBox[{"Pi", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  InterpretationBox[
                   TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                   ResourceFunction["NthDigit"],
                   Selectable->False], "[", 
                  RowBox[{"Pi", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    AdjustmentBox[
                    "\"[\[FilledSmallSquare]]\"", BoxBaselineShift -> -0.25, 
                    BoxMargins -> {{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                     FontColor -> RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]], ShowStringCharacters -> False, 
                    FontFamily -> "Source Sans Pro Black", FontSize -> 
                    0.65 Inherited, FontWeight -> "Heavy", 
                    PrivateFontOptions -> {"OperatorSubstitution" -> False}], 
                    
                    StyleBox[
                    RowBox[{
                    StyleBox["\"NthDigit\"", "ResourceFunctionLabel"], " "}], 
                    ShowAutoStyles -> False, ShowStringCharacters -> False, 
                    FontSize -> 0.9 Inherited, FontColor -> GrayLevel[0.1]]}},
                     GridBoxSpacings -> {"Columns" -> {{0.25}}}], Alignment -> 
                    Left, BaseStyle -> {
                    LineSpacing -> {0, 0}, LineBreakWithin -> False}, 
                    BaselinePosition -> Baseline, 
                    FrameMargins -> {{3, 0}, {0, 0}}], Background -> 
                    RGBColor[0.968627, 0.976471, 0.984314], BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, 
                    FrameMargins -> {{0, 0}, {1, 1}}, FrameStyle -> 
                    RGBColor[0.831373, 0.847059, 0.85098], RoundingRadius -> 
                    4], {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""}, TagBoxNote -> 
                    "FunctionResourceBox"], 
                    ResourceFunction["NthDigit"], Selectable -> False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}]], "Input"],
                   All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "100 digits of pi", 
                    Defer[
                    ResourceFunction["NthDigit"][Pi, {1, 100}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                    ResourceFunction["NthDigit"],
                    Selectable->False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[GridBox[{
                    {
                    StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.65 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                    StyleBox[
                    RowBox[{
                    StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], 
                    " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->0.9 Inherited,
                    FontColor->GrayLevel[0.1]]}
                    },
                    GridBoxSpacings->{"Columns" -> {{0.25}}}],
                    Alignment->Left,
                    
                    BaseStyle->{
                    LineSpacing -> {0, 0}, LineBreakWithin -> False},
                    BaselinePosition->Baseline,
                    FrameMargins->{{3, 0}, {0, 0}}],
                    Background->RGBColor[0.968627, 0.976471, 0.984314],
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->{},
                    FrameMargins->{{0, 0}, {1, 1}},
                    FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
                    RoundingRadius->4],
                    {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""},
                    TagBoxNote->"FunctionResourceBox"],
                    ResourceFunction["NthDigit"],
                    Selectable->False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    FrameBox[
                    PaneBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    AdjustmentBox[
                    "\"[\[FilledSmallSquare]]\"", BoxBaselineShift -> -0.25, 
                    BoxMargins -> {{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                     FontColor -> RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]], ShowStringCharacters -> False, 
                    FontFamily -> "Source Sans Pro Black", FontSize -> 
                    0.65 Inherited, FontWeight -> "Heavy", 
                    PrivateFontOptions -> {"OperatorSubstitution" -> False}], 
                    
                    StyleBox[
                    RowBox[{
                    StyleBox["\"NthDigit\"", "ResourceFunctionLabel"], " "}], 
                    ShowAutoStyles -> False, ShowStringCharacters -> False, 
                    FontSize -> 0.9 Inherited, FontColor -> GrayLevel[0.1]]}},
                     GridBoxSpacings -> {"Columns" -> {{0.25}}}], Alignment -> 
                    Left, BaseStyle -> {
                    LineSpacing -> {0, 0}, LineBreakWithin -> False}, 
                    BaselinePosition -> Baseline, 
                    FrameMargins -> {{3, 0}, {0, 0}}], Background -> 
                    RGBColor[0.968627, 0.976471, 0.984314], BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, 
                    FrameMargins -> {{0, 0}, {1, 1}}, FrameStyle -> 
                    RGBColor[0.831373, 0.847059, 0.85098], RoundingRadius -> 
                    4], {"FunctionResourceBox", 
                    RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784], "\"NthDigit\""}, TagBoxNote -> 
                    "FunctionResourceBox"], 
                    ResourceFunction["NthDigit"], Selectable -> False], "[", 
                    RowBox[{"Pi", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "100"}], "}"}]}], "]"}]], "Input"],
                     All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[255]:=",ExpressionUUID->"0c5d5651-4d79-4dc4-b088-76fbb01770bc"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    FrameBox[
     PaneBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
            BoxBaselineShift->-0.25,
            BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
           
           FontColor->RGBColor[
            0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
          ShowStringCharacters->False,
          FontFamily->"Source Sans Pro Black",
          FontSize->0.65 Inherited,
          FontWeight->"Heavy",
          PrivateFontOptions->{"OperatorSubstitution"->False}], 
         StyleBox[
          RowBox[{
           StyleBox["\<\"NthDigit\"\>", "ResourceFunctionLabel"], " "}],
          ShowAutoStyles->False,
          ShowStringCharacters->False,
          FontSize->0.9 Inherited,
          FontColor->GrayLevel[0.1]]}
       },
       GridBoxSpacings->{"Columns" -> {{0.25}}}],
      Alignment->Left,
      BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
      BaselinePosition->Baseline,
      FrameMargins->{{3, 0}, {0, 0}}],
     Background->RGBColor[0.968627, 0.976471, 0.984314],
     BaselinePosition->Baseline,
     DefaultBaseStyle->{},
     FrameMargins->{{0, 0}, {1, 1}},
     FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
     RoundingRadius->4],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "\"NthDigit\""},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction["NthDigit"],
   Selectable->False], "[", 
  RowBox[{"\[Pi]", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "100"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.838484438361498*^9},
 CellLabel->
  "Out[255]=",ExpressionUUID->"88bbf56d-2e9c-4da4-976a-45903b45b0b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "integral of 1/(x^3+1)", Typeset`newq$$ = 
   "integral of 1/(x^3+1)", Typeset`chosen$$ = "Integrate[1/(x^3 + 1), x]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "integral of 1/(x^3+1)", 
                  Defer[
                   Integrate[1/($CellContext`x^3 + 1), $CellContext`x]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                   ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                   ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "integral of 1/(x^3+1)", 
                    Defer[
                    Integrate[1/($CellContext`x^3 + 1), $CellContext`x]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[256]:=",ExpressionUUID->"fee5f826-082d-4da0-8c53-158c81aa349e"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ArcTan", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "x"}]}], 
     SqrtBox["3"]], "]"}], 
   SqrtBox["3"]], "+", 
  RowBox[{
   FractionBox["1", "3"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "+", "x"}], "]"}]}], "-", 
  RowBox[{
   FractionBox["1", "6"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "-", "x", "+", 
     SuperscriptBox["x", "2"]}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.838484487832284*^9},
 CellLabel->
  "Out[256]=",ExpressionUUID->"dfbdcaba-6de1-4ab1-9b52-9fdc973bfeac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot of cos(x)*2y", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"ContourPlot", "Contour plot", 1, 1, "Content"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot3D[Cos[x] 2 y, {x, -6.3, 6.3}, {y, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    RowBox[{"cos", "(", "x", ")"}], 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "2", " ", "y"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[2 y Cos[x], {x, -6.28319, 6.28319}, {y, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJyEXWeUVcXSRSUKBhREFLNiDs+AiWcfAwiKCcX8zILIM6E+s2JExAQCZkEU
UVRUVEAEehyiZAYdiUqOIzkL+N2Zs/e+3j3c9c2fu9aeWtXV1d3VVdXVfQ66
5Z7mt+9YoUKF0/eoUGGnzO+o16rs/ddBdQsOmnXRt3//vSKum1D6+3d8YZej
T//tpdrCb7xkzD3d16yJjTpefO23a2oKP/SY3Wd1fWxmqLrH/PX7/1BD+A4L
j545+JctIeVTSXjRnNrVS/GUfkskfvNnk55/VXxKhN+94OXFPTLtVsAf8fT3
7wj64PTgH5w/5Em2L0+NxOVHfxPvL/STuH6gz8T1ST23fODrt/vftSwmd5T+
/iU9E5+/efKN6+uukp6J/3X3iUcvbz1VeiY+cMmAwVf33yg9E2/zcLtqpTj1
TPyn71vPXiQ+JcLPWPJTzw2Zdqln4unvX9Kz01PPzp963r48NRKXn3r2/lLP
rh/q2fVJPfepvme7u2YsjB13KP1dLz0Tn9zs2+7vtCuRnoV/c8Ujja/+RXom
fs+f576/9s210jPxirstq1KKU8/EDyrc8cyzxadEePXpf/7wXqZd6pl4+rte
enZ66tn5U8/bl6dG4vJTz95f6tn1Qz27Pqnn5T0fbHlo07nx13dKf1dLz8Sn
f1T4VJPxC6Vn4r3X/m/UB40nSc/ED1s18YnXH1kpPRN/r1eLyqU49Uy83YR3
u74jPiXCe8656rgLMu1Sz8TT39XSs9NTz86fet6+PDUSl5969v5Sz64f6tn1
ST3fXjbPZ8RwRzrfqWfi6bqYIz0T31y2jkZLz8QHlK27xdIz8XSdLpaeiReU
revR0jPx1A7MkZ6J3451ST07PfXs/Knn7ctTI3H5qWfvL/Xs+qGeXZ+587kI
+p9r87kI41Vs87kI41tg87kI82G2zecizJ/ZNp+LMN8KbD4XYX4W23wu0nzP
nc9Z+tz5nOWfO59dnhqJy587n7P9zZ3PWf3kzuesPnP1XAi8yPRcCD4jTc+F
aPdr03Mh5Jxkei5EvyaZnguhh69Nz4XQ20jTc6HGIVfPWfpcPWf55+rZ5amR
uPy5es72N1fPWf3k6jmrT+q5gv1Rz45Tz45Tz9vnUykP/Za4fbykHJ7vj3rO
w78cTj3nkb8cTj1vn0/tcjj1nAfnfAvQf7D5HDBeweZzwPhGm88B8yHafA6Y
P9Hmc8B8izafA+an9EUc8znYfBa9zWfxt/ls8mg+S36bz+qvzWfpx+az9Gn2
Gfhc03MR+BSbnovQboHpuQhyzjY9F6Ffs03PRdBDgem5CHorNj0X0Y8wPWfp
zT6Lv9lnk0f2WfKbfVZ/zT5LP2afpU/zNwL2x2D+RsB+GszfCNh/pWfi2K+j
+RsB+7v0TBz+gPRMHP6D9Ewc/ob07PTmb4i/+Rsmj/wNyW/+hvpr/ob0Y/6G
9Gn+M/S/2ubzXIzXQpvPczG+k2w+z8V8WGnzeS7mz0qbz3Mx3ybZfJ6L+bnQ
5vNczNPVNp+z9OY/i7/5zyaP/GfJb/6z+mv+s/Rj/rP0afFgQPwiPRNHvBMs
HgyIj6Rn4oinpGfiiL+kZ+KI16Rn4ojvpGfiiAelZ6e3eFD8LR40eRQPSn6L
B9VfiwelH4sHpU/LbwTE49IzccTvwfIbAfG+9Ewc+QHpmTjyCdIzceQfpGfi
yFdIz8SR35Cend7yG+Jv+Q2TR/kNyW/5DfXX8hvSj+U3pE/L1wXkl6Rn4shH
BcvXBeSvpGfiyHdJz8SRH5OeiSOfJj0TR/5NeiaOfJ307PSWrxN/y9eZPMrX
SX7L16m/lq+TfixfJ322HDe4aaO4Z8HwI56qP6P/n3FqnXfHDGg7PR56wew7
Dzpid+EX7Nhl7bgXVkPPOwhvOnpQt7Ev0J6vi8SfOrv7u0MzfIAHx8EncT5o
N/F2IWficlL+qgVzanQ+dEm84qV7Pq95c7HkJ96iZTz8/GtXSH7iSej323kZ
nPIT/2TxlnvqZPhQfscpv/Oh/N4u5Xc5KX+zq85b06Tz/Dhpy7kvt7mkSPIT
32v0lS3XfrJE8hNf/ufyp1dncMpPfPxr15537yVFkt9xyu98KL+3S/ldTsp/
YNm8+iO+9fsJ0196bJzkJz71yOUff7hmnuQn/t57Rx/TI4NTfuJL7rr3X50z
fCi/45Tf+VB+b5fyu5yUP7XzxbHzsGnvnnX1cMlPvEGd6qPebzdT8hN/s9uk
L95tN1PyEz9j8NHTz83wofyOU37nQ/m9XcrvclL+1O8aG2tfVunH+a0HSn7i
P0w//byNdSdLfuJr1zTdYUMGp/zEa9aeUGlZhg/ld5zyOx/K7+1SfpeT8qf+
TL+4a4O+j7/VuIfkJ77h4Z6VLhzfX/ITb9Rol6uaZnDKT/zmWzv0fS/Dh/I7
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
1mvNDI7T7jkf2qV87XKepXHEerVLPI1f1qpdx3PjkSyf3HzLQuRbRK/85+Ie
/6zPnKk850nj9zgnW285MzjOdp0P2yV+w6NvjXktS6984PX3/bP+dqbyfuPL
9LlY7TrOdp0P2yX+apmeFyv/zzgLeDB5AvhEkyeg3WDyCDd5xIftMo6AHoLp
P0Bv0fQfoOdg+hdu+hef3Lh+IeL6tcHmG+LW9dHmG+LltcHmm3Cbb+Jj6ytg
ngdbXwHrItr6ClhHwdaXcFtf4mPrS+3uddzcE3rcu1dB1wl1ZjfpXBJ7n9Bp
3ItXUs4qwpdXbdNs4fS/EO+visTP2TxkYN2xrD9fEIift+CXqR0yfBZPerDK
K3/unBB/d+8jvyjls77k/rN37VVL+GtP3fPNXmMXq91ptz868u+/F8U217z5
ydrbN6hd4hW7/+/x16fMV7vEv2u08pnOw1arXeJbx+20oZQP2yX+S7+TV72S
4cN299s684v+d82LSz4bVmGnVavVLvGR5x6fVJk5W/yJ3/D072eX0pM/8boL
N51QaSbvEayKhWX2dlbcbfLEKltGT4ukJz74xCfnbMzgpE/3o19i133Ofm3J
tMmiJ97k7ao3L8rgxZ9Xav74tD0wb0fGNi+cc+fzB79+VjofNgXiMx+q9ur1
zz44NPUzK2CfnRhWvzpqzdDhY+N3d755y9JdaibEm91xwNWFGZz6SfepaaFZ
oxq7/+tZ2p9xkfil3x9zRgYP1A/x+QdcdFspPedbbLLrgZ0PnRP+mnJ+4b8n
LA3kT/zwomnHvtR/pfgT7z+18wUZPHDciQ/44sSKIcOH7RJ/bcaFrUr5sN3H
vvn89Bn9F4RP/1uvxl6bV6pd4n2e/nLKY0evU7vER1y528YMrnaJl6zb+lsp
H7ZL/LjD76v3eIYP2z11n6aXH9p0aWi+otapu7yyVu0SP+ZfTz9yV49NGnfi
HzV7Z58WE+kXjRM+5ZeOvTL0kof4413nHrtrhj/lIT6ubbfJpfw5f4ifWLf5
Zc0nLtQ8X/3Mwv/eNWN5mN17zpW/j1yq+Uy8ZMHLNWdk8QLgETj5F/i6Nv4R
/ImHfLjbGZOnXLvoV0S/hPt6Nz1H6Fnt5sPd/pg+1S75Yz7E21c1/33sb3NF
T/yhZnU6/ZzBSY95Gy86ps55zxfMEj3xh/4e+OHTGZz0WF9xyoMvjm07+VfR
E9+p5bkH3ZvBaR+wruPxg9ePGtSt21lY78Kx3gNx2o3lhz1361e/Dgu0J6Qf
1/v+my7e/0naE9qNCHsSiJPPvi0bbfgiw4f2B3gADr9lUyQOe0U7FmmX0C7l
J/8AOdlf4bCHQ4mTD/QwlPMEdjXArmqe045Bn1wvgfSwz8JJj3ERH9j5ADsv
nPYK4ys+pMd+IZz0mCfig30nYN8RTruE+SY+pMe+Jpz0mLfB1lHAOgq27srZ
E9JjvQRbR+Vwt3u2X5drF/YhwM64XZK9Mr8lwJ4EszPl8Hz20NuFvS1wPwf2
ObpfBPufuH+F/SJxf8z2kYh9hH6IcNh5318i9hfJ6X4R5SQ99pFo+07EvkO/
K7rfBfqQhz44f+ohj5xJnn4l7h9Sb64f4urvl2992CnrH3JdROzX7g9E+APS
m/t71APp4Q+4/xDhP0hv5HN+szrXNrh5ufTm9OxvHnmSPPIn7sdSD6SH/yP9
kL7XlcmfJ2fkYX+578CPcj8twk+THojDH3P/LcJ/kx7o99bf5eK+55+5SHpw
evbL2zV/T3KyX8ThZ6q/bPfSyy55s3GmXfaX+yb81WD+bYR/Kzkdp5zE4ScH
o5efzHVNOw95gulffizXEemht2B6k59sepNfzXZp/zHuPs8D5rnHRwHzyteR
/F7KSXrM82DzXH61zVvnn+SRJ3G/nf3ifoH17nYvwO55vBlgT9yuyn82uxdg
99x+yg+3+FT0Ziflz5t9c3mSPPInHkeYPVTcYfF+wP7i+1fA/uV5gIB9Ktq+
FrCvBcsDCLf9TnwsP6B2bR+UnMxzsl/p7+bQ4J5LDzyx4d6KR4pafbjshtrb
4hGXN1/49XO7Cn99149rVT5wo/pLvPXQH1+4sfY24TwHuaxmpbXvnvi37B7p
+86+4oBS+vT8ZSfh/7py6eqKGf7EyafT5krDCisqXlMcVP2UUc9WOnCj7CTx
Oc2rXp7hLzuTDyf/29u2GpqRE+e/OyUuD/Xv8hMnn9fG/fxiaX85Lq4f6DNx
fRInnxE/PLpiWKa/HEfSb7lvl1sy8kSMV+LjZfUDqs/kOHJ/H3pz089K1xfz
5MQ/WTr9u9h3g/RP/Kvhj/Urnf82f7BeN0tvTs/8OfE99t+3Wil/9tflsToH
O9+ZqXq5NC861fKoY5Ev1bm26qDSfOZsr19VfYXlsZXPpN5oN66o/t6arJ9W
Q/jTJQf2eqX7OupB+J+PnbfHP/w62b1xXcdPKPW7OA8dpz6dD/VJ/IbWl1Yt
bZf6dDlpr+iHY/74eg+YP+ov7cbhA9ff8NKV69Vf4mMXdxm+asgmtw8B81l6
IP29u3zb/B9+u+ixjqQf0s/Y84LHS/156icPrnwL1rXsJ3HYB+nT5aE+iY8o
WlCttF9mBwLsgPTs+rH1HrDefZ1Kz6w75bnt6xcdVLGw7fTAPAPjlypHTBle
/+jvzmIdIOk7H7/fST/q3lAF0X8U9zpl77F6Jy04PfMPpJ/ya8dvTpr/zlDW
+7k8zA+Q/s7jb2+4b4a/5f917sN+8Vy45evnNt/n5mL1i3HEobtsql1j1dfq
F+lXndn/lVq6z1VB9A0+/7XBa1Pmq19Oz36RfvqQK0eX5iXYL5eH/SL9Ga/W
KeykOLqm7E/DKbf3aHtJkeSnn//s/H9PmHvX55Kf9Jc1uWTxXbpPV0H0Y7p1
Oa3yTL5jpnonnYObv2dxzZbg/Nlf0s/pddAfZzftrP66/Owv6Xf+8+fzqypf
UVPn5oeUvUswTv2lnz+0b4d7v9z0sfpL+pvK3kMYp/4qD1+x9wObR0/zujud
v5sfbvHLluD82V/ST9x32rJOGzqqvy4/+0v6797c+M5W5X9q6rw+fVdkuPrL
c4G1q/octnLn99Vf0qfvmQxXf0m/YMahDy+eNtnrP3Xun3u+VoTzTb3jFJw/
+0v+fyy7u26P659Vf11+9pf0V7b4zydLJY/qh1VnbvlD5RWt7lf18JYnVD4z
9/2ffngXrof0meI94x6/Tfrfr5NaS5+kT9/h6SF5SH/DR1VXnz+4u9a701M/
pJ934y8fzzvlMunH5aH8pH+82l1FF2b4m/x4z6eH8r2pHn4MF31Yr0z/Jj/e
EeL99wqib//oC+tOGT8gmvyip/yk/+W1sx4q1Y/JL3koP+n3GzV51mkZ/nZ/
QXXalq9Wnpb1D6RP35NR3lX54b5PrulVMHys9O/155bHVj7Z1hfe7RkueRi/
z3rjq586xw+H2vrCe0HDpU/SX7by9v/dN/lX1W94fbXl85U3tvUl/pSf9FN3
+njHun3an2XrS/JT/6R/YX2fAx/IyGP2M8D+qL/MG/T4+dYDRp/06VCznwH2
Tf0l/RF1F7d9tmCW+ut1y3beoTy22U/xZ39JP79u+7LzTbOfkp/9Ff1pjWu3
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
3KaDu0se0qf39/37aP3wXcX+kod8fr29eIfGGT4mD+pd/Xud/fA9rP46T2e+
7r5Dvmh96vgB9q5CP7wn4N/T7IfvW/XXOTj53DjupqdP/gcf1o1Az8H0jO8K
6Z6g8nL7vP3u2UOGj/X3PP39wGydBt4PtPubum9o76n6e3fC+d6d3RvVvUJ7
N0/vstq7eXofxu4n6v6p3WfUvXV7L1Hvl9p7iXoHxu5X6r6q3cfUPffcdyrK
zf+CPPNf5xcYF+G+LqyOKKKOSOcUjtu4i3/uuxbl1kVBnnWh8wXMQ+G+Xmz+
R8x/q9Mrt65DnnUdnA9xX++2XiSn9dfXXUGedafzAvQrmB60Hs3+BMhj736U
sxshj90Izsf0IHti9kpy2jx0+1CQxz7ovADzLdj8lN2w+wJ2L0DnaF7/Fvx8
weat6uJsX3B5lD+3e9CJ3182f0B+te3j8utsv5afb/Gj5T3k/8hPNj/H/HPd
m1CdqsXv8rty94sirNPZikNJv/XCG86+Okuvd2tBrziIegO9zc/sPQ7zAz2f
UJDHb0/c/ze/Wv653WOS/2P+tvwru08kf8z8asULdm9I/p752/Izzf+UH27+
IeK8Le7fIt7aYOOVfS/I7rHqPiP763416Ymn8kwzP6QQ82eS9Ca7N+S6ncbd
N8LkKcT8mST+pN+y25Qdxmboyd/fhSZ/2pnUb/xC+77Tkz/pL609/Kof/kHP
d5shj/TD9Z76sZONvtx8Tnw+2/tReifK7tXqHmvjVx949rQhe+ndsCsP6bB0
zjHr44iX5yx/8Opamg+3/XL2G2+NXRjPQz0e8bPT7wyG9ns+1HHOfruJT81T
fvjpro/WhOcx/xWHpt8xDM/tXGn35j9VEP2c0x7YsuL3paHybkPHv71ig+LN
vgfd9MauWwtjFfiZxO9Jv58YK9Z46+Na9afofbPPP7jowYM/2BTBR++bXbAx
/S4w2lW8ef05J1521zUrKKfeN2udftcyvLD7Zbdcf8XOwh9/+z+9Sp7fHKAH
4bXuKfuuZYDehC/+72lPruwwL1I/jFNO/+Keg174z0rpgXir4/v3bnvbwsB+
ib7iXgPqXbNO/SJe9P6+G/5z4I+R8hPfMf3+qeTX9yn6PHxyo33WS37i89Pv
n0p+4v+tdHzrJk1mR84Tvof2wC+Pvt3ktmXqF/GCxs12/PfxS9Uv4ssO29h8
3ZI56hfxUa1/37hXrVXqF/HdL2x645Pffq9+EX8n/X6u+kX80x/fGPZ+31Xq
F/EB6fdz1S/is8+88NNkl+nqF99bu+qAevc36Dhf/SK+e9l8nqd+EU/n7XT1
i3ifsnm4RP0i3mxj+h1w9ot4Ot8Wq1/EHyubb0vVL+J7lM230eoX8XS+TbHx
KsJ4zbDxKsJ4TWe7wns+s6VF6T6YO45FGMfJNo5FGMc5No5FGMdeNo5FGMfZ
No7ZdnPHsQjjWGDjWIRxHGP9LUR/x1p/C9HfMdbfQrQ7yfpbiP7+ZP0tRH8n
x8opru8p3H/ooHOa/jXR9FAIPXQ1PRRCD5NMD1l5cvVQCD18bXoohB4GSQ++
H1EP5fY16MFx6sFx6sFx6qEcDj04Tj3kkaccTj04Tj04bvMhYD4Emw8B8yHa
fAjQf7T5EDAftB+Jvix+GenzJDyQzodg8yTcTzx3ngTMk2DzJGCeRJsnktPm
ScA8iTZPAuZJMPsQRk7rf9qxnWaZfoqgn+mmnyK0O9v0UwT9TI5mHwLsg/W3
CP3tZf0tQn9nW3+z7Zp9QH8LrL9F6O+YYHY+tCjzcxYGs/MBdj6anQ+w89Hs
fICdD2bnA+x8MDsfYOej2fkAOx/NzgfY+Wh2PsDO2zjOxTj+aeM4F+O41MZr
LsZrjo3XXIzXKhuvuRiv72285mK8Vtp4zQ3Yl2285mK8Jtl4zcV4TVe/eF++
XpO25w5+dHUwPyrAj4rmRwX4UdH8qAA/KpgfFeBHBfOjAvyoaH5UgB8VzY8K
8KOi+VEBfpT72wH+tvvPAf5zND8Z83Cp+70Bfm8wvzfA73X/FvNwYzT/NsC/
jebfBvi30fxbzMOsX8S4En619kHiX6T+vORRnh/fN2e7xBN8x5ztEkc8Ij6t
4G/fCb+dfIjXgX9O+s/h3+4EP5n0xJfAH+Z4/TbiiuENJ86LbcZ1PmeXI1bK
ryB+ZP17/vyydonsP/GOvXb+7JX7V2vfXwH/8134sWyX+I/wV9nuqYPubrHo
kd/j7XM3NJi4bLHabQD8kVozv/i9wwK1S/qT9vrk193+UxJzx30G9JP1M08H
/cbf9715v85/Sp47QF8Xfibl+WnxSQe3aPFrXHP0mMXPtp8jeSLwNyp1nrr/
llmSpwD4pXMaXFNxyjzTQxH0kPUDC0F/2A7Nn5owaL7kWQX6IfADKc8bx62e
9fzNo+NOy0475b7Gv0ie14GfOLfNVe3my78qOLmsvxPiLhP+9XejB2dIzs6g
n3r1az+s6lQsOVfCv3rP/LRuoJ/+w7Ad22z4VXKuAf1P8NNy5fw0PrnxwVvv
3PC95HwReOf1x/bbtVVfyflyGT4wFne7s3mbDSMkZyfQnzO4tN1sfJR6PV0G
p79vNaScPUH/+8x632baDbl+VC/Q92xIOVM9DAztZ/1V+eGuhbJLbwGv93NB
i0e6Fsof6JHyDzNT/rJLXUD/33XX3vvwMaO07krgh7xt/kxH0P+a9ld2YAno
v4Y/k7suJoTe103r3nzPqZLzDODL21c+5rpbiiUnxitMS8dLcp4G+ifmV//X
5X1mSs4/8/ghmD+hRjp/JOcy0H8HPyR33KeGRrft88Hau+ZJzi7Ae7foVrxl
8ByN423Y3++An0D+t9A/gT9APpXadataY9jscFWrI+uMa7I45sqf3ZfJh3h/
7L/kk67rBaHqI4OveveX5eLzme2D5EN8Afa7XD8nu7/k+jPLwp7YR0jP7wRM
NPt/4PbtP8Z9eXyx7cFXX3fOQuGXvfnahglrSmKz4267a+qKbPx+Ougn39j0
xibnrNc+dRrwWjWatR9x0nLlnYif+tzlU4o//In7V7wU/J969O5e/8AD6U8D
PfNLzp/4JeDTuNKc9ufMKeF8SFxO4qR/6bF2Z15Yc53ivnx6eOyyyWd+sGhJ
fLj5z0U/rJgrvGvZfFscz9y1+uIG72ft9hOgf/3w+j1r/7la+iF+/byTf7r4
U/m38XHge7U5Y+cJxUOkny7g/+lV9/Ydn8UD6fcGPfXg/Im/AT6vzPz5p7Et
FksPLidx0jc59z9P7j14lfSTTw/pPrUgTrht9jsnnPGH8GnYr6+ceeuIo7rO
9HURsS6Uz/zM8mzUG+k/HrTfX7/VWyB63/eptwLQDx0//q7SdxWIT4U8lwza
aY9/4IH0BaCn3tjuR7ntJnnkTOif/PJtv7+uGCO7lHh/iZP+KPg51HM+fe6U
2qX45aHHvf5nF/mNBfQ3Tn7vm0GLVvzqdizCjklvf1rej3om/bJOlU+5udNs
0bufQ31WBH2rE26evOvWftIz/aUN9d588B94IP0doKfe8rSb5JEzoZ922l6n
thn8xO/Sp/eXuPt11HM+fab+wNT4yvzHnu+zYrLwYfCjjhq47camXSdE23ci
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
I+QPSf/W9H836r/rb6Fqmd626N37U3dbffnXwkuEP7n0iAYxwx942D6+JTgf
tJt4u5A/ySO/8IqNS383qV98x2PPIaW/a6SHKvATOrZpO+a3hfNFT/zdh0t/
s/ppjXPbc+9I84vUj/gUlNZBjYceaghv+1rzTiedvBzyVxLe86vz+5+YwalP
4isuabLHSPEpEX7s/MNaTMvIqXkNPP3N6tnpqWfn/wLj6+3KUyNx+Tku3l+O
Sx59Jvn0ORx14M3/SO/PcVzOgj9zxkkH125VYYroiccv0vp64mthH2a8k9ot
jgvpR76ZvmvKcSH+dsNKhzd+cIZw8jlq1cQnyr6jjfEi/c615t9Y+j1u4qTv
iffAOY6kn7HjNZuuVLslwvsvXPPYHZl+cRyJn4V7A8TJfy3sMcfX+XB8vV2O
bx75k+3LXyPJo5/E9cP54HrmfMgzjkmecUx8HDm+feC//X5I6t9xvIivLvse
9/caF+IL8T1x6pN4H/iJ1IPTs7/On3K6PJy3j8N/q/z8Ti2qt+orO0z8q5Re
+GLsFxPT/lKfoj+gcfqePPtLfFQqj3DyOSAdF/ZL9D/iu+fESd8N765z3pK+
2x2PjnpY7ZYIb/nbAW/skukX9Un8MfinxMl/MfY3zlvnw3nr7XJc8sifbF/+
Gkke/SSuH85b1zPnbZ5xTPKMY+LjyPFlXP9tOs9lZ4i/mq4vjQvxv/csW6ey
A8RPRJxNPTg9++v8KafLw3k7FPmEx2rduvTId6ZL/lvhb/w73e80P0nfZr/0
e0bsF/G/z91v8ROnzVO/iJ989g/Xl+Kcb8S77NuxbzXxKRH+2swfZx+dkYd6
ID6U30/DvHJ6zivnT71tX54aicvPeeL95TzJozfhF6b7mnDXJ/XM+vy30v1R
9I5zvIpx3/nomXuc8sO3i8XnU5w3dUj9N40X6at1KK1PnqzxIt75nfUnVpm2
SuNF/I77239TOYNzvIjv/OCeBxeJT4nwun90qPJjRh6OF/H0d43Gy+k5Xs6f
47V9eWokLj/Hy/vL8cqjN+G7p/6hcNcn9fwozhd2SP1MjUszvGNcvc6jg47b
ZbX0T/y6nQ6vWX/ENOmTeNPr5/z3AOElwtcuuna3EzJ8qLft41uC86EevF3q
weVkf4k/ksYLoUrZ+X4dfc+ree+dP35r6+bYHv1lvDCt2bfd32lXEhtbvXRE
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
vse5G8fR9cbxcj0zXmN+qXPqt2i8iLdP6341XsSHpf6kcOZzTk/9T40j6V9O
/VitR9LfmPq9GkfSv5/WLWsciR+Z+tXCxSf1wzW+pH8h9ee1Hkm/tV2Z/4+8
1jzRH5f6mWEP+C36ziC+S8jxlTxpPbbGN0+7wdutgvEl/X9Sf1XrOk9/E+8v
5wPp70rrujUf8ug/cf1znuQZ38THl+ud+MC0Hkbzh3nFCTiv5Dwh/noat4aK
WNfk0ziNszRPSH9yGhdrnhDfEee2nA/Eu6TxteYD8dPSOF3rne1en8abWteO
c9zJpyrOczm+zh/9SrxfHEeXs6qd/6KeSuPleuC4bF+fdZQXXZfmDTQuxH9I
71loXIgvTvM8wpknDGleKDzL71iBfhW+L8nxIr5Tml8STj53pfkojSPp3+tz
8Q1zrtygcSR+e5rvEk4+7dL8WFyHOIX0g9K8jda78rpp/k04+XyZ5uvCMVjv
pG+I72xy3Ik/nt5z0bjn4R+c/86YD6Rvn+aFNB/y9Dfx/nKekL5J0qnK3Ize
OE/y6D9x/TOfQPpt+A4p51We+ZD4fKiG+Ub88jRvrLpKrz/cAetd8qT5z7gP
1iPx1WmeNgAPjoNP4nwgT+LysD7W86Wsz/S8Lutdiae/vG9VKfG8NOswPU9O
/tvPH2brD4tQf0g5PV9EPsT3S+tsJSfx9HeN5PS8HNslfnxaN6t2Pe/Bdok3
zKkzrFCBeGvUGbJdzwuxXeKog1K7jKMrnldWp612ib+Z1oGrXeLDF//znlEl
xeNnpHXgapf4s2ldt/jQL7oVdVCUx/dT0hNPf3VOkbjfUtXqjmjPyYf4p6gX
Ih/f18jH1zv143aJ/Imnv5vE3+0t9eP7wicXv31E6yuz50F16tS7MjPPI3Hm
patc/WW1Uj7peq8m+n27pOudOOm7X5zKk8o/U+uu8z1N9sysx0ic9DtvXNFv
jvo7M+ShD06PdpM88iQuD/qV5Olvkq+/XL+HVEvHkfITf6bdm82z4zgzOE55
nA/bJb7hrbOGrMnSyz58Ouyf9e3VlL895sl0flIe0m+qGlZn6+1nKh879+Dx
h5ykeTsz5KEPTk/588iTuDzsF+kXT5t4byl/4qT/5pTCJidm+csu3XTfP9fp
TNmlSSfVu7U0DqKcjlMe58N2iXceMP+rqzL0nOe0Dy+nuPRM/NqUj/RJfGza
LuUMjlMe58N2aU++SPWg9Uh/ckGqN8mjeOHJf97HrCb6Xum4SE7Sz0rHUfok
/fp03CV/Hvrg9OxXHnkSl4f9ot1bm85z9Yv4gem6kPzEn0rXkeRxnO06H7ZL
u1cpXdfSM/2HWqkdkDyynxf/8z5yNdHvndoZyUn6Kqldkp5J/3pqxyR/Hvrg
9OxXHnkSl4fzPE9/E+/vwvGX/F7l0L1kzycfc2m7pjXX6XzWz6/TPHll4Vfc
eVODtk/+pTpPry9N62FWCq9+9vJt584pQX3FvODn9Wlcs0j4BT+O6F1a5/Ai
3qEivqDeu0+VydPpnS+GvFBd+PVVS/qXyjMK704Qv+m42+6ampGn/kWVu3yy
KovvN2zK7mdn5Blhdv5g2Odn7Rz5Ipz/1jI7j3moun0/TzwXeiNe/YxXvjxn
wuqAerno9aXtoDfiUw86ekuLMfPihegv8S8uLax0bobP4eiX6lfPPuOvyzP0
7ezc7Wyco7Fdr59ku8QPqjRp9cSWv0byJz79qbPHjs/gt9u5xqZT0nOB58rq
av5WvnRG87Pfn9RlJOsME69zWzDmyO+fuTabz1x/1fslUzL0I/LYYc5b2p+7
m99/2Q3PL2a+paBcvgX6Vx3Xrk8tKz2/S+PKYbKTV5xy3qOl54nIFwXPF1XH
/FR9V61Pet2YabcpxoV4zXo/P7Ehw3+42bcDYJcOMjv2GOzYfPSL6/fWM1rU
Ka1/RlxZ4HHlOegX8SsGdN5WWj+AOijZJdZBPY7xJd7t0Y9rXvpp5v/QA/FX
H/60bWk9A+Lu4HF3HeiB+NZ/ddy/dkbOZtCD6rIa7XpvJr6OR2D+EP+48Yh7
L8q0i/VY4OsRdiO43SA9/bRXUz68d1Dg97xof0jfLu2v+Du+q9WB8J7as1YH
QjtAe+LyvIx26eecfN2cXUvrCQ8FPfHFw4++7qYM3vvC+/+e9/IeOp+9+uWd
L/mkcY8wL10Xwg+4umxd6B1mrruROGc8zM4T1+D87pky+7lZ563HNK6951sZ
/q+m61R4xcvL1invTwW/P9Ux5aN1/UXKJ/ZK5df6nZ7KHw/DeDG/HVO7wftQ
BX5PpAPGhfSVUvvD+4PB77lwXIgfjHw75wnX47pUz6izXan1e3Y6LoFy0m95
OLWfvAdX4PcyKCfpC1P7zPt6we+PtLP84dXIH2JdFPi6wDoNvk4PAT338a2F
ZeslvIb5RnxZUrZeiAfHwSdxPthPC3w/xb6sffxC7MvwBxL3B2CfE/craLe5
Xu5N7VtsgnaJD0rtBt7JqSz8+tS+8Z5dgd/3pJyKE08ss0uwh8OEv5bat7iD
5W1wf4f7e/T9HXyC86kEe0i8GtqF/InLj/4m3l/c/1I8yHu1Iyx+pH9CPbs+
21veifd84T8UuP9QE3rTfZnD9x04ZnxJhN+SuN+yAO0SP+7U1of8nKE/D/xp
3/ZL98FwAcaR+HHp/hs27pq2S3zH2mX7aUwwXsRbpPty3FwzN0/VGHmqgyxO
HIN4EHyC84E8icsD+ROXfzH6S7xd6m/wXrDiyhXId+H+XUO/fwc/ocD9BPgh
wf0Q+C2J+y2LsI5of85M9R8agz/xL9PxRR64svAa6TjyPlqB30fblo6L7Nvj
6XzgPbiGfg8O/BPnD3kSl6eD5cF4L2+4xXH0l+BXFLhfAT8kuh8Cfya4PwN/
KXF/CX5X4n7XEuiZdnJGasfCuZCH+I2pnYwXQs/Er0rtYVyFeU68RWo/w2ro
WfXbwMEncT5oN/F2IWficuK+qtY777OP7nzs2e2W7SK7WnHB9L9L/TrmIYlf
mOYhw8iyeKqi8H51Xzu0lJ55SOLp76YI+sTpmZ9UXi7NTwbIk7g8PM/yPPbu
8M/pt8zb9Ps33ZdOjbgfHf3eLuNx4pd+/sCwRnofaabqAQad16ZnaT6Z7yf4
uSfjaM9jjIc+qf8v2o6ZWhrPUp/ED0nPI+JP0CfxNXXOXPB7hv4a2D3iE/b5
5sbSOBd4cBx8EudDPRM/JT2/iJAzcTlZt8b9+ob03QnerxTO+6GfwF9VPfmD
D7ec9eFPekeLeLP0XYvQAfGg+Pc7a4fpK1g3uyU4fTV8n0L3FPCd+hfgxxJ/
4bHb5k/MtMt6GJef90b9nux8xJvEX/1izRGzMvIwL+T5WOpH5zh4H4PxL/F2
qNOmHrRf450K9tdxyu/8D7O68eNz6uFral3USN9L4b054bxn+jHGi/ikG6Zc
sqH1QI0X8V3S91vCsxgv4nvMOWX5MaX3gODf+vkU6kiFs64bfkVwv4J68HZf
xvgS37L7yb/Mz8hJ/Xh/mU/we74LMb7EB/w2LfwrIz/1xv16G97ruM3qpZde
mtbxUj/Eh+PdDOrBz8sY17sfwv46H/bL5alvdcj9UIdM+ZmHuS9910jj7vdY
Oe46R/u4Ta9WB36ucSf+dvrOksadeP0fZ357YdcJ6q+f0zFvSTym9lM47fN1
qb2VHrxdjjvx2644K16ekZP68f5y3P0eMced+Pov3rruUsmffQ+E9bHk7/W6
h1kd7Jqcutyaqkdtmr4/Jv37fVXqX+/XHV/4xTPfPi95iBek76dJ/8R7TGpw
7PrSe6bQm9NTb8TP2bf51Q9l+LNfLif15vd8mX8jXqPP+lkbM+2yv6zb7Il3
Qm63ulPk/dQv4o/ivQ7K7zjldP6HWR3p4pz61ZoFXvdI/ft9VeQlCjwvwXNV
4l+l7zHy/mz0+7NPI74mvmHFwydMWjJe4+L1pciTBM+TUH7GBRvxHsjtVidZ
AfV71CfxoXiXg/J7/SHz1Z4PoZzOh/p3eQ6zOsPvUGdI+VX/lr4jqvci/B4r
9U+8b1HPj/fa2k92lfjS9F3T+ALmP/ENxyy+ZUWXqeqv1+PhHq5w3sNFnid6
nod68HY7YLyIr+1wwLbKGTmpH+8v/Qq/L8x1RPysY6+vuiYjP/VGv3Ei3i25
zerl7kZ9F/WjOAjvk1APXp/GPL/nl9hf58N+uTz1rQ7tsJx6vOz7JKz3Y78Y
N3VN3/vl/VnhvD9Le0j8gxsLDppePETzgfjJ6XvCsR3mA/Gjpr555o8r5sqe
OP3rGEfiZ9333eqfMvzZX5cT946F894x9xHix/128i5DM+3yXqS/I4d6POGs
x7tj4ty2Y17cW/jMbitOLY1D4X8WuP8J/za6fwv/Obj/DD88cT+c/rnirxvK
9Kx2iTdL+6W8sfuZ9NtJ3zTVv+Qk3uLeMj3zHSH5vXyfjX6707Nfzr+6+cl8
R45+u8tPPXh/G5tfHXP99sT9dpxzFfg5GuaD8P7wJ7H/RvdXcY4W/PwO+3tw
vxrrInH//FOMI/NO+6T2U+cCxFuldkbnAvQbD70nx58scH/yNYwv+Rx4bJm9
De3QL+I3pfaQ7xrJH+Y7cjjvCH7eAT7B+dQy/5nv2jFP7ueVkDO4nLuaX813
86CfxPUDfSauz/PND5+YGxckHhdwPrifyfngfizng5+rcj64v8354H47zmui
n9fgfCf6+c5O5vfynTr688T74F27PQzn+3hP2z2ydrhHRj37+RTOsxI/z2ps
/jbf97vd7pfxHBn7aYH7pdSz+73Up/vP1Kf74Tx307vBKc5+Ca+etqvvctIv
/SbXXy1wf/VljBf5dE/lic9CfuIf7FMmP98VjP7eHeiD04N/cP67mL/Nd/k4
Xt4vjpfrobH5551z/f/E/X+Ol5/jox4geD0A9c/826qPyua59E98/y/L1pf0
7H4p9Uz6i9N1JD0Tf/3ysvUYcX4X/ZyxkvnbfAeP+nc+1L+3W938bb7XR/17
v6h/10Nj888X5MYLiccL1L/7n/Bvo/u38LeD+9s8z3W/nePFvOhu6T6l8SL+
R7o/xnPN712T62cWuJ/JcSSfM9L9UeNIvGG6z2oc/Rx2R/Of+f4ex9H5cBy9
3V3Nf+Y7gRxH0s9GfzmOrh+cLyd+vny++eFf5sYFiccF3HfcL4XfG93vhf8c
3H+mPXQ/nP4G88MDHijzJ+NctKu8ceqvxs4YL+KPp35pfALyEN/yaJkfSzw4
Dj7B+aDdxNvlPu5y8pyC/vDfaT48/Iy8N/GBad5b9xf8+yPn23sj3fGOB97t
lN/I95AZF/h3WFrC/yf/Wan/rzjCv2+C89Dg56Gk9++Y3Ab+pB92+MbLS883
ee/G6+R5r8Tr8Mnfv+tB/dAuNcO76Hzvxd/z7G31tK+inpbnIH6fsbLhfF8U
54+yz4O/bnF2hdXZ9/P9HuiLhvPd1BF56m9bpXqTnSxM9YY6q0XR67uoB39v
fIS93/4i3uf81OpdcY4Q2C/yeQLnqjzXJv1eiOt5ru11YogrCzyuHIP5T3xA
eu4Wh2P+E985PV+LWBcFvi5YL0F8SnrepPoHx/lup787ynNAX4+cD1wvOHfm
u7UN/T3w8+1dHa7HF6xeAufIAf0t8P7iPTHpge+JQW+J643ryM8ruY78nJTn
IP6eBs9BiPdL53PcgvVOP3loxzb1jvq/us4+SOuqiuPkwMqIpKKzEqJmpAFi
mG9hqM/TgtsiGBk5I5mYRCygVoKi4CgJD/uIu1gqjq+8jCy+oSSmBurM89i0
CAQqYr7FECCtim+LsqkTai73+znbfvH312/mO3fOPfft/M753nvPvejlqNf3
79hvBU/f3aGP7zPW2bk47h9Vfnfb8Yt+Vxn4qLmvv7xx8072VUu+r/qF5qfn
wYaP8jjiOstTQbxAHhXkD0/5k4Nfovw25cdmPxe/fbTyXVNv+PnpXZI41+r5
JznXCt5w0o8nLXz2gRJ5PzxvNvqA59N7InEOFvyB7VM6zf9SDvdM8Z9PPuE3
4xfMeixHv3lea/QHv1M4/Rb+v/It0G/In6D3DdGT8i8q3zXtwt++X++cUh78
xPS+T5wfBj+/+7DK9W+vj33wjPv+YVe570+92M+Vej+U8n7ffJXOaYM/pXdC
OVfp5/fUD8F7jE75oslLH/wGeemZ/34fTecwy34Os2DlyXvPOQrPY498v3cG
j+TnpdHf5z//U88Dj3xfF5xXRM5ZabziHKznmb9B85/yzWn/AjznOP6qy6cf
MtZLOWO9lH299NQ9XM9jDy/h6xr+xNcv/enrgv70fO/o6euF/kTOmKRnnFP1
fPLEHZTPJ33iXjn4QL0HSrt8vXOO1OX0sPLzOtqHnNsHxsv1Z7w8Xz39kGEH
ym4HKjVe4FP1Hijt8n007ZflfL8MPf08sPzksvvJ/Af9/97V/HD8B87zZOxH
l3w/mnOPlP+z/suc84l951P3PbRNDjhyFk8dtXvol3I4D0n5m/uNa/h8Z8iJ
/rw9lY9zJvTDJUl+jnN94HclOXE/KOP8Us7PL3F+z/1n/Af6bWm3Dvekwt7a
fbS830eTnnk/fyh/puT+DOXBe//yqrf6fokzLtirQet7VLXlYaZe8HHTb1/7
h3gvbFPpq+3GppKvO/xt8E5nvTTsoaOWR7vcjoG7PUF/8M63vPKjpf8nh/V4
XtIz8Ixxz2eMe97HnfJ+P1H3+mM/4rJ1N1d179tCPufA+yj//OF6593zJSq/
dMSh5MOfZfe7ySc/1Hjyo7W/oP9+/O8+PXbtW7OKW0vKux44edfRx/PFoY/n
gVd+vMDJj3eD8lREXvTnvvdF27pAf8+7Tr4Oyt+Y3vuIdvl9Ctrl84R+9rxe
+q/F/DxP85N2eR712WoX+Ha9Y0i7mG9P6x092sV8u1V5y2mXv6M31PjbR8Xf
0i73D2mX5wM/VO0Cv0L2n3Z5fnLaBb5fGhfyfsd8Ju+38mNHPE5+bOXfbj//
rPzb9IPntR5ifNou8Wm6D1j2+4A6Zxhx7jk6Z0h5/kcNKU91lAdfPWlP3mnw
2MdcK5x7iC5ndYf3uLeU3kh+r3jyAwIfm/pB/9NOgW9LecVzB0gf8A0DL9rw
9c8eLQkPHulF4ZKTdzmqN+/16l2VWO+8Y7W6wzvy7frTb6yvfYbd0vrcvFWl
2WoXeGuaV8r73Snw5pSXPre/2gV+RMpvXxIe/uqRwiUn1vV2yVG9ea8XHs/f
k2K8XH/axfpalN5NyNWpXeCzlMePdoH3Te8dlLqpXeBV6d0E3Sv8OPzAIcJp
F3g/yVG9e+UPpF3+fhPtcv1pV/B76Z2OaFfkz092O9oFXk7va0S7wF/7fM87
HdEu8H8Kp10uh3Z5vbTL30uiXa6/4sqyx5W0F7/l2k2/aup/6ybmSeAD0n8z
2gu+Lr3zwjwMHu/5lXvei2Hexj7CC8Jpr8thfoIfp3pZd/6eEe11/deoXfA/
M5J9y81Uu8DnXf37wcMPai3NULvAj+mytVi19d3SwWoX+Kppe+xhTnjw888K
l5y8y1G9ea9XeuZdT93vDvvM/W5w7OeHKQ8VeN7xepXHLjWeMmluG6/LPRd/
5+6dbum/RvllKf9b6b2E5xzn/ou/u6d6817vUPEh4F36jxnb4+p3dB+53c9f
mPLN5uZIf/BvJj+n9LH0BB+Z/KXcR9Iz9h+FS07e5VBv7Jel/NJRL/i8lCc8
6gWX35j7VPU6Tr0uR/3Qvn80dsrFbTxwg+oF35LGvbRZ9YLXnnbv1LZ7hVtU
r+OSk3c59L/XuybjPl2tnQtq1Lkg/E/Poz7BzoecqfzPemcn/FXeP6q3cxQj
xIvq3ZD2fXO9z5LeF2vPN7JeeUXW2L7GaO1r4Ndh97ql+ZY7UP6b5zlstH2K
Fu1TfHBQx30H5bHJrc24n0U84nnG+qte8NOVb0355YJvJ7+c3gcJnPdBau2e
BeMyxPIY/1B5jGvtPO0x2h+fYOctH9G+6pqM/A9LLD+P7vuUGi2fTL3yyWi8
cj5eazPyAKifc97PLZrn+CGzk7/NO5Wn+TuVWtd5X9fcT0T+qzq3OcT2N/+o
/ZQ5ds+9r+656/2miCt570zvEMV5Nt5Nq7L88O8p73qDne9qPiSd70K+v9ul
979i3+QRvf+F/j7uyCGemqx3pvReVfCHvFeFHPyl7yuPcb3xbFqn0V7W6QK9
u4Qcxv195XelP8F3p/byTlCsU94Jot8YrzrljaTfYn9Q53sn2DkB5rPeu4n1
yHs3ejcnzgM8pndz5lieE8Z9iO27MU8aLK8I41hl+fYZ93rbD8Lu1dt+B/1M
vT4unL+iP7vq3Un0935Gjo8L+nt/or/3fx+7h3WGzseusfwk2OE+dp6W8thz
8Fm6V47dcFzvE8U48j7RErunhl3aqf+m2w3sA/iwXRsfXrDj1bgn7u/w1tp5
vAHK985/zd+Pkx+yF/9GveDvP3xO4/xZj/Feaowv79LW2rmynsoTjhz3l5Dj
767W2vko7D9+CP7Yo2l/qjTB7n/xH8dfot/uTTwJ/VP2/qE87Z0o/rDW7svQ
rl2y85Q/Xv2Gnfd3cpuMxxguHqPO/Odm+c8Vxm9cI36jWnrS3guO7D3llPp2
OeAz7rhgybuzd+ge6Maw28sWnH3Ftxa8XSrKzwfvcfLKZy5d/EYO+fTPdS9N
v6Nm3N9DPvj9M3ef2xZ3Iz/2i7/9ZNWw/z5P+byXp17w1dUj9jl94FrqDXzD
a08MOu6m9VGvv6eMnrGfkvTMUR787lSv+KiN7fuzSc/QH3yScPR3OegPviLp
z7gE/lTSP/Thv3P9hWNeaePTkBP5xlP/hxzwUX3m7Ng6oDnmT5zrU1yMnMhv
/NBvj6q7oCXkgPeqmTzk6ekfMq+C7+qd/iMxXuAfKS5rMh5smniwaluPK7Qe
i8aD/Vx8VMF4sPfFXzEu4A8qXqswHmzK8YkHq7N4bYnitSbjtZaL16o2O7BU
dqBovFaL+KW6DF66YHyX/PzQH3ym7HaF8V0zxXehP/i8NB9Cf/DNNYm/qsvg
masz7FUxg9eqy+ClC8Z3DRRPRbv8v8B6cbtXYTzYZPFg6O/8dpPxWjfCy2Xw
z9UWd9/Df8T4rpvFO9VlxOMF48FWib+ivR6PVxgPNjj5saGny28yXusY8VrV
Fr//TX5+0firvuKRCsZfbRTvhJ7gNyh+rzD+aljy50NP8FsV1zcZHzVKfFS1
xfuPK+4uGh91vXihgvFRVeKR0BP8IsX7FcZHTUv/tdAz3k8UD9BkvNNZ4p2K
tl8m/i3WKfg/FO9UWLzzE8U7sy0P80TlYRYe9mpRyhsMHv/NS7W/VrT9sru1
X1aw+Gid4qMKi4+qFR8hH3yQzn86L3GseAn0xG50PWT7hW32BDzug2gfDfkZ
5eP/u0jli7Zf9oL2ywoWr41RvEa94NtkryosjlukOI56vTz/tdh3U73uxzbK
j6Ve7MlK2Tdw/su3ad+Neim/omP5vfbpira/9qb21wrG/7wl/od6wT87eE8/
x38B/HLFodTr5ekHrxf52JkT0jwJ/fEftP8b+uM/nKt9uoLFszsUzyIH/E7l
zaZe7Mb4tF6iPP7G15QXqGhxUIPioILFuecpzq2wOLen4twm45euFL+EPvjJ
pyjfO/USZ/0g+UUxb8EnDHzivsnjmmN+xnnL+el+OvXGufEuAyfW1ET/lN1u
dLb9+rm8b5jBQzK+kY9Ldgzc/Sja5X47+rhdor0R7w+6fPcHm1+P9oKP+CTt
L9Ne8HcvGXRty5yNYc+xPz/jnTjb3/+O9vfR3/0rz3/4V+3X0y6PC9AffOfR
n/y09e1nQn/wA4fvyZMQ+kdcPHj4/fnuT8Y68n036nV/nnrBm1O9MT/BVW/M
T/BXUr3RD+6fUK/7/4yjr1/0Ad+SxjH0Adc4xrkI8IPEt6An+JtpfOO/z3rf
V/wz+oDfJTvQ2XjpxeKlaa/bGXDsRj/5OfSDxy/U6/aEfgAfn9Zv9AO41m+M
C/jFaf1Ge7Enu8R7Uy/4ncrD39n48Lz48Drjwz8QH76vzgljlz7WuxXg2JPu
yluI/STOmq/z6pTHPhyhvD344W5nKM/6PUP3c5Hv/gx+sq9f5IDfrrwx1As+
SnYA+f5fQA79c43eQaA8ft2JOidPP4fd7lz5l96jW8POxLu6D1510pm9/hP2
1vkNyjsfwrh7fI0c8AeSnBhf8OlJTvSD++HIZ74dprgb+THPU7tCPvhNqV2h
v/NCzGfnkVjvcU/ztg7/r7LH7+D+X8M+Y7f/neRgh8Oe71L8C55hn+Pc0RT5
OU12boH4CNztUpPt+xOngPu6Bnc/ocn22YkjmP/Oe4D7fGM+U35Gms/Bt1D+
8DTuEYf6f5/y4Kv0XjDlnd+g3sh7mfKoxDx0/gT54N21fw3Ouhid5n/I8fkP
7nYePT2uBPf5jJyM+V92+0l58JzsLfq73UaOx4/0G3hrssMhx+Nc1i/jconO
Z3a2c3RX6hwdenqcy//O42XWF+t3Gvn6LG/eteJ7WddeHj2Zb/8afM5zJz77
YZRnfi5P+VLC74r/iPKwUR78yI54+I3f0HlRyjOvlqa8OnudL+3VsXz8XwrK
A0a/OW+GHC8P7nbJz3/iT1JvnDdWHi3KZ+Dh7y3TeUvKB9+Vyu91PvNPHcuX
3Q4zD/28Pbjng0I+dnJG6oeQz3q8V3mNkAPeX3mWkOPlkcN6fEPnLZEDvp/u
MyKH9d47zZPoB8pvlxzks06XKW8P5bNw1svUNM9Djs9n/i/gvcRjg7MuXlIc
x38KvLZj3Bf+1UjxQpR3Hgl9fP4jB3yy+Gpw1kWN4izkOx8OnhGvhT82VHwR
5TP4peClrxP/DM562V9xEzjrYqH4GeQ7z0M/+LpADvhl4oHBWS+qN9obcsQ/
g3v8BR58iPgW9MlaL6yvAxUHoQ/lTxWvC055jVfo6bwxuMdl4M6roA/r6DCt
I+oFrxF/C8760nwOfZwfBqf8rzvGR+GHV4pXobzzMOjp6xE54FeJv0WO88D8
B52HIc5ynpPyzqPyf3c/HHsV+T1SnBLxhfNjlKffeqV4Kup1ngo5zi/x//I4
hfIeP9Jej+/A6beTFAehp9/PxQ9hPZ6vewqUB79H9+/wc+L+ne5BUD72N3VP
jfKsr8W6XwDOfH5c90OJR3xfEn/b9+PAnV/Cn2HcW3UPhfLOe4P7fhm48z/I
936gvPPJjC/4L9TPlPd9K3Dnf6iX/mxUfyLf/Un6mfbel/a5Qh/m89nan6K8
7ysxvvTPE8nfiPkAPlLnSZhX9Nu6iZs/qTxkQ8wT2js+zauoF7xF50PAfZ/u
f6kKd2s=
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1:eJxFnXn8VdP3/+/7nHPvPXe+961kjAYNlEqmkAgZypwMiZTQRzJnnoUGM0kZ
CknmoUxlqMisQpRKiUKUDCGR3+vZ6/we3z/ue6/3Puvsvc+09xpea+0m/c4+
anCQSqV2KqZSocotsqnUUXWp1OYqn1TdX6q7rZxK7VtLpfbM6Hg1ldpS5e6q
fyydSl0kenvRB4h/b/G8ov/30nnj9Ptd9Q+Kf3PVdRD9iPgHi24mei/xHyr+
tfq/t3gf1e8P1Y8TfzVKpa6s8/8Pq36tyvkl9S/+ncXfSDwna0ypnMZTn0qN
VbtN9e9ZOjZDxwbogu4W/6mqv0X0xWrrevFfq/Ietfe1zrtE9H1pj4PxnJlP
pQaq3y9U31G/g9XWJNWvFc8K0WO5FvHupjF00P8N1U9X0V1ENxbdrpBKXaDz
mqqfWyup1NWiR6mv5jp+uM59Ue2MFL2v6JPUzr3iGyee18WzreoPVP1z4rlC
9E6iDxXP0Wr/VI3rNLU3Xn2MFv8U8T+g33rxbK7yMPEcqnO20/Er9f+p4lmn
a99Z47lC9A7qp6Wua5ToUL/p4glUjlX9lTrnetH3qu4m/X5Rm1WVm0auX6f/
C6IvEv2b6Bt0bI3KM9TfGNG/Uqd2nima97RY1602HxL/m6p7Vr860duqvFN8
d4l+TvR1+v0Mv9pZpLGOUf1Lqjuk5vveTG3soetvIp65elaPaQyH6uU8V3y3
qY9zVI7RvVofmt5KfMN0fmPuoa77f7pnPXTsH/G+rbauEH2l+r83bd4FavNm
HRusczuon2Eaw/mih6uNO0SfXed2HhR/a/FfqDENEH273qVrdKyXzumk+otV
/6D4b1HdVerncfHsofrf1P541d/B81U7kfo/PTDfQI3tLJXt1cbW4lkhuqax
3S96pOgRZX9XfF/Xq/0vVX+b6p/Q2Fao3VtFH61z13ANoieK91PedbV/l8oP
VT+Q5y6eR3XfDlTf/9P/3+b8TT0g/n9Lfjd4R6brvMtEb6f+Dtb9P1B9NtW1
9BB9iOjm3L+qx3+PzrtZv0t5DhpPM94z0U/p+O2irxJ9t+pvFX256C4awzzR
p+ncUSq7qc2uanNb8d8pvpbq8xWN4R6NaQvRdRrjP6r/UOfmdR82Uf2GyN/V
HJ1/Jt+xjqdFzxVdEM+62NfXRn2tF+8hoflyoi+s8zt0kPr9Qv320Ll/l9we
32s7naN/Ux+p3xNFdxH9o+iHNL77xPOK+M/X72jRf4lxpvr7XHRR9CzRC3l2
ogP9dhR9uHhj0a1Fz9NzzohuJXqZyvU6toPo7iofU/tvif5V9BOivxRdLXmM
IzWGO5h7Vb9E9ZuqvrF+O4n+QH3OVf23ordUXU6/DqKPUjuv6Ni7zJlFz9PX
qZ3Fad/vO0R/J/pjnfueeP4sep4ezDumvn7W/01U31XlXNVfr/qbVf+e2vxG
9VuU/F6MV/0atTM3cDtc59Oam95mftC5P/AN8txVTlBfL4heILqbzo91zmaM
n3uk+gmid4o8V+SYl/U8/lR5gOo/K7ruGrUxSf+/LPor1bVWOz+LrlddN537
CuuUfu9VTS8Rzzz9anzXKu/WmA/SmE/XtXyo/zOqf0S8LVTfS/VTdS2Pqd8t
NLaeavMj8ZTFs6PK8bquyaK/FP0Q37B4eojnaI2hJnpz0dfovbpGz/kG8V6r
dl8U/yLxPyn+luI5TjxLxf+c6r9Q/dv6FURvr7Itc4rGMEtjGCv6CNGDNc6J
OrZB9NYqJ6nNWeL/XfQxut6ZopvpdwbtiHdTrX176f1vp77+0P+nc99UFlR/
ovr9WvRrGuO3Kg/ReWWV9+v/k3TOXL4D8S9TXxdonAP03WzFdel3n3hOFM9s
8Ryv6/tex17Wd7Gr6hrr+Hdq5wbVbyv6B9G/6XeE2m+k8rOS55Pb1fbV+q1W
+yXWrKrnn7tEj9C5J+jc3dTeL2r7WNV/I75O+n871a9WO6+rv8NV31D0GF37
avEdqf9fVf2hvAOq/1L1J4p/e8YR+J4fxreqPpqqnKrrurrseWCk6i7S70f1
k1fZJvI3zjvxjfo9Rue2U3m5ji0Xzwe6jnf1XK4QPVx9/ctaLt7rdB3/id6O
uV1t14mvhejHq5YFRoh/mZ5p77SfHcdeVtsDVK7QsSFFX+vdugf76JpOZG7W
/5cUXe6o67tU9E+svSqf0bvUR+dvrb5u03PZTsfPET296nX5Fua00GvZDzrn
Ro3nOPEfzZpStZxzq3iu1e87HR+hd3Wo6O9FXy6eWaIj8Tws3icKfi5bqv4n
1W+m+udFD1X9PNGrdW4j3bc767zONdb/u+v/bVQO1rg2Vf0zvMs69yuVDfQe
Xq9zR4l3pcpj9dtN/KPFf4Luz/H6XaNjo3lvmANUHqvjr4a+v2t0vdchD2ls
E3Xsa9U9qvJ31T+g+k6qb6W+OuqczdXmiJzn4UU6to9+l6vtL9THPuI7S/Qg
9f+P7nt3ZAeV2+ncHXVuI66r6GsLRd+W9bN+T21sov+3U30DlU30fixS/Xgd
Py/v+fxz8ZRLnreHqf0bNIY2qp+v+tP1/8WqX6jympzfhY9UX1Jb26rNssqn
dH8f53pFr1F5TJ3l8GdU/6SIFqo/qeR3/1zkJtXtGPh7O0z1PVQOUv0Lqmse
+Nv4Rzy9+EaQh9TO0/q/pdoZGbt+K43/Po3pM9UfpvqxGsueonvyjHVvr9YY
2+uebcY7oGOReD7Ne77/VMf+UZtZ1f+r8sHYa/HdarOB+OtVXyf+Acy3qstr
EF8n7XfU+KYEXk/ROd4tmWaNvalkveMEtXeU6C917jSN5UKNc7LObac2e6qd
l0N/298wt4rurfqndW/3V12kc/bnfVN9UfVfB/6uD9CxSeLZV2VKPAfpWr4U
z0TVPS7+laL7iv8DHQtY21ROKnjeO4lnJPon0f1Et9f4yuL5QjwrVNdI9Ew1
+03Wc+cylW1CrxFV/W5GrubZaLxP6Hp21/FTdW83Vd/Hqn4ntXeHeP4MLKs/
rPq9Nc6/dZ8Xi3cT1S9U2VF8ByN7iH6Me6s+dhb/jvr9zdyl8jm1f4KOn6b2
j9E1fiueF9XeIxr/IuZZjX+g+CZrvBNUN1u8WZ37scoPdM65qj9P9c9U/N5e
LnqcfvN17lGqW65zlzFnib5f9Z+LPkL0hepjK+ZmjbmW9/t2nuq+0XgOU10L
5J281+op+j/SucfoGwxpQ+efxxok+qO85ZC3xPNd2ePvo+Ntde378V1onK14
thpzXr+4aB1gDddU8Txzp9q5Tu/JV6rvqnO+1xj6o6NqDO3V/izV36qxbS36
RdFXoAvmLLe8Lr5c0d/PL2pzQd7y1TLVP8U8wvwp+piS15nB4j1H/T0v/jbq
vx/zM9+3+jqw5P6/VjvXazx/1/ka+ounpXgq4jkJHaXO7+4hJR9/S/WPiL8b
OgPzi8Z2Gt+X+n8lML1ZyjrfGyoDlV+pj7SO7ac2Opb8np+C/qW2MqrfX3Uj
NM4ZarOzxnks8px47uCbQi5nnhfvCaIP4p6pvS9E3yT6QbUzXOe+qXP3FH+f
kt/DW8R/aMljf070ESV/Z7+gI0TuF75lKusC93Gj2nld7exesX6LnnuOxn+Y
6p/l+arfLugDoncT3b9sfetu8S/SfRgq+qCs5xh0n12RlWOvR0/o/hync6eI
zvIdaRx3i56hupv1+4qxqZ0WkfVQZH3mNtpsL/r22DrvQ2pntM69TvRrOm+m
xj5C9M6szbrOyzXedSqZpLEzDNexbuiKKvdGXs6Z/3CNc5XoYci66Dc6bxed
9qjoe9X+DTxbleP1/w7I5+K9M+m3m849vuZzsuqre9ZjXCKec9XvDoFlox9E
bx1Ytmuvc3dXOU9jeEl1J9VtnOpS43WNXcV3iv6/X8fuE72p7sPRGvMjorfg
WxZPF9EniGeD7sPxyAwa1yPifyj02tpP30Jn0at1fNus15a3NZ6R6vdk1m4d
/7hk+wN2CGQeaLGk3tOfvqK303mf6rrasa7qulbFlv22Vv2ZvANqv5X6Go4M
w/qr8n39eou+WG2+FridTbEdqL/9xb9WbXysNpuqzbzaPEXjfkjX0593VOf2
Y81V+Xvse9ACfUe8D6mNSaIfwg6jdjZTv48lMtkvyKE6Zxfxz2EeCKyL7arf
Z/p/jngOFv8tGvNboruInq8xdFa7W2kMb4pnmup3q1iHflZ9rdO4ti+5jXt1
P56p+rvogu0hsk7XiWNq8xOde4jO/UTtfCz6INELRf+r43uKvxlrrdrsr/F+
pPr3xXMga7Ta7YPsrb7ez1nmbC3ed3KWM5uK7q7zu4s+s2jb2+Nq53nV71Dy
unOS6uerzb+4XtU9XfUctYfoJtjgWKORN3TuaTr3mqxtchdgq1G/q4ue59/X
eSW+i8jjPFn/byLe7XSfBhY9NzCX8N49EPnde0XHvtS9v0e8r4peKHp01e8v
7zHvWab4f/Iy5/LuqtuN8w3zzvSU1w1o+mBeHBl5XpujNrO6F/eqzfdFLxX9
n661F+uCzvsMnZcxqP5v1f+v6G/rIOZmtTlO7cTYC8Tzu3hqFa+ztN9T5Yn6
3RVZNzla9IjI+ths8f8l/oY8U9FpdCfRtazlNXQavhXeW76Xt8UzS8QqjeEC
8b6u+vvF+4Pq56n+BY1/QcWy8xcqL9HvDfrVOH8Rz6/ieVE8K0XPFz25an0D
vWNd1rIYMhny1s/i+Vk8U7ArYEtEN0N+0+/eyDInuhc62BLm66Jlz97qq33g
emTTvcRzH7IidjGdO0blRSo/U5s5tdmcOvXRT/W99F6crLp7Iut3K8Rziv4/
VTybBe53TsrjRDZFbGuQ9ZyHXogsxrmL0LVqlueOqViO4/7PV30f7MjYdrEp
qn6C6jX0jfYw7GJnqK0dNYn9p3O/EO+zqntOv7bi6acXaqLoLUW3Fs8v4plX
te2O+j563xfo/6t1/PyCbZPYKCvIgfrzOO1XfJ1c76cqy/o9EdnOjD3smcj2
vjMr7pO15iwde1L1A9X+negDkdforMawn469VnVfkyLbQkcXvV6wbgwP3SY2
tVD8O4p/GnqPzt8rZTvk/yq21S9XWSeeHcQzFVs6Ok/kOWFX1bfJeMxnBL4n
2DGnqHwxsv363IrtFR+I52zR3UW/LxpHAjyPJO/yw8k8TMn/zMXbiOf2yHMQ
tgXo41Su1XMKVb6k8byB/YU2dF0vIfNHtuNsp7F9J55PkVXzrr8AOUL1D6s8
BzsQ+mPkMb2sdsaqnQfUznmB65/W/6frXA039ac+5gs0/puwCTAPo5eK/rDg
d5d3eJXomwrW6wdX/bx57stUXiiee7CBiz5c9+xjdHaVy9TPN/ptkvK6yLz1
j8Z3C+9aZPvGXTpnAmNQ2Vzjv1TntUUm1P9b6v17T23/Fpn/S2zQOvcWlUW9
/9cy70e2ATXVdc2NrAfepPpPIttn5qn8XL8WgUv+bya6hfpqpr4K6ut/emc+
jWzT2VT9fij6arVxQMl6wTSVW+m3XG0/xdpetLyH3Hd22mOYnbI9h/aHq2yG
vsez0fjf1G838U1XOYxrF+9Q3jn931n0XurzDv3aimcZOoeO3a/6w/Rcfo18
LZ/r/6VZ61k7q35/8Z2u+gNUHq/xXBh5rTxO9AWR1+Wds7bnY9fvl7EtBZvK
KRnbf7ADIQ8wpw9Qn+v07k3Tsa66J52ztm9j58a2zNxxhngQeL4UT3fxfKLf
N6r7S+VhaqtvZLm6UcHPgmvEnjZb9Kd8LzxjXeO8iuvnMLdg01GbHdXmpmrn
MmyG4lkonitE34hMqDIQz2LxHIqMrf9PUv1slQdWrSdVNfY4a3n+Bb0bd6nv
pZH9dzy3GZHfUZ7pB4yN+6x+lmP3UP2t4l8Q2Xa3GP+a/u+GrUC/FZHtRZtm
7AfBH3JbxTR116nNnsii2A/1C9O27aCPrtK5ewW2XX0leqnO+UrtX6b2rxTP
HXnXY7fcUvfwKrV3ko4v0K+Jju1asW2Aa8FWcBq+BhGN0U1q1t92Es9qHf9Z
v3fQIXVvl0S2h/4e2T64OOXrW4ROmPAsFv11yscXMucHLvkfW2Jf3d+BOj4f
/Vf9/Kj6fTTOgRrDbjq+rcZwmfqervrLVV6n35Xi+1rjulb0u1w7/hDRj6qd
nZPv6X3VT9H/LfX/KvQmlbcWbJ/frOQ2x/OuqpxYMD/P63LWBdUfqffx7oKf
6RUVf5szE/pq/d4RfQ3rdt7Pt5XG3FP8m+m5vKP6Bhn7WfC33Jf3t1CnNm9B
LxL9q8qbK/alTtZ5v2JXVTudArfP2Eczz+sezo9sq70g7fvLvX0g728nUps5
vbfdkF30nr6uc/fW8WkVz9+76JzLNJaLdb8uEu+N4rlU9AbVHSf6YfGdgWyj
voZgAxLPDVV/K9goPtb5V+l3pX5b6zdG/L01lsHo2uJ/WvzbiJ6o+sY6PkHl
nxXPq8yvl4mnh9paL/q1vP0FU1XeqPoZOrejzl0v/mbif0LlnarfRvxvY8dT
XZO0x/cvdry07XvXiWeozr1Z43xK9Vfp+Neqv4v3Wee+W/B4thH/oypfqzN9
jvjuFs8BzE3iGS36HT23C/EnVtzXJJXXYgtV+yOrnrfW6Z7vGnh9YJ3g+pEN
/hV9nto+I/Qc+nnynvM9YCt/Wu1MVTt3VS2z/RH5u2ItKHBtoseJ51bx3Fq1
DLY2su2O+Zg2jxd9Vuh+WZueFP/z6OFV64h/JHIgcyc+OfxxyF1/R15390/G
jyyNbP9XZN3savwpqhzBtect4+DDfVT141XeXrXM/2dknfBh1Y9R/W1V+/3W
JzLeY6qfgF0Nm3bea8EuuqfrdB+3SPu7HimeGjY+vl19R4djP9FzvwLbjuiu
oleosYZ1fl5nZi3XbKF2D9HxBupvf+ZE8T0Q2obM/Lepfj1Vf5XaOQLbi44H
Sf2D4ntcz/lkbGtq71u134D2Nc6DmNPFH5SNL8Be/QG+IdWv5/6pfop+M0Sv
0XkPciOxsWBz0P9bohuq7Kr6A1TfSfXv4StV/WLmFmzFqv9R4/y+aFv9RPW7
FJst9hPxd9b9e170Jug8afuz4MMXtrn+/0Rtf8c6J/oBlR31/x5q8x+13VT/
74mMgT1ZvzaqP6HsuYdzS2pnct5z7fZap87TvaimLT/cWrMP5gjxD8K+p/oP
krm6XvRO+KT41tBV1ec52LgC2z/Pxc4mehfRL+Qt7zRT+2ehz2JfVf1/GleD
tM8fp3ZOSfla/ofNRDxNysYJPKnz3635eTVMnuO0wH5ofMa76ZzOLEbgYUTv
j22r7PmwLJ5Wge0zlbRtNDfQlsZyCjpm6HEwhr6i0+KZJrqd6Az9sQYl9kbs
jmHVchHy0RSN+RHx/iH6N9HtVP9XwT7mjTZ5lUeprxtj2+WeFc8N4l8hnv8q
liuQL27EBpH2sUh8bdKWP89GF8YOB8YEOwp6odo8R/XdMpaBd03eGd4d5qRD
kjnw77xp7LoHpv3ewJfCz5q2DHOq2nkEXJDqzsQGjs1S9bM0thPF+ha2C/16
0Cb2D9GXqn4Rz4g5WfwH6NzTRG+fsfzzinjai/8lbJKqb6z66ax19V6zZ4r/
hpJt7EeV3Qd9fVTwOsR69EbBsvChoqeordd4p8FwqP5vtbkZciz2D9Fbin6l
ajn9b3Qo/f8277z4u+Mf0P+dRA/HtltvXe4N8e+etgxMfyeA54mNFXmh4mfx
PONS/Q06ryM2If1ap+0vm53Yw7GLTxHPHNZ/HR+R9rXzTgzLGM+zUjz19bYX
vFm1DI49aQl2bp37mc4dhY8aGUD1/6r+s+Q+c7+PFM/knO3AyKrbsbbWed4K
km/hAnRtnb+2YL8/PKxxf2KLw5ee8Xp7QNrf2AGsWTn7RvGlU898up/qB8f2
pR6j978ubV37nor7GlWxzRfbb1v8mBXjQPj2kZ/jtH3Vz+YtR2+hPvon39Gb
aufk5PvqpWN/5a2Dv4XdtWKfda+y/QhR2r6Ep/L+Nv9lXawYL9Y8kWmPxfaE
byVv3XVr9TUx4zlzLTbPiv0XX+K/EN0tbXo+9zRtv8YXia3mG+ZLXfs5Oc+9
8ByVNl5i76Lv93cqX69zPe2eVbAfk+/lCJ37bM729sNFP5y3v6Az9qK8bW7Y
Mw7ju9AYn8/Z7p7Nei7n2+yvtjpXbbs7Ed2r6Ln5fZWPq+ySPOv9wI6k/c10
V/t35YzzwRbSmXuZcXsHJm3urWOPqi4j3vYqz8QmoGO76/9BOa9x3arGllyi
ft+tuC+wFofo1zuyX+Bk/C86/xbs36HxHqtZv3XuTarfoLK3zj825flkK/H/
K/oR8CFFz10zVN6lZ3kY90/XHoGNCYy7SIsepWMDEtnhQ9U/jN9H9aeKf2HR
voAZqr9E9QerfBvZIOX1cxb29pQxa9SzvoLPSoe2rbwVmz5K/aZj46DQHViv
wIGBARvPHKHyqqxxVdSjU5USnAZ4jTtj93WPeB8T/W1g399LsdfckPUyaxtS
KbZPkLbBo7EOPxparkWfe1f07fil0fnV3p+sdVljir7NWNZjnesruktgTNh2
2BrU5iqVV6hspXZfpP+afVCvB/ZDgSWDBuOxoWT7E9iu9SWvdazb6Hwfagyj
EjsnvgGwEAMSGpsnazj3vI3onuATNJaL1Fdzje178T2jvseK/iiwX34PXcM4
fIniuTNnW/3KjNfzV4ONS/RGHArXAn40W3SfVxWN/YPnJGQx/VaqftescWe0
f6X+H5T3PLCn6nfP+T6cKt4OZY9xUMl+GuxvsdrL5IyHHJSxfP2P2jkwaxvz
Dbr2fVWega0NnJrK54v2T41BBlGbBXy1qns3tq+pm8rLirYd4WP5Ts90VWD9
7Zqi7Ze3qf5EfMCq66Rv4nGdsyIwzgdME/RnOvas6n8ObBdB6Abf2BFfedZ4
TuyN+POvD40BxXb1Y2D7VX+NdRvxLaz6OrlerusZ0asDt9MPrIDKlnoWDxXt
ExursdUX7d87TvX38Z1znujXdO5/gf/fBxkqtP45QjzbqGyPnzD2O9hVZaDf
ELXZSfwHZ+07y6vuzdjnHpY1/nFD4GP4LaGbJc+V58u7fWzWtswq35Z+sc49
TnWDxFsJjbncK2ds6ukZ2zGwYYBr3EP3+QOdM0zjPyNr++Rmsf3tPMd60fuU
PTcM0bW/ERhjCf6pc9ntv6rr+wQcpuhdVZ6p+9YfbBF+q6xtlQ3VzllF+wWO
TLA8fPszsLmondeYa1W/ndo4OjBeoZ/4AzAL+DewG+jcW7LG/12HvSjjuXcm
spzKJaofir6O7yzwe887/3XJNBjMg6vGtmyiNvMF4/2W6rxb1e5w8W6b95xN
X/wPJhAcCO0+rms7AZlY5fVq50Ide1xtn1E2fgY/xVmR8ZPY+5qrrTmi71Lb
u+SNh1ylviol465Xq/9RzInIKhrTDzp2F7Jz3phseBao/lswbeprEvpI3vir
RWljH7GxgElqo/rZql+huhdKXlt+QJ/AHiL6j7T9YfjFmINWJphDsIf4AaEf
1LEf9f9votuV7NvDx8e69aV41qj+adYkXX8XZK2M/SpgEp5S3dG6J7+rbkvd
291U/xO2O/X5VuR7hW3ofp6Nyjuzti9CY/89Me3x3ya6NXZg5vC0MaNgkN5n
zdKYPtX/U9V+w5LH+6vu4aWR+8KWNEXHH1B5eGw7FH1ih3lC9OI68zfU81oc
2Cd4bWTMDNiCVRXjtbCZg68BZzM1Zf8kNDgAfJv4/nlfJ6qPpYHf0V74k5i3
6+1T5Z4yvoOL1mXAzzaNPYZHwKVkjAW7PWtMDW0i0xxa9DM/l/Wo6DqwDDfq
/rYVvVDHGmj8L6rtXUp+JlwLzwXbwCLRv2X8PBkDflnecd5j3uFjiq7DZ/sr
6w1rnsZQlzWuYw7YHB17iLmxZps02BL0ty/z1q3mq3xV97Ql8mXN3wftc51H
Vr32/qryjMi44nvV77qccf5P6/xjyra1DGJ9UF+jU7YRFcvG44HL+5A5VPR/
2PT1/6esg+jqgWm+k5/S9mUsz/jdmRf4/SmXTYNbrpT9HHhfztd459fZ5wi+
a07guYJ3cjbzhdoZqXG2Q78Q/XlgfAXYOzDI8IN7/gzcDdeldr7JWN5A7sBu
+mZkPB92nc/EPw85B5wD7xAYmrKvl+veQ+P5FVlBx7dS/feBsTetA+M+weKA
fQMDtwCdKLZPck+Vn4rvYp3Xod7YRniYW7H9INttKZ7m4rmNZ5H4aceAlVLZ
DJkKG7vOvSr2XAtG7OiMcbNbiu6hdnqInqFv4hjRR6fsXwYXCdYRPHGF906/
93Vsra7nWdG/qzw3wROCKzw1Zzn8QbX9gfo9X23fjC+35HPB1aCTI98iew8N
3M6HavM6dBj93hW9pmT6Z757jeklnbNVvefGBwPPpd+Jfhj5QGULZGW191vN
9+aE5B5uxOHVOR4IDMawwHiMvO7NwMDYnW6JrDI9tp8QfyG+zANjY12O5BtR
++dh20zWfc49ANlGvz/U/mvimVA0700127oeE886lT+VTP+Db0Q8o9ROTddy
fux3B0zoKvE8jk2m6Ll6QuD5/JLA18g8flnger79j4vGfl8qnivUzga+8diy
ODI5ugB2Ndr8T/9fAkZZ5StZ+1fx3SLjLqjz/eQ7YZ2/LbCs/xjPR/RRKce2
3CP6rcRWBI2u0lBjGIJfStf7RsXvzyEFx88QR1NR+Y3OfSBw7MCeBct4r4r3
q5Lbx6a3adExKL2RSWLH2jSKbSeo5zllHWu0b8r+FeQV5BbqwbSODn3OYTmP
6xrxfBh7rJtQZjx/sN6ehuzIGqG6o8BN6N+hoicX3T44K2QXZJh+WeNb7wqN
ZZ9adHzThSXjw29V+y9hQyha/nq2ZnsKdpWNfoE6x20h880UzyDxjKgZ+zM8
MP6HmBd4puBjjy23ZsGOxMaSXZJ17AnPhRiTvrHluP2y1p8YAzL9hyW3Cd77
5MDvOdga8G93BsZogWsaERhHNCj2N31l1tj+sar/uOA+ofk+wX/dFfjb+En3
6jbdhx4qF5RcTyxbk6JtRS3rjbVHnm+rNk8J3Be6FTh9MN3/Zf3d3Jl8d/WB
50C+/b+zxkoho78v/v8FxpjhF7o4sP+pSehvgPf/i9j0Ufi+NU/N0nlb1+xb
Qi64FDtH6O+Hb+e1nOdXsDvzY7f5u9r/PDbPEdz7tPFUL2Wtsw9J1vR5Ona+
6B/T9r3jg8cvv1j1V/AtqP7Y2PPiMpXbIi+qPqf7sgjdWfTf4mmpcfZEtlI5
QPfuE3SagvVC5D3kv61C8yOH7R7b1/1j1r5kZEzW6dVpyzyTsb3HnkOPY64K
jJnjFW+FzMCxmnG5fNPEM+EXQjcuxLZXrQtss+qn8q/AelmbsmlioAAl/ZK8
Sy2TdWqh6B2zxt6DIQELzDuOfgOOFxsA/tUBus59deyPqnEx4G+m57yesa6h
a70Q+zvYm3lax38P7M9toXZ+Cxyf9WvW/sw1KqfE5sG/DSaZfkeU7LfBz4du
BWaQ+7A85dgtrh0bBjEH+I72gC7bP4ifEFsH9otxutZdQ99P3smdQ69JrEeT
A/uAlyZ66EmiR6bto+O+r1c/vcvmIdbh+LL7OrdsHQ69Dj1uYt629ZYay9ll
+7vGJBgJfFH83zXRGV9MdEPwmferr7Y5X9NxzFfwB8bEfIIuTL9px1niU2qi
8TyPzyowvvR/Vc9nS7CZxJ4jOsfGuYB3Ye47HZuUeL6qWq+k/YOQ32PrlpPS
xmtDo2MeEtuehD7ZXvU3BMaO8L6cnLwzT6v9/oFjGrFVXsk8Jvq84kbTemrH
guUP5BC+jZ6xZXD80Pj5r2Xd0f/fxaYz4lkh+kbRx6v8MXa/RdUvif28eqnc
RPfqKtbTjHHsVweW4Zfr2DWiQ2wgOceS9M7YDsA494n9jvUVfZeu99+s8T74
oF+J/Z2MTvt95b19KrY9o1/y7eCzZu7rEhvbc67o59PGwV0I5lXlJLV3DvJD
ynj5U5J5ckrJazRr9UWB6fGq3z9vuf8vtbMowflcWTCuGLszcaw7hr4ucPa7
xMYlVTTmRwvG9Ue63zM0F+wr3m2qtvkhN2L3Oy7n2JmbdezUxMezAV9Dye3h
CwYH2ED0oqyxQTzn5jrvj5J9PserPEE8JdExsnTW3w04nFLGOLi+orcP/VyI
PdhK45zIvchankQvIi7tm8BrA99gn7zpfMZ4oU1FL8naRo6tnL7RpWrJ832z
5LbxL+PP5F5zn3nPwX7h+1ytdvbQ+atYI+Ikbk/t9yr5PcbPcmjZtonDwA4n
eKqTsefoHq5Q/xfjd1Z7j4W2of+utvZVm7/x/EueO7DPN0rkGWy+A3Te/XW2
lYC7RG45Bsx+0TGyw/H/iD+Lvqz/39L/m7KWqq+z1e4TdcaJbR47BhoMf5+c
Y79uzxgTjsyPH+UHsCcaz/dgfvLGP58i3gY699462++OzFmuuVbnzlRfq1R3
qfqajs9IdWnR3wWW+1nbZpQcC4LMP6zq5/iK6E4lf9PIt9WcYwQ2qO9LRW8j
erraOjptPwLxCc+XLK+CLXkr63P/xG+XN0b3v7T1b/Rw5oIZ2GuZy/PWgdGF
14Fnq3r9fQndomQ5HIzKtASngv99dckxm8RuLglMcz62J94X5G3wsrNE9sAP
ozEXWEMzltuZr14uWT5nDnmVb6LsGE9iPYnRAGPM+MD7ENdzldo4Iu/7Nj9r
XQb/TA+VfUuez05GhoyMswL7Nr3ktb6fypF5rwX4f2/MG8uwUu2cpX63Ud2W
krVuiYwx5btKFxxLNIt5LO94jHrsM5FjQ/C9nZM2NgK/0cd5+zQ/zBvri875
E+s5smbKOEYwX/ioNvqlyrbDPpbYZsHqL8dWGboe2yw4GvzH+I5nlYxz+xE7
X8nxRFwvGD3GwPVcDO4wZX/o9fmkLY35idjXVc7Y3pITPRcbf8aYselpY1zw
CeCnQQ5GHkbOeLBmO3jrqu3kxJmQQwDbOTIP9nP8LMRC4O8mthqbNvbuh2r2
Z+xZtf/lncBxHGnkxtA+NfDU2Ja75CyjI6vjh+iac46IszP2NYDvB0uAnfMr
5JmydSF0Inwx2EX5rohP/Bb8V9o4POQEbL7YfrEFMQ8SnzuhZhvEQVX7JrDJ
/sc7FdtGjd0YuxO2EmLJH6/ZB9O7an0WTDD24lzs/Afkl8Df1S3xeW2f6I/I
0C/r3DdVnp/Yc/C5YO9oU7JsCg7kjpzj5b/DphXb5oYsek/OtqYfM7aL4ivB
n4GPAH2bWJhmsfNSYMNZWWfZF7l3t5LldfAhLcWzm+pXZaxX811Py9pfwFoL
bm1UwfFf4AcmJ7bsQVXHMfOtzdP/rWLj/LFRPqCx7SX6j4x1YNZW5Py98o6D
GAsevWb79cCq/c34nX8R/5uqX4scqfrvxXeL+A/JWY8Gr4zvah/wb/h0K9ap
0K3w68yq2paCTeVQnfMPazf6f+zcF8ThgHcC64Q/AxwbeDYwnh0KtrETwwXu
B/wPvo/9CtZJB4M/LVgvI7axv9oviue+jPUUMMTghP+XMz7nCdX3L1nGJaYb
P3bjxJcNlh9f2+nivQxcYOh4tCH6XSR6tcqb9RvJ+qK+hpd97cRI3iT6pjC1
ETi+W9V5Qg7XuG4t+14Ri9q5ZP0NnA96IPogfqtZurc7EbtWtq0SuzNx8eCs
8bEhe02s2XZ5VNX2Pex0VZV75uyXGJAxPgUfR0b3r1vOOVfOV31Z//+Zcu6L
nln7FvFpts/Zj3Z8xrrCLom+AL4ZX1VzlW1yjtHolbFOi267vcqPc74/O6vc
LWdcLvjcv2LjKjcgH2h8l+D3LRvrhUyOfkvcwje8DxnjC8EZosvsovt1LZiw
suNnkRWRiXcCp41epPpbI8+HrFWse6xxYBlfLzmOEFvZr3qOz6jN19OOJ4Y+
DttHxe8CmPAKmA7mmaxjXYh5eRN7e9o+e/z11/E9qYzFe3jaOD8wfpvnzTOH
uqLx7GACiR0jlwjYj52rtq8sBR8ivoPR/XWf7itZ9sA/iF+YnAmT05ZF8UOj
Szwovs7cp4xzOgxW3ZOiW+Udczc0Zzss9lhsreSawSaDvDSxZLsQGP5puvap
ke3740qWu/BbjSpb9p7A/Kw2p6n+I7VxY9br0eSMMW1g2+7n20973ZmUMdYE
zAmYhMvE0ydlHzy4kVdVfy3PMeN2PknbB48vfl7B3xrYkVNSlhvJpcD5+bzz
S8zAFlF0HXaYgyK3yTMg7vtltZur2XdMzo35XLd4poseIp5P0y63UnuP6VnP
RLaVnFDM+9kN1diCgvk/o6+08RjvqN2B4JNEz6k4Nhls3mX6f1jWZYO8cweQ
Q2Cq+OOy4xOJU7wq7/jZh/RcWse2d04X79NZ2+oPjY1t/071j6WM7Z0VeU4v
Fhwv9pvG8nBsnqd03heB88lgN8fuAv4b7DfYfWgwtMtL5iH3zK+cr+N78q5W
bXdfU7WfA38H/pHd8/bT/Jy2vwA7P/GUz2Y9ro5525NZk5ois5RsC/pdPC9i
r9TxprqftxXsvwNjNrRqPe1J8e4Q2876LvbVktc17NLkGUGHYy1DFsAmS3za
PznnbXgW25Ge+xodv6TmuFvWi1fSjukHywKOZYP4nxR9IbaWrHEj2JFHx+Z5
VfybhtY30ROIzYVnWtqYrodZB7KWa6DBlJxYtNx9ec05RLAnP6T/L8ra/9tD
bb+W9vwR5Z3TgBwpYILPzvp7xQZQx9qh+pfFuz5n2/G5WecBOSJl3wN4W7C8
+IH2yTs28P6ccS2M5U/R48rW18BN7Z12O9ifWVPGYM+u2Y6KDkfMTsO8Yy0v
yBm/R+6U98Cpied58f9Zcxw4WOv5rN0l42PByT6pPt7TOdvqme6qfvfjuRTs
8+ba3xPdpWwsK5jWkaxnKcfm7FU2NhWMKj7xbujyYBpLxmoNLRm3BT6S/4mB
mqC+Nldf/ULr6uD5huSMlXpNY91FY35a5R9gDIk5EX/jessp4G95h84v+Z5j
h+9ett98vOg+2JNCxzD8mvgyr8feG9nvPoP7WzJNXo3bK+Yl7uFq/V5OGUN+
QclYYPDhm6i9gwLHiuM/5b0Fq/uczv0EnURj61oyTi3A75G3r7RO1/BiyT6m
fbBJV22XmIqOmHN8D/FsYIGIdUyzDmYc70jsIXHgxIM3FO/xVfsDf6s6d81z
KePqz0s7TgeM7OUl20J/YY4t2qf3SM3+BewbF6s8UPVzmL/xseKDVNtfil5S
MhYKTHHD0Hhorh89Blsndk78dNDkwtkv42//++Rb6x547bmmZAzsf6yD4j+S
9Uz0A/o9lTIGHpwNeJtpqnsIX7nGPz7vuITvk9iEg/X/WuaGtPPYgUPcod64
KnBX2FWn5Y39flVlGBp30kL171c8h59ScM4w8EM8tk9KpsEIY9dFRuqHHF52
nyeVnbtngHifyxhTN0HlcpXvqv501Vex4eSNvXtbde3Lxg+DI56a9XNh/iJu
ifE/r//PLNmGiX9ke2Q18fdFJtL5KyP/vz5t3gPV9r+Bcc5NU/YvoK8NLhlr
D+YeuQo8Prh8cP7EaxK3SSwnvg/kt9NV3lTxceJsiKEBew3u+s68sf9/ZR03
Q30H/X9eye84mNtsaPwWz2lhyTS47NvzbuNPnftE1mvQ41nHg2L/Gaj36e2S
bdSnqjyvbNw4+HHiA4gTIMaBWKQxOqeRnumFacczgCMndolcKL9nHU8K5voX
0beJPj80zhy7e+vknbw5bz37Z/EMq7jtM0qOYYGfvjsVLR+QL2VRzTkjuoLT
LFi2mVNwjPi+oWOq9w59b4l3mF80fj5Tdmw78RXIq+TCQ2YjhwzPYq+E/7Kq
bfMtavaRIWs9WnIeFuIu8L+uiR3ffFvaePndQ2PmiZlGPkY2/jl2/DSx+cyP
zJPYH/FxtA2dS+VYdKHQdpJrEh7mC+y6YNAXJrZBaOamxolfCf8SduLdQtsu
D0/shNgL/0zGwPiw28PDc0RXIjZopspnVO4RGs/Pes+6T8wU+cuQYYjjww5P
PAX2TNZh5gjmB3KfIXugs+xb9nzFvAWWuVFofAiyzGahZZ7uybms4+dlvSZu
Ld5SyXkd96jYJwU/7yE+rM1DYwuHJmvQkWXHu3D/dcpG/ZV4MvJsLU1s7Nja
sZtiH8cWhr8LvxdYosdKlr2GgAuuWv/eomacCTz4xdok9mrs1vjjtgyNrbw6
abOa3LO2yX0jrxlrNLEVyKDIou/ovVxedN4V8m0iiyOTn6V3/qasZdFMwfIr
cmwj7JqZ/5N5V+qcRnXOpYk+g16zRSIXPBdaXp9cthy7GF0KW6LqyuJZXLSv
vFZ13rOz8F/WvO7XQtsTCom/7I3YuTDwia7OWZZCjlqTty6ETnRuzjoAcvsG
5suy8WhL1e8Lop8JnYeKXHATQ+eOIOfb6+IdqH6XFR2zQk5ObDDI0sjUV2St
OxTylquQiwLRNzPvqJ1bcvaJdAidKy2ftv0Z+zs493dE38Yckvgo8VVioyZe
9g2eYWS7N99Fr8Tmj+2fHHDM+eTFQiZEf9w2tm6JXnlmbFs47ZBTDdkUGfXe
2PIhtn1wKdiwibUnv1rrnOdJfHrvFG2v2KHoPHun6djpug9vFW3fLlYt1yLf
9tWxS7PWm/7APlm0nbyMDF51vqImNcugyKK9c84pSX6Vg3O2L3E/n03swS1C
24FLadtaif86MuM4y1rGaz5yAN//C0XnHc0SU5iznRbfLPZyjpPvLZe2fEuc
WuOc7/3nic12YOjcVswr5yT3uSO2ltDxnmcXnRPguJLjb+iXeR4fFjEA5Gj6
qeJcQ1vznhJ/knYeM+RMeJA/FmT9zXWIbYc/MXSuIfKikhOGPFdb5ewbwkc0
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
eRv6xMaAgQsCC0cuSHJCkk8bfxn+OHImk9OBXA0vx8Yx4scEo41cjvxLPAmx
V7yX5NQnvzn6JPvygIsD/wY2DPwYuDL29wbLgc+RPZSJ+wDjBNapkjM+DTsh
eg15HqKcMYrkDyGPCHEu6KRgYNFl0HHI0c0exsjo5HwGrwi+kZhycIZg/Nh3
FVwHMjj7ow4oGP+/WdU6CboJ+gW6FfrX03nj1ogrJ76cvDbkt7k+9p7afK93
1BzDgs5IvvmDY+cVmRs7hyZxyuwBR04tcpJ8FDufyKBkfiDPCPlGZsfO94X/
6K+K/f745dl/mT2MwcGytw75r8BHs/8gsRLoxOSAZ2+mmLkW31/BMU31Veeg
A3NJ3gb26yU/2EqwKBnH32PzZy9g4vHZ/6R77DjBT2PHVpDboUHV+iDfCPFA
+8XOozVT5Z+sM6Ivjp0r8jzmx5r3S0ZvZ9+l/WPnFns7du7ESSnHiZC/iDgR
4kXI4YYdiZz3xNAeznxedS4ScpJgtyFvC/lVnoud9wz7A3hY9uIEtwaWjXxx
4HWJ+yS3ETmOFsTOeUTuoyGx49cuUHlPzbnawJkTgwVGiHhh8vqT4+akZD4n
3xn5m96JnccMOwH7YLMf7Vka5+ZV55W6LzCWmtxfYMceqHm/N3yj7P2UrTlO
kvctLXrHjJ8ReRaQK9g3jX1XkW/Zj3Fl1b4r9ioiRyjyLPtSkouBtYC91fCH
4utkn4682uyU8XiIlWBvCfYsYi9pcJ+zkpgO9m1h/xb2oQazx76R7D0N7o+9
Jb+v2s5I/vZSzTZQ4sjY1xWcLfkwfqi6ryUF56sEG0k87htp55wmH0g7nXtC
znsTk4eXvGAsumCZCKBgT0/ilonNISaoVnOsURPVtyenQc77fZN3AOzQPjnn
XSU2HJ8TOSLY04J9k8gvc2GiK5GDGtl4R2IZCo6lXaDyu6rzKUD/JHov0ctF
/1z1fsPfi67UXM+8ulOydrKP+faiD8JWJLq16P1FP8i8LnqHjN9V4grxsbLX
HnvvoYewhwX7TBGXS0wBe1qRn4gY9mcSvzZxk+RMJrdAs5L1TfRH9jBkjzBy
CQ1C1wdPL/qcivfYmpzQ5Xrvr9ZXfe0unqcS/ifTzltPLpT1Nds4wMJhgyUH
zH9V5xA/TTyfF2z3I3cGOFjwS8QIzCk6hoh9fNibiJwt2Oofx65Zbz3nmKox
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
TNfeWe+7Ax749qJp9iv/f4jz3LY=
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJw1nXXcFdXXxee5Mbfmzp0HMBAUEAQBUVAEExH9CRZpK4qErZgYqCBhIoiB
YiGIgaCCimCBYBAWBmIrYhd2x7u+rHn/mM89e07Mmbkz5+yz99rrtBg8vP9p
mSAIbikFQU6/e1SCYHv9XhQGwTb1QTBL8vOSDykHQdQgCErVIHi9LggqOt9Y
+dOSIPhZ+T1Uv63kz1Wvs/Lf0bGj6hyp4zo1vEJl3ioEwadREDypvI11vqLy
93FO8lnqxOpiEIxRu9fSntrZR/k3xUGwr+QtJb8s+QZd54VsEMzWuV/zSkv+
TbKaC6ZIHlRT/fR696mtQ5Q/VfmBrnGw0pfp3JUSt1KFf9XeCJV/UuXfUP69
urftdf5EyTtInqzydervIqrr+her/Ar9tlLeszpuUX93UJ1flN5X9Zorf73K
L5Gc0XUSyV3Vxmhd/xIdOyt9lc5PVHvnqHxDPc/7Ez+va5W3v8q3UHtfSv5F
99JE8jJdr6XkZ3S8qXOfhu7bGh3fSH5Zz6+gZ3eRjvfVn166nzPU/wd1jdf0
7B5Vexcq7z3lNVN7WZXfS3X/1JHomo9I/lbpc1TmO64peYDk+ZIHcK+q/7Xk
PdXfpqr/rdr8UffynOo+J7mLzp+i692q692hujtLPl3yHZLvkny06m+qtmbr
+m1U/jbd/xzlXahyG+n+v1d7I9XelzpX1LMbqv7fpPqDlP+Zyp+k31mSh6sP
26u9+epTY6Uf4x6U95fKj+E56IhUfh/JJ/H/Ke99ybuqn2PU/lgduyt9mvIf
Un4XXW8v9eU+Pf/WausS5f1P5Zfq9zuV/VD5/XWtBbrmD8o/V/fwg64xWO3e
rvqH6dwWyntE9Ucr3UPpr1T/KLV/lfJfUv1PdW9vSu6reoGuVVX+aLX/uNof
pVMlpd/U+eOUXqYyn6itHXTuAuU31rkbdO5ZyT9IXie5PWn1aWdd7xMdkeo+
oOd7nvr2lp7vZmr/aZX5VuXfU/lEZZ+UvKXyD1D5J0p+3n8pv6nyRyo9UP2b
qP6ukvy55MGSb0j7f7/aP1PyoUq3UVtD1P5puv/5yt9T5ybo3GwdjdT2wzrK
ylusY3P1+2Idz+g4WvKUtL33eJa6xt+6vv76oJPa76Q+nZ/1N3xE2t+vlX5L
+TXJz6qNIUrvo9/f1VYH5Z+r/J91HKr8YTo3Xe0fq+v/rGdwnNo8R+V3VF5B
/T1Y17xGee107tzQ98y9b6T0MuUXVGd3PZ9rdQxW+jA9zz4q30j1YnXySp3r
qLx+OneF0tvq/MlK76frH6U2Nld/mil/f51rqvQ8ndtE6QU6nlefr1F7Jyh9
lOrequvV6Xdnlf+Cb0Z9X17yvahacC3PS897Us5jLmMv7+N65fdVG0uUPl35
jyh/N+Xvy7ujNu6UPFj5bdS373R/v6j8RsofofSRVdfdWHnP6vpfMp5Jbqx6
cfq+tFV/euvcYqUfVEc2VvpRHVWVWa82fk/fx/OUHqcyT0meLPkz9Xed2ntC
ZV9QuqT2TledBepPL95ftdVP1z9Q+fW6flXPs05t7K3r/aP8pqp7vcqv5XvV
ueuUHqdjleTGkhvrWv10j32Znxj31P5q1XlQ7f2ocqHkQ3T+E+UfpXPLVL67
jvHq3/fMZUpvoet/rrw79dx/1PfVSM9vK7Vfp3NPq62xaudlyUt533i+6uc9
yhuu67+mOlep/azkKTru1z2+qzJFlW+u8l1V9h21N0Dnt+D9U3uTVT5U+lYd
f6vs1ZJzSt+k4w/Jf+r+86r/ttIr1P9/JBck/6D2pqr+Kt3vMUovUZsfq7+b
qlxefenF96XrHaDjcqVbqsxparu/+p9Vfk+dK5In+XW110LnLlP6T9VvJ7mH
yg9S/kbq79aSf9P5V3T9TSTfnnWft9L1H9f1t1bZ23X9Q5T/g8q1UPmuOjcg
Hd8/UtmuzD+6/mZ6vuuUnqW879XfjdVee5Xvp/K36d5+Vf02OT/DQ5U+TGXm
Ke8Jlb9A7TdW+Rm6fkn5W+v6E9T+myrfUv3fUuXrld9S8k9Kv6Ty2+p6e6js
X7p2Ue/TrZJPUtmV+q/+Utv/U7kr1N4OzD+6h5zOXanfbXRfPyg9PLS+cr7a
WKuyvdWPK5UepjaeVhtv6ByKEN/PVsq7XX26TPkz1cYfqn+46n+mvGE6t5Ky
6l8t5+tdrvvtrGNPtTURfUJ1M8pvlD6/q5V3Y+h7naHjOl3vJ537V/39WvkT
Vf4/yZHKf6i2V+p+P9BvhftX/p4ly5eqfAvJ7zMHq85dfK/MMSp/j+SrJX+v
vL/V3+mSr5D8Le+e5GWS75Zcp+ecQV9T/45T3cd0ZCV/qnINc34HmNNeUvn7
eH/V1xzzl+Tj0EVU7pfE8/+76Ho6vuRbYT5R//5Q/U1U9ujQc/tpyr9abdyh
/+sUPZ+Xlf5H9X/T/WZyHl921H+0Ru1mU7m9rt+/4Gd5vOo8qzpnqb1flXcx
c6DK9tH1/1H6fzryKnuO8n8LPCdP0z2dGvrZnYu+Jnmu+nQd+pba+lfX/1fX
L+t626nMUKUnq3+Dda3HlP+r8i9X+dNV/hrJv0n+R7+9dX8X6bhf1z4/9L2O
Q19UXp3u/8qs+9hIdc9Wn2Yr7wy1eQa6MPOS5Nt1zMu7fINUH7lS139SbQxV
2UvRKdHtlL+Z8v9S/sOR50zmzld075+jn6u9hir7EOOZ2ntIfdwHmbETfbRi
3exb5Z0pOVKb+yo/1DXuZb7TNdsovZWOIbr3e1XvXfW/u8rcw/ulMicwP/L9
qu52OndeOr9MVpvzJK/NWt8uqi/zJa/Ler4vS75Zbd6gukeo7jxdf7qewTe6
n/XKD9X2TMnfSV4mucB8n1g/7aC8Puh/zGFZj80/K+8ptTdG/flc+S3Ql3Vu
rOp+oL7U11uHQZfpq7Y+lbxX1ePnS7r+Tyq7v+SK5CboRcrvLbkq+Qj1o6Xk
91V/ier3Vv11ki+O/V8307mr9PzXoBeo/CgdDVkzSd6bsV5Hb3QdHR/rfhqq
/CT+D7V/gcr+pvTmaq+95O9Vdm+V2wL9o+D/qw4dQ+cOVn4DpQcqvZXyn5N8
qeSvdb+tJTdRf47IeE49lbWG8sdJbq6+tFL+NXyPun47nWurc81VvmvGOsgl
Kv+urtdQ8iU6PlWbN6n8Jyq/ifp7vfp4reQPJW+v/MlKT9X7c6/ydlc6rxfv
H8mPS/5PZS/S9f7Q9YfWeUwsqP2ZieeSgbp2R+U3U/4uzNd6nvdI/k7nm6bj
ZR/15Xy1+2zOa5ApyrtY7/tzki/Q+Q9UfpzkFZL/ReevWh8+R/8HS7pnlD44
tG58KGOc7mexrj+G8UBt19TfC1R/uvJ7qty+aq8ouUl6/e66l4skPyP5bvQV
yRdKXiJ5rdqYo+uNl/yC5GeVf4/yY8nN6Y/kxyKPd5tI3oX/m7FbcrN0vN9b
5XOSN5XckWfI2rpq/X0t75v6N0j3MF03c7DyH9czfVRlWil9q9IHq7+x7mM/
ld9c/8d9ur9n0HGVnqBzfZWXjay75HV/o1T+EdXfMvBYd5DkW3Sdz3X9zRiP
VGah8lszNyt/svLnJX5/H1A/+kp+XfL1kg9X21upf/vzP6h/C1RnP6V7Vd2f
qvLvQ38oWL/cVn2aVLY+w1jYXuX/VrpBwe9qK+UfpfxL9DyWqT+/oiOrrZ9V
5r90PNlefduoYP27vcofo/KtVWZ3yb+jV6k/E3XuLeYn5V/N+k91Fqruv7qf
kaxPQ+sm6Cjf593/cTmPKfeztlB+F6U/1LGT8hrr+vUZf4PH6Vl+rPZGq713
VPcrPYsGqnN01s9otfq2THW2VN65KvOGflcmXo8+q/O78zxUfjBrE7W5ccnr
q0+yHnNPZH2r9s9Q3R1YO+h+3lX+QWl7I5XXSHUGqfyTkg/Wf32K8u9X/8cy
B6v+2ypzmvJeVJ3Pde0t6a/SzXUsVR/uSay/n6Z2duH9Uf5Q5Z2nc6egu0m+
GFuMzp2i/P6x+8qYcIie9Vpd74i818T76Hof6FjI2IGdRm1fpT4dLPnjwPaB
T9TeGNZ2zLWMl7ruAvW/ucpchL0l8vx/tOrdpvwMc6rKTtG5R3Sti5T/rdJD
1NYXyj9I7fWX3ES/nfV82jP+qq0LmbPR13V+nPJfVfmeKv+T2u2h6x2DTqg+
LlT58Xxryn+L8anm59NC9T7TtS9J/9+ifjs28Pd5jer/qXObRta3h0h+OvCc
0V7lrlD9GyS3479T+0cxX6rcNWr/HNX5SnnH6HrTJA9WmaN5l0P/P+cp/0j1
baie/QDlf8V8jr4leUddv43aOSPrd36Xot+PwYHXutso/wOVP0zlr0DfU/oe
nf9Z78P7kvvpGjMjr6VGK/2d2u/J+p61Bjo687nK/6byqIffq/2+auPNrL+p
gazdJG/P3KT67zN26/qHSr4AfVb3f0vkZ3MBtiD1542K1+Osy9ep/Anq/z1q
L0FHK7mP9LWbym+n8veqP8dL3k7y69ifVP9g1T1f51brd6byD1N6a+W/qvwl
yu8eeK01UPIraq9n3u90F/WlovKvKt0W/UjyF8o/XvmJ6k3APpF+H4+pvW6S
z5B8uuRW+u2q/ryq30GSl6rO8cpvI3l8+v21Vrq5ji0kHyu5mdJ36hliIN1X
z+4D3e8anTtBeStU5kTVH5Ku1+7DLiP5G+xPyrucb0LpFnomp+j5vCD5MLXx
kP6PsvKXS96i5PfhBMlHSJ6h9Kk6N1vlh/P+6fwi3eMdPFv9Fx/p+rNY0+U8
p/+u9r5WnRNV7nDGD8Zmya9lPeceztpA507HPqGyH6r+MPX3bJXtrP7uqv5O
1bkBrJ913VWS2yr/MrV3Kf+J0s+ovV0kt1X5tSr7g9rpnvWau4X69Er6vqN7
Hqf6c1ivKb1L6PFzlfpQU1+mS56h/JNV/hSVb6D7+F1yA5U5RPKTqpOXfITy
h0nuwDjN+l7/d3P1fwsdx+peEpXvo/wF6M6sn0vWpdGpr1WdpbpembFS6a0b
+H1eKnlLHc8xRzLHM/crvV5tfa3yzZS3WPJfvJ+63tw6t9FWebsltn+N0L0O
5f/FfqP7f1XnDlf6f4ntTZcp/6R622++yHqOPCmyft1F8osqM6di++P1km9R
/kLl/6GjndJv6Pp3qf4Ale+Utn+Z7vcLbMxZ68eHsAbTue1U/n2Vz+j+Zujc
m5K317EutH3oYb0f07kntf2q5P31rLoyvqqvvXVcp7amqL/DmS/Vp5sD25JP
l7xSdaqsT1gnS75Q8iDJK/Sc31PdrfV7pvrziup8qDYOUn+3xx4s+d6Kx79T
le7EPKz6fZXfXvkfq5+TJAfqfwe19w4GL/X/c7W/ueQnWUcpf63Ktctax95O
6StV/hil5yj9LmsDtdeEtRdrwKrt/8er/ueB7Yd/o29mPKdEavsM5d+v8mdJ
XqV77K36W0nOqMwTKvsBdumsdYgBrPn0Xs5Tew1Y//C+RNZtt1c7z6t/HXR/
VzFuBbYpVFT+EZXdCP2CMUxtNMx6DGPMmKfrjVC6i/JWq/6+klso/wGdm8Zc
hA6q9HLl7638A5TfKmsbyQzl/YkOoLa/CGxvZHxvpvz70PGU/2k6H7L++Sax
PfFolf80sH309XQ+wRbbpYHtQTezVtYxiTE9tm4wgvW57vUmvS9d9f4cqmsM
w36jc8vJw0+AfUXnNlfePWrzRrXdUve/TPltdLyMTRV9N+93qIPqBqpzad5j
yXfomthfVX+uskbp+feQ3FjyLMkXSe6KjaTOa8aHVP913f9G6F+Bx7Czde4Q
5U1Q+h21F5dta8XmOje0ffnirOfkksreqnLPKW8rHS8o/23JW6TX66v0F8wb
Sq/LezxYqzqbqeyjKtuB+TcdL/C9nMx4pfbX11mHPBhbSmL790l6rjvhz8KG
o/JjVf97yR+rf51U92H0Yf0eoHuMWH+hC9fbfnFZzmuq5/SMD9bzGyW5J+vI
eq8/Vubs4/mf6j6s643U9bqp7JfK3135S7P+pnrr2gdKPlfld0W/VfklknfW
dQ9kjFb6B+YY7NKSr9a9vaTjKKUX5z2+/1e1baUNOrXSR6j8eLV3AOtEXe9I
3edtWdv3FqrO1zq/k367BV4zHKnyl6f+t3V6Vncmtn8epnrboR8zH+c9pl9a
9nh8lcruoefVg+9D9c9W/YfQr2PrKxfk7DPCd/RTxb6l9WrjLJW/qup3dyfs
LJJ3Uvkjc/bx4evbNPF8gn8Ff8Cbumb7VJ/7Ku81G2u3prr+C8rfWvXnZv0O
7KLn2V/yhak/7Q58nonHN/Tvcr3n23NyXiOzVu4t+byc/ZO3onNWPJd+pPKn
pfMr30NbHa+qLz2wIaXlH9Y9LFX9A5Ser/z/+N6Uf1F6/YXK30z1R6bvU+OK
n9eqrNeUh0X+vvpm7LPaRs/mUOVfknP5meguyj9c5T9Fp0rfn0E5+yTxTb6r
85fwX+atI6NvM1/sFdq+sqvKH63yV+vclcr7NtV3GmGXUn479feYNP867Ieh
1xLPMwfjW1X52cr/RvmT1N9XQo8djCHvq52eyj8tfR4vqa8nqM7dkk9Cp9X3
mtE9vcK96fwm9V6/L83Zh9y0anvCi7q/21T/PGzhoXXFFczp6uO/uuZLzO34
H1X/f+iPqt9J55qofkvJu0quZ40Yef31gOQt1N5OrP9V5i3l3ap7a6T6jyt/
W+XdiX9K/9fiir+FOXnr07yPi7Ke4/dTe4fjr8R/hg2o6m+Sb7Mlz6mBv88P
eBY6GjH/q59d1NbuaZufSe6ct72yl/rQQfKQnP0x1xdsb79Z19tD8i9K/6Vr
vsB6TXUaqr+T0Ffq7Lu4Q3IPXW8Y9k+1857ku/X7g+SXVb9P6PXSJKX3RLdS
/i4qP1D57bEBqH/LlL+P8ueq/UHK30P5g9P+TFTeh+n8tkb5XyaeP7HHb8fz
KXs9uI3Sa5TeuYHn373yHpMuKNifh3/0YV1/N7X/M+OB8h/RuRP1fmym8n1y
nt8vVfnNuV6qDzeo2D9yZc4+/JXKb8P/mfWafWc9m/aS91N+E8k/RM7vmfOc
zdz9guSTle6o67dr4Pnu8JzXvBPU3grld0+vd3TF40evnHXck9P1xKi8faJL
yp4fu+W9xmWtW9C5e9WfgZLDsv1L/D8/Up81lMr3Tu/vnIrHW+wzGR1XKH8b
9Luc1wun4w8GCMH3qJ//0Bexkan9JtyD+ruDnvfO6JJKH1Vvmzfv0qZqa0n6
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
y/11/MVcpud1qvIvzBrTGejcTmr/gKzxwn8Xnf5bbd6HrqVzZ6v8v9gYwJ4o
f3fld9OxXuldCsYKgbkCX7VbwVgxMGPg7XZVmYFq/5GM8aA5xiClv1L529Xe
xLyxCGB2wSegs6C7fJaz//1Ptdc542uCH35KZb7JGrML/vIrtdE1b5sa67ue
Ojcha0wW+uVLym+DPVXHK0r/wjeX95oZe/WlKv+0yi/RcbnSV6HnKP2cjquV
PkA69zbY93XtXnq+Y3TuyazXtNhvN0lsS52X+odOVv59Wa+BsG/fV7P/+/nU
3z1c+XOyXiNgf30gtv/qlNQeOje2/f301B+9UeK1yKzUP7BJ0brMTWBUsM0m
XnstS+2Ba/melHea8vaSfEVsfN/eJccblBLbW5lvOkjeS+cvV36cs/49MfZ6
p1e6Hiom1tWZC9tLzus9OyRvnyf+oX4qN0Xlb9QxQOkDdVyr9HU6+pQ8jjOe
v5yxPXkzPc+/1d7AguMlmie2Z2HXIn7hCT2nJmq7qY6nlF4SGz87tmS8OXjA
53lfdTRjvtL5N5S/WscdSt+EXpE1ph685YWJ/U/4oZ5G/w7ti9kpa4wQeJjd
sn7H/lCfzkvsP8KPtEjlr1E/9szah4c/OAztu8GHA6YKHxP6R1vJHyrdv2hf
Cz6XNUrvqf5vovQbSj+q9mYWLB+o622pc31i6/LbKv1EvW3s2Nqx8b9ZtP+G
sa+10gvqHf+xqfI+0zObXbCPFH2+g859UrTfCP8RGKdDGTNi6wJldEnV7wSe
HF+O5Ack35S3reOPjDF8Oxc8v4K5zkj+H+MmthHJTyndL/Z8wLzwJPpewe2B
CS/qXCvJe2U9Rv5dMH5qO8Yaye8XjBdGl0UHa1q0/475jHntqXr7CF8N7NP7
DP05NLaANsBfHYmPUff+DHOxyn+t/t8U+JkQD3NWYn8FfouF6I/6Hh5S+5fx
32APSIyHZX7tLfmDgvsGhgG88GOMKVlj6sH/76hyh2c8p4FXfxibTtY2MvDD
16EnZx3TAZ7zTtYhXJ8xmvVVYnwNusYBut7LseNxri85fqVl4vgU5rr9JL+t
d76D7mlbHe8qPafg/3pNxv7Kn/P2JeFTIobhs9j4wUdKxi/Owu8o+X0ds0uO
d2mtdFH1X1H6z7x9ZfjMiHHphb8Y/V7px1R/ScFyP5Vvy3yn8o8GboN4mVUF
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
/wCDJior
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
pZA/X/wpMefFejyb/g8Ra9dYw/4fX2Sb8g==
                    "]], 
                    
                    Polygon3DBox[{{3042, 1594, 2760, 4299, 2930, 2931}, {2937,
                     2936, 4165, 1730, 1731, 4166}, {3027, 1580, 2742, 4294, 
                    2901, 2902}, {2902, 2901, 4249, 2311, 2312, 4250}, {3023, 
                    1578, 1690, 4151, 2895, 2896}, {2931, 2930, 4312, 2816, 
                    2817, 4313}, {3038, 1592, 1720, 4160, 2924, 2925}, {2908, 
                    2907, 4156, 1700, 1701, 4157}}]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1454141#1"]& ]]}, {}, {}, {}, {}}, {{
                  GrayLevel[0], 
                  Line3DBox[CompressedData["
1:eJwl01toz2Ecx/GvOexkJ24Us7a0iP1t3JBDuVAOcyNSIzPSbA5rzsrhRg4X
JGMUyoWNVmraXMgdcuFGMefN4YK01FIOK5TX02rPPu/P5/t9nt/veZ7fv3xz
y+pdoyLihfFzTETiK3QNyORHFPPbiiK6ZNV8GT+fZugCutBYhFfQWlpLVxnr
cQNtpk1JjUP4KD1F91rzvjVP8Jf4B/gi7sTH1B7zl/m7/BN8Ez/CmwoipmRF
5IyNeM4/VZvMd+dFZMv6ZJ+zI0qzRvb0FZfhO+q56i9lrXRQXi7Px69kp9X7
rFUhKxoX8Vr2Tc80/g2e5Pm79VbyPXoL8Fv5Hjqkb7q8EL+TzcDF1ujH39Vm
pjXVSmQDsn24StZrnRL8Xtbv2T/0ZuQT9H2QVeOJ+CPer++3+pxUx59kA+bU
pL17t2f8YGHEl9ERD3GnrMPoxe2J6QXaZrTj4/QkPUIPGwdxI21KZ0zrjbq0
P3dxz3NW4hbcg5ene+d38t18Fd6Ob+N5alPTeY53Xr6hfzKluEVb+S57/ou9
atTYT/r4XGnMxjvwnxzPsgfTo0PfLHmzfJksP72j+TfkjbJ255CXzlvPVj43
fXOyLfiXdZaaQ+K6/ko9DfJh3KaHjY38eeyIo0KwgV9izjmZv7imt042ZJHF
cjau+leqd538rCZxrMVnsKuIA3RYfW7WyO/pP7M7Zsc=
                   "], 
                   VertexColors -> None]}, {
                  Opacity[0.45], 
                  Line3DBox[CompressedData["
1:eJwV0MsuQwEUheFtoK37ZWKGjnRk4k2YEQYkLQYkWtVqEUIojYhETHgID+F+
N8QruAyZ+Qz+rL3XXuuck5OenB+ea4iICQy2RCy0Ruy0RYymIq5o3v5DBzoj
XlGwF9ojFpHHeVfEB23kF3HUrN8RkdXp5U/pvGHXfo0blORG9LJyCXMZg00R
S/JFfCKj846q263OHXLY1Otzr/Dr9mPvq3nOtHmXZpIR++Z7PGBV7pcm6Rou
9Mv6yyjhC2OJiA23Pf06erojZnT63db5B+YTvUf69P8NvJzcuN6WuSq3gkuZ
Cv1Gir+NU96zzgtmkXYb8o2H5jP/uybzBzNeNyw=
                   "], VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwV0LkuhAEUxfGrkVgHBVqFhMbyKmLpqSzhCexUmMEMQ4J4AFHY1wgi0Qre
gIKSRCLW31ec3O+e/z1n5vvquofaBgsioodaSiJmSiNGyiNuKiJuKyPWUxE7
/DXzqyxik5fBZt2NudvFRs27ooh3M82/xNvd7WFzcvX8LXuWn9NxT/vYE9Zf
HNFrZuTW8Q53B9i4zAe92Hf5C/iD3CHWb07zG/BGWrJfJTe8I/xNX5pqqyKu
+cv4Ix1jWT2/nv8o53kD75Q7wSZ0fdJr8t+THJ7RU10YMW82Yc2Ulx3GF92d
yj1jfZTyexf8vNyUuxq5SfObfmg1+bZ4l9yZ3ICeVv62PcdfsZ8n76frH3pz
Qj4=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzrlKA1AUhOFjo2hWLe1cUEwibnFpxM4HsFeTuJBCtBJBEAQhuBBcA3Y+
gPggPoeFtooacQG/FD/nzsydc29fZWdpuy0iSphLRGxlIm6TEdepiMWOiPF0
xCw/zEI2ooljeRY/vBnZY3fEt3OGV0O1PWKNbtg1am7ofOLSzoa8wKugplc2
07wjbOp90dN2Ns28zgcOZSn86RdledkVfU4v+GOOLmEY83SdfyEfoh+8MaXz
y0vyDvDCy7V2yydl763/eHtflsAq3dsTceP/g8513pn+vd663gBvBcso6+3J
u/BGP7szYeercydvF3e8Eb1vO8Zk/bKif57Qp/In71TxD+wnMZ8=
                   "], 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0Mkuw3EUxfFbjWpirHFtZ9gZFl7DyrQS6UpbnsCK1syyhtQQQoh6Aokt
e+Mj8Azq8198c88599xf/+ngYmm6mIqIBUy1mh0RzV0Rz7mIJfoPy5mIo7aI
DbqMdbzYN8yc/BQZN0OyQnvEmLxOn8ir/BveUeNn5N3mGWpuhvlN/QqiM+KH
77G7xIebTxRRlo/rXMiP+Ra3s7ISXTGvku+gt3V2sIWU93rl18nv6Y/o7cl3
0WT3y/fZ3SJrP8qveGPC/ib5PnpNPif/ou9k83S/eY8DvUO8yvbNtDcH5HXk
sxHfblYxafeo8yA/55/8zwXdf3kJMuU=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzjsvw3EYxfHHQtBWXbZOBqPNhMFrMEpcapEYNKE1W63auozus/An0qq6
XyIWq9s7EO/Ax3DynHO+z+/Jr3+2ML7QEhETNNoZUeuK+MhGXPJ1vkEDPRFv
uqNURDkT0cTWzJfuiFa8jY6xSfkKW0xHzNn/pF3+WneCT+E5M6FtbFq+wSpu
dbjxIyf6M/zdu1tsyVzVD9sZoT25LN9hRX7e/hft8+v4vb5qpt3L0LlbO/iM
Nw/YBpbV/8qn+jrebg7KJTdq8oFZkR/tX8hD+Dc1+K3/v/Kv+Cbf61YfNbEV
fV7/5N2yG2N4Ilf1h/KzvmD3D1mbOIE=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzEsrBGAYxfFnRNGMy8wKuZalu9zNjPtla23DQkTD5/AR0ISUUsotaUo+
gY3vQZbu+Vmc3uec/3lP+9rOciEREau0lIzYrY14TEWcVEfcpiO26yLyNRGL
WJl3kP+lS502yugvYE+6aXer7IJW+AG9eSzn35b7h47slvCsbA7b02vhz+nN
3a9Ta2cWS3n7+G86w5spKZvBCt57vmjvxr9NnQmb09iod4P/okP8Tm9Edq03
hSfcTbJTepX16lXZm8QqvT38Jx3jjdSpk8eG/zf4fZtXsnWdIVkO63Z/UBFv
oAo7LzpZrNxdLzugjkxEl96DbAx7dr9TiR/n/wDZRi9k
                   "], 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwN0DsvA2AUxvHTuXeJ21iX1qTqYxhN5nYnGOoymbFWom7R8jWQSkPaaBpW
ugmx8QX8hn/OeZ7nnJM3b6G6sbqeiIg1rCQj7rIRyVxEcSziXv+Akr6Q0qOZ
iTjDKQb5iHH5DP8RKXuLvHo64lDt8HpubprJuTFLd9EyV5ZfuHGOCfkvPSd7
xrv9D+zgiP8lf+J/qmm7Vd6u7Fjt8a/caMhOcKmfVOf5fbTNL5lr8a8xJfuj
i7IBMvIKvefeC52la/SWubw3l3hD3Ni9xVDWVqflC/w3HNhZ5o/c2MePrGL3
Vfat7/uDbfUfEfEzJA==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzTkuBGAYxvFHQSLWoR0ElUQp0zmCRKZQiEIktoY7OIFag0wEJ3AAIhTW
MWbsuxtI6PyKf95ned/vG5xbLa80JSljoi057EreupMz+og+xkhPUpPV25PX
juRcd0vPF5LmzqQFDX6Bv9BN4t3+pVnGmHxUf4cd+SJ/Jd91V/T+D38gv9dv
89e6LbPo303zFyW6Kp/Cht0P3NB9un4M4NH9mnzJezXdA9/qjwq/Ln/iC2aJ
n9Z/0rfmDMbpLzzb2XfTS1ft7dFD3h7Gi+5Uviyvu6nITvhv/NEN2Sz+AZ+K
Nlo=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzl0rg3EcxvHfbEMRs0NO7IxpTMxz3gAR85hMLU55O3Oyspey2m6UWovX
oByLw/k4uLoevr/+912oPxzfpyLijG7GIlqTEV9UyUckuYhfuWZ/4bv68FTE
x3jEMhVs11jfNiuXbX261XfcXmFZOS9fyhV5Ce9RS962j05EXGAjfEvP2N/w
RXr25jnW4Hf4E/XwR3en9i5P6594k35o1X+fYIlc8sYrfbvZdDtjq2LTfEMf
sif4Aq3IR1iK57BDeZ2H3sGLlPn/B/0AS8vztjbN+eaa245397B3eUBtfV//
A331KdU=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzssuQ3EUxeFtZEDqEsUEkWglGLm1dXmJvoGqmvFSpdS1+haHMtEBJiIN
ImJI0kTiM/hl7b3WWft/pkv7xb2eiChiqy8iGYgYGYyYG464Nt9g3rzYH/GM
k1TEKeq4H4qYkS/xX5DWy/FK7ryZH+g2CrxleQeH/Lz9XP8MGf1v+4rs9T+3
13CASe9WaRejehP2snsLtMV7NN/SO6zqvqPmuzX3Lt2+QFb2Y8/JPjAmX7fv
6I6be80V8wbNyz9xpddEm9egs24U+F9IdDb5dd4xpvzLEf3Fkzu7+AO3AjEH

                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzrkuhHEUxuFXTWylKGhJJpFQimj0XIISM1MoROF+SBCFbS6ChIgxYh37
GrtEFB7FL+dd/ud8X/d4eazUkGQUE43JTkty25oc0bv0HgrtSVX20pSsNSfH
ulVzvy3p0ffiVTfJn+iKuPP+1CxjSD6of8O8fIo/k6+7UbD7w2/K3/XL/Llu
yezy3UXzXleXTaNGP+CCrupqOMSH3QV50a1L3YbbffJfviL/1HeYw/yM/pG+
MmcxQj/hy5uKvU764P+f6H43BvCt25aX5Nd2VmRb/DOCG9kc/gBp5jxL
                   
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzj1LwnEUxfHbVmlpbtHUVpAUNhQlaqa0R6+gqSfsgYrI3lFDL8SGQCyh
KSIiIlwTw/z8h8M953zvj9+d3z/dbYxFxB7dpSIeMhFDWs9FPGYj/vmm/tXc
kbMzEb10RJVWdbfYi67Ab+l+6Eiu273BMvwcf81X+Ar+TQO+pl/x7gpbNrfl
af0XXqau7hJ7Nqf0XfxCbplpeaC/pz9ac+851uFL3n5S307Vbl53hi0lN8op
/QdepBLfwCbNWewkudOckN/xTVr07lc+xhb4Dd0b5f1ZttvWHSR38uP2nuRD
eQTIZi2f
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzrkuBGAUxfEzEROZsY3eMk9ARW822nkEBR1vYH8OlUqHzk7hDRTENjSI
ZFoRwq/4595zz73n+6oLK+3lQpI2VsvJ/VDyidHhZHIkedA/4rqYfPUnx4PJ
CY5wW0mmeTXzb4y5mTVbk9PVv6nrqJvV+b/YMq/RnYHkhy7J2aUb+j+c0ec4
xZ35orqEcXdX9Ia8Kf968m4X7/Sz2kHTfUHunt2G3Ut3F5jh/dItfg9/gt+k
N91W9RX9lr6lztkp2nnBK3bMetWynHlen/6mlBzKPEDVX/bVgpwPGdv4By5J
MfM=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzbsuRGEUhuE1oZsZe88IgorLUEgmoVCIxA1IXIDzIEyJXsK4A8FMS4FC
nHXUWp3TjGPJU3xZ63vff+3dNzk9PpWJiAnZyEaUk4hF2ctHbBcinrGsPd8W
satvphE5/UJ/4c7NY+yPG3CX52bsr9ySvizFYsSZN/vck7xxiTnr3WguIrXX
+Dn9nbv0zUF3GXcneIG/xhrclfnoXTt2IGt8VW9yFb3EH+lVvKZ/4B1mgqfS
aa9z8958cjdYyb9a/OsU7+L7zRF+BV+VitTxdXwH/3LXrY/pDemx3/nOAvfN
3dqH3AxLL/fgTZn74Q6xe70prfKLbck/9aI5BA==
                   "], VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwVzs0uQ2EUheHtkIiqg9ODGroFIw2iYVJaVR0aGpnoITFxAeL//xrcQe/D
DRiZE4YiaTwGO2uv9a795VvYL7q9oYjYM8/jEf3JiGQqopZFvNJh8yR/l3fs
89MRYxMR3XLEhuwRe5Ot23dlo1jBt3UfsGNa5avyez73bkdvhE/s23jd7R22
Rlv8nH6C7+ilacQt9o3lsi+66O5I70Ze0Fn9A70MP8Ur+DW2am97I+Qha+qu
yK6wZbrFz7gd6LRMw36Jpfq5vYdf8Ju0wv/qNE3N7YA/x5b+35H9mBdZQ7fs
L2fYJ3bIZ/IPe8m7J/QPedMnWQ==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0LkuBFAYxfFPIpZYZ2qEGWIJIR4BsTd2lcID0FmKGR1PQOIhREQYXsG+
d6hso6NR+k3xzz3nO+d+N7lNi8uTS0URsYDtiohMTURdVcQeNmsjVhIRb3Q9
EtURE2Y/aODP+Quc4Vlv0N2pyohGWVpn1CxD98n3S0G/4wMprMqn9dOF9/TH
+CvdSwzZlS+JaJHd8Le4xotOVtZqfoAt99bMPuks+nVyfBt9iC/k0Y6kbMZ7
HfRuecQ9f4dh+4qTEbOyLlmzneN2bNAD8k7nEdbLIr6d3QUtn9PvoR91nvBq
9uAcsW9e1lv4B3tP+FPkkOKPnb/48987+AewkDa0
                   "], VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwVzjkvhHEUxeFrSUTsItQKvgGxJMRSiJhJiMIkqikVfADroECpMZZaVOiY
Eb6GfYuWisbuUZzcc87v3v/7NqanRiYLIiJN2bKIhaqIDB1VRKxUR2zWRLzr
W+S6yog9eV3fKl/IH9i5+aAfcpegNmxa/vx/jx/Ac/KGu2P5mb6wdnNGP14e
0cHv47PyN3bpZthbJbURp/pO/Fr3g12Zj/aW8GXKYat2tnS/eEYetJOXs/q8
/ELhO11mPdZA3fwBPmevALvRjXqv1DfP9D14k5nEF/kEnqQTfk2/rS901yun
5Ffq4+/sNPNP+C0/5s0U9WOH+nl9kbt7bEd+owm+WLfr//8AGMA62A==
                   
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzUsrxGEUx/FjQcqdZuM2pmSjlCgbygYxbv3HzDDCsLOh3BY2yguwdRn3
S3aSJK/Ha2Dvszidc77f33OezNZuslMVEWX1Uhex3Rjx2xQx1BpRaY74Mz/j
Rb1k72nhGiI26yMK2BP3g+XNZWyQO7Yvyz5ys+4dmdPYFzeustgDd4ZteDOA
1fqvKJdz555L9IK9W6afX5dLeXfHTetj2Ke64A/lbvEDvcv+gY+qUzdS7t5w
i+Y1N/rwGiwvu4Bdc/P6kr3T215+VW7OXOGm/DWCvatvbF9uErvicuYOLMOV
vMm6U+32JTdjXsHS3KtMItvm3Tk3oe/Z2/E3flidyP8DxpEsHg==
                   "], 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz8kuQwEYhuHfVs0LYeliEEI6EKLaTU214RZQZWEKLkIs2SoREddhqFnM
w9bTxZv+33TOaVdhPjNXFxFF7CUiys0R3Y0RFay1RCy0Rry6e9DRFLFPFxoi
eukr+hqXqPKzthOyftm5bZK3zSvRSZ0jus99gje8YwCL/BW9SdtB+sA2xava
3GBcVt8WMSVPyT/wiWVs6aV0ku5TrNsu8b7cZaRlFTrjPsM3fjCETtm0Zw67
D+3Sene8W+S8M+GdM/JR+Q69i07eCp3RGan9T2zYlmx/3WNY1WvXK9pm6Qfd
x9pzde795uWzsrxs0zbD/6vtat8lP6Zz7gs80y94wj+LfEFF
                   "], 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzUsyQ2EYhOHPWBKXoTCI61ZUqVJFCSEkOSdhIHcT10WYYgPEdQOEQtmJ
dXgMur6/3+4+p5B21zsjEXFAL6MR+9mIH3qfiLgYjyjnIp7xGTfll/CKvJ/R
HYt4kv1iDe8eVpZ98Ynukc0NvuOe84v4t7xB21ifLrGe27Ut4bnJiJpu3e7R
t1O3yi/oFeUdvWn9B1nJrWOf/5Kf6XWxa5uOe8rP4x/ylLawIX9vm/du+9Ya
nvXPim5iN5DV3D1+TndV3tJr6+f1rmSb3gk+pDedE90i1qIm7fKz+Iq8aVu1
ydje+XbF+xBblg10yrpTNreyDfeYL+Cv8irV6A+mTTOD
                   "], 
                   VertexColors -> None]}, {
                  Opacity[0.45], 
                  Line3DBox[CompressedData["
1:eJwV0DsvBFAUReEzkhmvELQ0EoIIJX9BjUZFNBKEnk7lOVo03oYJLR0VNQkN
OoYECUZQeXxTnKy917m5yb31g+PdY4mIGDILyYi5koieVERtcUQvXldFzHN1
ehpXqyP6+Q59ABe5Na5TvymNGOFSOIq32MU/lEU01ERMcDl5Eh+xkeuzf5Zn
uCds4mblF3nY7g2buSXuVV7Gd2wp3Gf/JWe4T2zlduVvecruF9u4Q+5HPsI/
bOem7VPlEadcEs+wGNP8mjdte9Mlt6xf4Tq3w63oG/Idty/fY94fbXIH+hZm
nMvzx/oHbnO73Im+Iyfw3OxxRZjhLgods1xF4V5TabJcDv8BZ0NBmg==
                   
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzrsrxWEcx/Gv4XCOLA5WnMGlTC4ZlNvqshgcyqQUAxaLDAYZLKRcBhn8
AcpodhukXJIyHAzKfcSZ8DK8e/8+z/t56pcZnR6YKoiIcSwnIg5TEUdowAmO
S8HVRRHn/GRfcCuucIk2Lcd36MYDTt27517thT/sV+7DO87sNx7RP/kLWeRx
rn3zpLaWjNix13nW3uQxe4Pn7MLiiCJMuJ/iay3JC1qa83YZz+gVfGOX85Je
yVWY1zJ8q1XzilbDP3YtL+r1XIdfZ1t6o+8mrGotnHPezHtaOyfSER28rXfx
g97JB3oP92JX6+dHre//37VBLvE2y/v6MA/hWfsDZtI8Dw==
                   "], 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz78rxHEcx/G3we/I3UBRdFltbhGdxXADC8stbsBGX0yWE1dOkSSrsEoi
t8noBtmRf+Bic4OMPG5493y+Xp8ffT6ZpfX5pCUiCuakNeK7I+KqK6KBmfaI
Fb6Qiujpjljmo7o/a7d8MO1QZ8Skbk3utWcVp+SkLWIWC85u8Dm+jWPyIi/i
jlzkR5g41+e+46brznDcnqw55yXdNU7IN7gnP2BOnjaP/FD3jDPyC57K75iX
L/gmfsiXvI73uKX75FX+03yn/MRL+CvXeMof77wvja9ymZet9/vvLn/TDVur
8iF/GOFfun15wJ4KHph/1gsvcQ==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0C8shHEcx/HvsTv/N6dQBYWpSAIdUzCCIdhsjKDZCCYI/lzFCSqCZkQb
I7IZEsW/uc0wd4rXhWfv9+/9+T1PeBrHZvqnExEx6dlMRpxXRAykIlpxEB9q
Iy54U1nENT6nI8b1Dj6BN/iiddof+azWjW/aHH/ivbYP/NAWtR6+hDnMaaP2
Al/ThvBTW+d/xe/ZSiojvrQdbULLYqn2rS3Yq/i+NmX70Q54tbZsq8e8dqLN
20+xQStoq/at8ohLbYPvaVd8W8s4N7sXdRF32op377FFS2i79jb+omVsr9ju
fKR3YcqdXy1ryxf/iVamndl7eRIPbZVaivdptziMNVqaH9vrcER7x3/Udj0R

                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0D0vQ2EYxvFbRKhKqEYiqVDBbJF0Mxg6GCREYu8H0Il4ZyDiJTFIfIDu
NSBqQk2KL4BElImR0eLX4Z//c93XObmfcwYLxZn5pogo4Lgl4qct4hd/rRGn
vJ2KKPM4zlGWL7gZFezIlzyBa9wgiTvs6qqcxz3O5Bqn8YQ9+ZEnUbQvw6lk
xKF5F3cig7HuiD6+amfnCvfLA8ii2sjmtzwkDyMnj/CDWda5xs++L5GI2MKL
HUnuwIIu7ZlF3pdfdSX3mXKfJbNlnJiv8ptuhad1a9zjvXUu6Te5rt/gWf07
6hjFJ450HzyHr8a/kr85h4PGbvS68z+xyTXs
                   "], VertexColors -> 
                   None], 
                  
                  Line3DBox[{9, 356, 3198, 24, 2868, 381, 3219, 39, 906, 3722,
                    54, 2883, 916, 3733, 69, 926, 3743, 1301, 84, 2903, 1079, 
                   3869, 99, 1351, 4046, 114, 2932, 1361, 4055, 129, 1370, 
                   4064, 144, 2957, 478, 3349, 159, 495, 3369, 174, 2975, 512,
                    3390, 189, 529, 3411, 204, 2988, 551, 219}, VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwVzD8oxHEch/GP/3cUEQuT2EQZyaSw323UKcltLBgsREwmXcLGsYvFRFYk
GwOZGCQ5BsM5ed3w63l/nufXt3NqLjVbERFZ33ZNxHUyYrw2oh8n8AZ76iLu
ccY9hFl8wLfmiGHtxZ7nxvCdW7Rf7bRWwE9ujUvZ6/iFBW5aL9lbXAa/uZz9
Zy9ou4mIA26fW3bncY/LcyvuxvqIY27O/z/cid3EbWjtWOQuuCX9Eju4X25T
77JvuVWtxN3Z3VxO68XKlognblN/xj6uijvSB+x3bker5j7sQe5MG8EEV+QO
y2/jKJfkrvRUueOp1sAl7TT3iBls5Frtc70NJ7kC/gO6hjxm
                   "], 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzz0oxHEcx/EveThnwMBkwXQlN8nD5mkSLkU6gyKuhCslFkYxKMREYjCp
i83TZJHBZLlVKZP1ioWX4d3n93+//7/+/Vtm8+MrZRGRQ11VxGNNxAPuUF8d
0dYQkU1GJLQb7hoZrmAr9FHttzJik7vgznGGkvebuT69pB9zRxjmDu2n3ql9
aavcLreDbRS1Ri6lf+j5RMQKBrh933zRTzwXtSVuw511rOFeq+Wa3H3Vl7kl
dHOL9kpPak9ajlvg5jGHU62cK9Nv9WkuizQ3Zff0b1vQZriM8xhGsKX91Psf
50t9yA4i5b1+m9ff/7+hTXC9zj3owqz2Zg+0tO1AOyb5Z9vqn/8A3741mw==

                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0DsohXEch/Gfcj1FZJBFUQYyiEXEhBgPUgaRUgbnIJNIuWyiDHIZpISR
xKJcFgalTCajLAYWJRl83uHp+z/P83875z3VY1N92ZyImEBpfsRdUcQtrlFe
EFFbFjGcikhpl9wF0ty5LdDTWo62yB1zRzjEL1fFdeo/eRF73C628aG18J/8
rDsb3DrW8KpVcA36u77KraCLW7JPeo32qmW4BW4ec7jRSrhK/Vmf4abRymXt
qV6s3WsTXKYwYhKL3uNAy+V2fL7SR90fQWPy/nZT/7NnSeMGnPuT/wLLSSuN
+HI+0XttD+rd67az+pvd1wa5Dud2tGFc+/bsi/OW3mwf3GlKvhtD+qOt8xv/
Ab9UN7U=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzz0vQwEUxvHTSuuliaRStxGJkNAO2kGDQRcMhHgJk9liYxJfoDEYRGKQ
MIgm3sbOFpNVfABWUxNbSUT8hif/8/zPube3Y7sH2/upiNiRfDZiS+77Isq9
EXM9ERN4lo8o4bjk7Dflzs3QQMQt1twldkUZlLT9umx4rmJ3ir/6TyZiFdf0
Mt82f3HLuMIdeVfBOz/0T34Rl/hXfNfruKDPy7P5jZvGut7CF72Ks/qMNM1P
XAmn9BG/eW5ucaNY5RLuBBv6Az+Mk3o/f2i+5hJs+rYbyfJp//HYTRem5MJN
wc2VfdH3X+Jfd8S320dzB/fwH96iKBY=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/G3Oj9LOSXLGZhsZ8CCGBRRkjBzi5sQVv4FFoPoZCKrYjKw
ILnikh+pK/JrxWbgccOz1/f1en4/3/p+mjNzY7NlEZFFfUXEGE6rI04wXRPx
loyYkrX2UbzqR9whJuzjSNhH8MLt2XcxaH/WB+RvecQwX9S3uE1027vwxS3Z
B/k1+yra7E+2tPzk+7mcPl8VsV4ZsS1zKHI93D234twympy501OywHfyt/oi
t4CkvQ7nXJorcFn7DMrtN3pCHvOt/LWeKd0Fwv4nD7gWLs9Nlu4BP7jSv+U+
n+Iv9WF9CB94xw7XyPV57sUjLrz3IDe4Bu5M79DbkS99F2n//Q/peTrr
                   
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/E3dX7cyc8BEzKYMcofYL3FdnLKOYrJYDI6SvkxKGUxiM7I
JDddZBDlR4nyY7RhUBIehmevV6/n+/Otu67sTHq6IiJyaKmKWKqJWMQA2qoj
epoiino9V5ALSNv6ZR2/KxPcvG2/1i32EFynbSgZ8Z2IeJHdzRHP8hFv3tSl
Ij64WXcPtnvc4YVrt6X4V/7WdoOrf7ik/ck+7ebSdoFzlLlGWyV/zZ/aTjBo
K8tD/kuecXlbST/GEXa4Ktu7XuKn/K5J9Nk65Aa/Lg+4UVten0ArCtxPY8Sa
XuRzchwNmONW5bZ92LsxPYvq/+9zn96t6Jv8iNxyk5G//r8Mv6z36n956Dua

                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzy1LQwEchfEzROe1uGEac4IvYQgKBtEmLAiKMBCNBg0W8QWrfgODSYMv
yRWDwSJGm8HuBxBs2jSsDH+Gw3nO87/c7Y7vHK4flJK0pVFOvgeTzYGkiy+G
kks57096/DZf0jfcrWxUk2u3fb7gm3YNd7huJTnFVX5Mb7k98Ge4xs3aU/iJ
C77C07KLX7h7vIDn9Jtd4Ge8KHv4nXvFLbykP+yRf4+P/bdlfWR/8Z940m+u
2iv4l6vjH9zk1/SJ3eMrRdLn22f4NnfnXR0pe6buNsENu8+7j9oNeXT/A3G4
JiQ=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzr8rBHAcxvGP/LzrBr8yyMVxZ5Dh6kpSBv+AwXKZ1JXVYWFhwGgRcSlk
sd5wKBNRkuEGi7JbKJMyuMHL8PR8nvfz7embKZXnlpoiokij7RHfHRGLyYis
u0FH7godtEZc6aaxFn6KndFeV8SJ7g6b1aX4PNbfFnGBP8u/nRELul73IL6v
r+pe5GV8gJewnO4Gb3Zf2x6XJ7ojHrBbOe0uYHU55c0TNiV/2H/DkomIe3wG
e5f73Of2M/ZXaJUOsS/dJZ6T1+W1f6cfPC0/6sbkDdqkYyxs9th/1eWxLWyb
71BCN6TLYp/6SWxY3vW/EV7jfxM4LJo=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/G3dM5JcZtNt5wIm82i+w8uGUS5O1cm1+UWFkrMknJ1BhNZ
pXRlVJIyWP2YKOWGO4OilIfh2evX9/P51DdTrORXuyJiDuPJiO/eiJW+iDF+
AgvyUTpikdYTEU36NRgxY8thSS5g3zfH9ms+r5/FvG5ZLuPMdk9/nS3Zysj0
RBz45txW9WZNV6El3YjtSp/gJ/lX527kpDwlP/AD/DTfsr3IaTknv/ND/In7
TrHm3RoOdR3bpa6Jdd0GfnRPdNh+q7/DpryFhq7bnW/8o/4Z27odeRf9tg+a
1bVtnxhNRez9/0N6Qf8AhuoxRA==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzz8vQ2EYhvGnEipnqhNTh4rEIk0MBtFBwmAgkQhJB7auhIHvQNKvwCcg
mloQf6KTxVISgqQSEqWD7ia/Dneu67nf931Ozmhle2UrExFl6WQj9pKIfWnz
qcGIL7wZivjmZXmXR92lboI/8BauyoXuFRu6cbzFc90LX5YnqenG8ASXME0j
dn3v0LyDBzjszWd/RDcXMTsQ8cx/eIknzu7NbfOkucE/eJFnnJ2ZN+2o8rz9
G7yJC9Jyb92c8jWsu3PH5+VaFnU1XdK7z69wTo51p1jS9eE0HunqfKZ3Lm92
j+j/pCAV//Kr78o/eNAzwA==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0L0vQ3EYxfGnQ9Nb0gTRxGKoAQkDNhOJoYMBTYTBooORpP6JLjWzSfgP
xEsaWyUsDQmJ0MHAJpiIDhKfO5x8zzn3+b3dUnWnsp2JiDX6ykU0eiL26JOf
TSI+sNUfUcpHrMtv9Ky71E3zT/ygb6t8U9fBG90EXuO+rsI/0pl8Lo/yp/xS
2skPeCyP4BHODEQUeyPyNMUn2MlGvPdFZPiggnW3uq67Tpr5xSv51UziPjm6
M7OBu+m7+GH71/h7XKQXs1W5yG/iiZk2X6YVuS4X+OX0H+ACDTnr0Fnzuqw8
hxcp6UA/Lv/RGG3J3/of+gdj7zBE
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz7suRFEUBuBfIi6jYBRodSrxAEqilEhojGYiGAmjcusoTCUq8wQk1FR0
KCl4AJdCKSRUJPhOsfJ/a+21c/YZrNanVluSTKqv9uSglPTLT9WnbsrJUGfy
xLvOuop5b/IoS2rA2V2x35P8tSW3/Cu33bvkD97iC37n02Jm94VP+FnWnTf5
gSf4Xu7r3+xd85VaNm+YnfMon8kd/audYz5S8+brZk0ue+Oa9x7yYvEdew1e
4D1ZsTvDmzzL07zB47Lb3RV3a/ox/ZJs9Z8jXDOf0w9zRX53JD/qHzB2L9E=

                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz78rxHEcx/G3ySGcs6DEGfw2uKMog0EYTBaMTBgY2f0F/Bk3YGBwKNFZ
yK8UKTrLTVLKj8XgYXj2fL1efT59v5/0wur0SllEzOOnPGKzMmIL3/JIIuKL
T+oi3uQ5lPBqO7YNyEV5w/naiojPZEQN51CNbCqiqSqiES/OtOlFfkafrRcf
7jzqT3jAsDM99m7c6Wn9nm/RZevEuzuX+hUuMORMh70dZ3qLXuDT/2/a0ii5
k9ePcIBBZ5rtKdRj3Tv6ba3etCZP8b433vCS3sCLvGe7lidxjlnbri0pz8gF
HsO27ZAnbAke5zyPYgdZPTjDy/7nV87xH3diNdg=
                   "], VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwV0DEvQ3EUhvEjtIqFxqA3MTQSCQsDsdl8gY5s/QA16cKAGG0IZhuVdOlG
xCYGpiaWDlSiIiw6NKHh1+HJue/znnvv/958cb1Q6ouINXQGIw6GIw6Rc51g
NaPDfiqiai5wi7iwU8HdWETNvERXnxqKuOUm0hFn7umMRjR1r5jkGnKFb8nv
mM5GTPE17k/3yX1hhnuWb/hvuY1Zu/P8PZfxjh/uF0tcy26d7x+JGMCc3eXe
M7hxOWv/2LlPsMIfyR+6ujOf974HZW5DLqOtezIT7kp3jU15C6dcV99w/cA/
YpvbkXeR9vw3M8+96JrI+S97zpqYVfMfjb05Eg==
                   "], VertexColors -> 
                   None]}, {}, {}}}, VertexColors -> CompressedData["
1:eJzs/XlUzV/0P45TkYqQKZVShjQYCiliJ83IlCipJKkompQpjaSSEA1SCYmS
OUKDZjRrnqTpNtxukiEJ33vedT2P+13ne9+v31q/9f388e2f1nqsvR5n733P
sM8++5ynpMWhrfu4Ro0apSI0ahQ383/1/XNdzrNbYe2WU9+DRLJg6FmB1NRd
ryH6tIPf9IouGPIX26k+vQ72cV3gyhbMgVH/8/cJ9vCXv7mu0Q08ohsKU043
/cWn1NTRbc17YdLYlVbhup1/8YvaQYUIn3ru8kwcr5n+ZjLisft4L/k5k6dP
43XyNGa7xdx5S9WY7a5eWBSUxWz3y+1hPUcvGNYz9vGwniR5Ej8nfUj6s9tL
8g/Jnw5uzy+9SWiHjLmTwXNZCUz98H7b7cxMsKRl+y0+QIfxR4seLVX9AH/2
C/Z+YVD6h7SFaEU1dkFSsLBWSPWHv3hJsnns+UwGSNkqS4nk0f7i/Z8CziC8
oeF000wMF79dHn+NybOHz9X6IpPHYi1fxSJmu9v1i+oVmO1ySVQEoHaTHIb1
nDRlWM+ddcN6kuRJ/Jz0IenPbi/JPyR/8q1tURVf0QmNMRZcL+sqQW5snc9K
2WyQ1RE+qzOaAUFLM04LPfwIEYUBdfOKc/+2m5OxPSvCrQs2d4f1PbnR+BcP
DGnb8WQuAxSLlBojNNr/4gYRZ9ci/OYit9s4vm9FEyAe2qaLex8zecpWb+nX
ZrZrV9CVOZnZbu6kej/UrvWqYT2lLg7rOZF7WE+SPImfkz4k/dntJfmH5M9Y
PsF2x8xuGBJ7kvPFqwHUFzY/LbyQA5/iD5zdE9oLYbIzlwlkt8CypXz5hvfz
/rY7cHW6WqhQF3zTnHmtwr7hL67raDuh5nQPaCgujxDNbP2LJ68787OaiR84
ZWOP43fzuiuvMHkOXrlnWs7kWbcyfDJq96GDfSg/s91ArhZf1O7sMcN6Lps8
rGeO7LCeJHkSPyd9SPqz20vyD8mfqmXK5/M2Mn+XAi+NGdOawdigs938B9Uf
uFYKd/BKtsEaifl9ExkFf3FZ16pXlxI7ISwmXOebSv1ffMzm3sxfHXQwvLLU
MBJa/uIzenyeInxZifFyHO/d8d0O8Xyuzzf6ivEk7quKR+3yGYo7CjLbrS0a
1lMqf1jPE1v/1ZNdnhM/SR+S/iR72f3DyZ8PygYyb7W1wuFwfzXX0+/+4nT3
rISGNe1wJWLaVLfq0r+4ydYwlWCtTlD9OfPL9DF1f/G+8OlZ0U+6wfCk8FWN
JR//4oef3k9AuCVPgiuOK3VwjUE8x+a0GuA8j7XCPFG7Z3ZYh7hi7YqUDuv5
/vy/epLkSfwkfUj6k+wl+Yfkz+d2fMdnPGiHmN/3v+oufv8Xr8yyP/TYhAZB
88IWd6hU/MWDFholBzZ1QNP2iOgVJTV/8Z1bhI+HzOiC0IpbGZ9OUuNU+IPl
IYTHmShfw/HjboKRiGeU7Z9NOM8LaSNj1O5Yn9e9NKxd+sFhPZWH/tWTJE/i
J+lD0p9kL8k/JH9mjBNZevZYB/g+EFm/82r1/4f//wnPvyHbPajRBQcsfGOs
eKl1+c7GnG+mYZ1wfNU1q/wharx8bqm97zu1A2QFrn5zs6r6iy/IEO0+2dAO
jgHnK9KfU7+jtWLxN4Rb8vwawPEx4fPeIh7+78u1jmI8uZ21AmbMdsc0OMXh
7V66OaxnmeW/epLkSfwkfUj6k+wl+Yfkz5I1q24cnEgHGf6BYy9SqHkp5OLh
F8uSu8A5V8JL2ZSKP+emX5X3SqJB0T7R2HCFyr94sOusG45qbZBRMC5DP7Hw
Lz7ZxOcFwv0fpG3chOHrZRT2IJ4Lq7esjcB4Ct5ebUXtevMVjlbB2t2vNqzn
+fH/6kmSJ/GT9CHpT7KX5B+SPyOPuG0UmNUDElqn7gmmU+vsqSpRd/7ybkhe
UKpfbkbJG0aY3HHXoYFjxtWNL4bKoY629Y/OxF5I7lPeNFOoBVS6191cZpkH
3nKKCrpMfGCmfTDCH6wuSEf4X7tSVAcQzwyfg6ovmTwsvDzBJBW1yy16KQlv
19d1WM+dOv/qSZJn5yfpQ9KfZC8n/5D8KfTz3WG1gh746dC7l+9gG9VPuHff
25NNhxwdjbs/2pr/4mddZs0/3twO00XFftTmvYeC43Ulzkw5PjUphzKhJhC+
Pmb36tm5cM/DeIoLExd8NyUf4RaWLz0RzuKp1NU5j3ii3p5ZUZ9HjdPlB8IK
UbsLpyz+gberMzSs5xfnf/UkybPzk/Qh6U+yl5N/SP70OyUR4nKcAdXXzER4
ZlL7TYe35RLRCj2w9a6u4+E+6nd5ubkx1vVEO7xwibz582IZpE20jI052gXJ
YjPmz5CuhW+GedO06rOhssLrK8LVBxz/IFwo4O46hLN4xGq3zXdj8khNvqH4
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
RTl4PwPG1juc3NjRDuN9NW7zHGqHpKnTfi6WK4bOcU8+iVzPhKDsc/UI3xKb
PVmBicfXiAuKXqfyCT909pojHuuwvA+Ih4STeEjtkvRk4dFzo+wbfjOAK2vp
nAzjDlAW2tfto9AGi8sLuRKT8uFOTO7x932v/8pvjopRF0xkwLiE7M9/zlN5
gMyPB4oPBPdCpe2Dy5Lp1PmIWHTEF4mXvWBa49h9X5qq762s+JSO5F9qvDmE
ywdZq81A/M7jL/jh/G/3pgxtKGLArOUBLtUtNCbfhOAjXsy4+YJp7BbuCjh+
7xnDPTcL/NyrHyL9c2+UVdxl6v/MYLQJ0p+Eq8mX3Mm+2Ar7An1/7T+cAzSt
jf6LI15z1Iek/413ga3IXoFtc7Nxe0n+Ifmzo+GJzEamvRG591qQvVJBGxVc
mfb+fjlOZxvT3kk3XmmfYtpL+r041WcyojfFof78SnX24n/GF+N1sfBVBkhz
K285ZkXpE3XcxBPJF9rEl6P+LzaXOy1KnwYVjm33NzWWgtatabMDxbKI8ix8
/S6BZMQ/UXGdEM7Prg+n8x0dhZZNA4LtUCxk8tRJm6o7Um7aPF2kvYu5/6xp
Uu2l9gsCC/Y+Q+8FWb3ecxZ/L4hUX8Gez3QdXz6oz4x/Tr1ewofitHmGzy6j
+OfFstwr3e2d8DFL4JnT7Wqwz/6+TicgG365rnFD8VJx5fwtKF4KF/pSi8dL
L9T1u1DcpWph6YPn09hxEs/s7vEM1G5BieZVZ2a7aQbznVG7JD1Z/Ec3BI9G
/W3lStdteH8z11/6HPVPnqQKE9Q/xR+ufD+FGT/fipiujOLt0q6n41D8nJCv
bz0jkhknmjcOtsWXwfpjKUObtbPAkdse0HhUOXO2eDOzf0ovX56JxmNllJ81
isO5nvikzWHyyL6T2oV4fHOjilC/1VXcfDCB2W/v/mg5gM8zondaTqJ4frpJ
dDWK5znh602S8pD+o2teeeHjq9z7kzyyN6X+biqyl6SPntryEmTXV8UL/DSm
XYeOT1PawrRL/dG9JmRXVOxSl61MuxylV4qicUfyj9pKocvIrsQF2wHNMyUP
xTfgdrH7mYUPui4bFzO5G+4pyA/g93dmhXs/RPvra741b4yw/fWvRv3d6D7O
pMfOXz0weWfhfSZoP2U7aU8Zvp8iycdUfxuH+EvSfN/h+3eSPuaB9lcQf/68
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
BI2uMb0oRO0f6990fx3o74bLt5Md5IIp/Ul5yFkuQaL7K7pg2ZKT6++9wt67
IMRvV75v1Tg9rwNSftl79IdTfrujc1EL4cc7VM/gOEme1C5Jz+aHxoYzL3WB
iHopjd5P7YsbR+wNZbOXFK+S/Jn9XGaPqxkN9ihG39VWp+b5yILNUjnXaVC+
YRzXOAFqPCqsntj3MqELnkVYpXuv4ey3a6ttN/j0dUK/WULOQ34qziTFn5Vn
Fh9G77fMaPkUib/f0lVt74jw2sK0GzhOkie1S9LT4pjSGaX7nVDl8GdP39p6
jvaS4nCSP4tVhbimju2A+JNFG1NXUv0hbrNK1h6dDpgZtuLWSW5Kf98HinQU
r6q3m13F41WW326y+U18rNbJ6xM64cn5GkjeyTkeniE8PtLPpgOO5DumNOzH
7kXarI9CuPJjtQwcJ8mT2iXp2awu9Hzbuw64cn1h/dfzNRztJe0jSP6szRiM
fZDYAX35vz4pLqXkH5ZLWv5mdIB5i5VO/08Kr55jSFsr2gFFCkauDcc4f+c3
qkgyKU2mAxzTeV+8iMPmW0L8bxjfkXc2oAPK7n2pKCvC6tZ+SL9FeEhYZj2O
k+RJ7ZL0tBBgdBym0cCwdJfhYEMlR3tJ+yCSP1s1WtZt3NYJK6YuDImXo36v
Vzv5x1y93Al3Fl3ptv6Cva8VerSZ5307GJ/cuo0/nPKP9YjfLNn8Jh76q7FO
kwaKvcuXpX+h5nnS/iVMOacfvVuleOnIZ/zdqrtneb4hvP+kxg8cJ8mT2iXp
2fz+zcwgbhpMH+1f8luunKO9pH0cyZ+9+e9aO390gruZyQrxudQ4yqv/fGuF
ahf0Hs0JaqRTuAf/tYY8/zYouBBqam9fzNFvUWY1E3/saYdP4pZJWeplHPdr
VfnXJQKLO+C824BgaiTlt66ZHyURvnlv7jQcJ8mzt8tJT4vIW3oJEu1QseS5
HvexUo723hjZh74c2Ydy8uePDU98T8d0Qc7dgNpLYtQ8X2pep1Xe3AVKOV8U
DNo+gLLNkPaevl6YbeYZ9kylFbwX7Js/9mMeeI/47ceI3x6y+U1iwVO16e5t
YH5t7pZgyWKO+9kZRu7rz/V1QPfuY3KPuKl5VfZu6kaE39fRUcRxkjx7u5z0
bLH0PJ6/qg1kXhecnRhcSLSXtE/n5E/u0sj5c7S7YczxhjQffyo+qW/Noh0+
2w0w7mJXK6MJnqT9yuaTYMDh0il8g1UfIatrlsClD7l//SZI8Fv0p2CHpRGt
8GHIQzM89Q3H/f6OTuP/ea9vw7ohbfy9PtuVEUcRLrDorT6Ok+TZ2+Wkp8XC
3YltO1rh1mwZd2H5fLK9hDwGJ39O3O6bl97TDXdmuwSnn8be77VO9JuwhA7N
92ReSXR/BIeVJ7j6J9FB77Ldj1WbGyHXMJtrbmoO7P5dtVRathd8ku38Vy5v
gaFy50o+J+r3DTu64sb55Z0Qv8DdMrKU8sPdt0duIfzAlA0HcJxdnsQ/N32g
vv8dAxrPZxZPfNEM18POJo6DPKKe8bn90cv2d4OB30S+XSH1zP/27vZmORz9
MLPGztokhLlPzB1vMehF7UfmTPe3+JlCh9820XreBcz2z9/1FlbqAg339e/d
j9QAX5nBwK/kbNjyyaDSor0HDtx0PEU79xF4buw+vSGD+l2q+KYWB+/oBF7B
UZ4XlKn5vMt4WynC8wcKz+A4uzyJf8ZDl1OL/Xog52Re9iuhj3DXytFkfWAu
Uc9qUSlJ48BO0Hfoab72ogqucP9x0jHKJvphbdDsdzk8HZD3IOTKjRfvoSnt
yy5Rzyy4k2uxYyC4A4JpGnPXylSAkNJSOc8iKg9Wp775pNz2VhB83RQbIkrl
qUj1QgmjGEEXzjHgtP21BmNN6lwj1XvLxicBvbCpQ2rW5cdUPdXV+lTR7K29
0Gfw9q78AgonnYOwf++Vhf9v66O4zNxuFxW1ganoF13dtncQl951N16HyuOx
11/5rzqoJcfNlBe4WqX+Kg8K8w07VatfE3mSC6pNjsa2Q0+el/98sRKYVFY7
wzuV4mevE+PkH1K92fSw391mOb1gqfLMOV+NuueSr31N555JL3wwEH5yWI3i
4e6JcC9dw4BVdvUV/j7Yd8dG6uLGcaiLI9XXkfrVc7Vnkj5JHTD7ZfJ+nyMV
oHb8UU1JYxYYKh0/1SjaBbLecs86FWpAvCfM1js+Gy5kek8Kiu6CbY/mgaZ/
LfRkcq9X6qP6s59Q2k/ngVZQch1dv3uAOv9lr/ti4bTHexsPfmBA5qPrP3Mm
UP0ke3xJ4ok4BlhI6J7d7UX1T1JdGft3flk4e54qbkqfeIZKB3yqqhuS1yyH
7HSuq8ZR1Dhir39jyfexyRt7bim3Ze67FC5aNifZV8Liss+8y6dkc7SLvR6P
hauq0DLVHjNAm7twTvR1bDxWp1qZve4Br0+Ox622YHlItno/0u9V0DG5MjKn
C7zObfR721ML7ncMO5THUvMzqW5tUqvLoXlLGbDs5Ozab/upftij2rx6+WAP
VHbm7Q+q51wXx/4dZBbOntfSy7e58vBmFyjEpho8Da2F5nSRgPFfKH+y1++R
5Dmdk5LsYq8nZOEPZBVWl/Mx4MFDz0uFXJS8a3aTfs+6Hsh34pNUF8fyt2z1
igcaK5Z+V6RD4PbMqsV3GmGX6Oqj3cU50Bx80P9pPR36Fzsa+Ck2wcuqwW8x
C6n1i1R3t3Kq36hGpt9ua0c/l8bygf/1vJX0nWj2PBjjRPOEGxN7QCV5U6W4
SxOMzlA8nqZL6clef0iS53SOTLKLvR6Shc8VO/5sv3kPiJgrcQ/tpeSXPOBe
cTyXDpO/R+fO6qbGF3u9pefpJR0T9Rjw45L80MpJzRCm+/HMtu+5MKCct6ao
nwHzwlMt5RjNMDAmegzfdiruItUHWmpEXLhSSwcRIfHQnWLU/P9fz51J+bHE
fVXxvJJtwGco7ijIKIALCrt8Q471gvFVNa69US0gkaF34HA0pSd7nSQnedJ5
OskuUt0mqf5zXAiv7frEVuA5s2iprBwVh7wSv3rr4bg2OOk4K/iBMbVPZL3j
fZHtHW9SXSLpfJyU5yTVT+qPvF/9lO396qfb3j41f9cJuzsHxymHUuOIVM9J
qgv9P62OkVS/R6r3I+XZkkfqDAXZ6gxJ9Y2kOklSfR2pHu9dqs2DhzI0uOe6
8pxbNMWjOPKO+na2d9RJ+Q1S3SCp/tB/5N1yN7Z3y0n1jdmfwzLM6d3Qvm2K
dKIPNa5/9p3fNWcmHZZ4G00+lE/hn87L92Yw19NlId5l2w5heSdCnR6pru/G
qT/HZh5oBcZCYUXzmHwIFts9qVyjF6YVb18rurMF9Dv/vM3ypOaBtpH3TA6M
vGfCKR91c2TczTX8d9wl81s4XDShwyBzj+u7iJr3yhNMUvnLu4Fb9FJSudlH
jvIPDoZzSxbQ4Znh+KS+AQon1U+y23txh6Ce4ptesDr702LhmFbo1g2ZUfWW
0n/ync9xnzTbILN2SnNwIdUfSHWbfxbzilp8ooO7mHPw0y3UfLjbq0ph6R86
fFhx4cqQC/Z9SbMIO/7kLtDrnXLo+W5qf8RelxgR4lcq97QHdtAVtgZt/Ah1
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
HNtz3LdvRD8X3Ycoqv/ubleleaEThPGrSsO7bR+5c6D7/kT1u6lHXkosEH43
XKfdul3dyr2/UJ8d3ccH1ekWli0avkyuFn3tV3JZzykb/X6vt/GNAmc/VLfN
OvvhpO+kBnRokZnPjRLuuVC/Q8Dmnkfv21eg2fEBQTZpnByq07W+5I2Yf1iA
WvuUWhVNJfxAoF8gpO7H2OV9K1HGyuaiVY84OVRvGt7660GHQj6yK1s/v/tJ
Tg7h7a/aVbxuiKtE4z9H+A1Zyckh3PjdpvStPpuq0M5ZuZNOLeLkEP453ume
3CiZahTnI5kno8fJIdzs5zeDOuP8c+r7CWPI/DOEZ1vnYu1c97YKyUsusn96
VnQeEsqbDfBZPHVbFQ91WLtTy2RKOZgPXLpkTIturgCVGZmnjHlRhqQf7uO/
1+Xe05uX6xd2VeSj0NvOjm5PuffC/lupm7EWHxkfl/tZ34H7ndN5IVbuZT5Q
usGHj1w2KY/vmFkB5rsGrBi3+N0qHjLgub8+KVWM5HykV+lWcO+735Tz/Vpv
8NHqwNuLBEO438NKn1MGC9P4SH7H/OzVZv+fvAcjb9auy7PVEKDPtukqEZZV
YD6nYpVGhFlOLcoZNl3u3b5cpGAamHDXnXvvoPhXS2nRIO3VAvTC2P1WciIn
p+N6Vm7a6+FVXp4A2Ts5KS0WqwHzFTfXaHb8aFiNzNd+WSrfkon6TlQePWwI
d//QuCNWrnDqWx/ZWTzk0jzzW4EEjMNh5RnGPXN2J/BQhL3yAJuCMqTY+eqd
sksNaOFYqeEdc8qR/anbkasfcL8T+t4Qtd5m99TFEncr0MiWzXP5RlydCLof
oPVOv5Qbwowr0T3v5KO5C7j+ETf3rr7TO1ShcDn5utJBHI7Rp3PL+A9XqlDN
mllHV/Xm3i+oTgfVp6A6FLT+ua9rAa7Tjc7f24vkM1EOTBOoDKlD341qhjWc
4fL/RUNyK/z216K3zokd797h7AlvWOO2f0c1mlzr4N/qwdVZvGf1NsV1Gd0j
4tZkXeaBa/RhXO8o8XzgStY7oLoPO6d1N3XPPD2zb2VtTS3Sfzf2yYVGrl7T
Ij1zktaiOqTcqaWL0WBiDrWixWfP43XIT2mtab9aTv772Mjsd811aGJED0ML
GS7vmh1ucEp5cj2ymZTilrqNk0v17OFsf6Ye5Sy6qhLehfs9l43Q0oovqEc9
8tcu72gr+ncOredfG5y3RhgH3XP9NGz6Fvj3L2o9/Z2F/EwojwF93xMDKlzk
YmrRkmEdd6qo56L1fhKlHg7c/XOrRc88rFWARsdI9dddyX3f6e+yGWPPSsoe
KC/RReVk36acatT9xvb7VrpvkVJWVXcTy2egf9tePZD90H5NvSPyrFTqkQnP
KdWHn4+0JertNbW570LeMKNPq5cIULDHoa87bnH3Le0/QPZD+Y3I/G6+5Tp1
aJnzStnmU3loRtav392E3wXID2+vHsj+HG00flRmPYr+HBRke7UQBSdENPBO
JyMndfFjB2bwkWlxZ8ctUSVot/px19CNnD/fcaW1V4+LfCRrIJlzWQqOF9j1
dD5kia+X5PsbPOQ/S3OzS10xMsnq3RhP5FvouOC/6qHt5FecrphVw0c+FacK
jHxLUZ5A/9eKpynoyIe1OsErG4T+2DIPGbty9MBU47jkEc5+Vc+9fV584SG3
fl73cjaWo5Y5v/el9G1AdZ4yxW6K5WhXllqJ/ZZUUM7qof0lVj6tUK5SPpuH
kqbnSy7sUS7SP6H9HFautC0lSnwzH+0ZqlD6QPidRMobT43yqEffm3Qqe5YU
oJVXltZabU0W6W/Qfguk599zFt/j2vKJjyZKLYoZllWJuoyw+PhAvBZ5jPk5
YtnKbGTsUrjsQ7ckkX4FFB9B+QooDoLW0/4PZCe7HvKvqk5OWFzpKUA8gaf/
CfVqlDXKeqHegSqkmGaXOfjkG7TOYEvs/MhEkXbSeQxReujnsvIG15KWWCcB
2nknstqxGyf3TJr4tjqiAT1s8J6m8IOL1yAcKcR/SOexIZ5D6Ltj7jDwvJht
JQpJHvokqfI56pj1WumafCIoh/C37bVT1DlA50bjmW/wDqd+Ca9G/KXWq0pj
spCyuWnWwIXPQDweqydwb8YDsS98VB0kbXfvHRcvQDwwUL69vesXMHMEZKk5
ArQ9ovLedJ783/eix8mXBdcrkdqbq+IbBnDxL8RPAvGPGaYLJDfdrkMJK58M
DtPn8AzpL85WTLxfhw5IveowZZ1oOVSXT7jNS5QN5aNjG78MNPvJyWm+ph7B
JsXnV/BQvv/g4CkdilH0gssH3Mq4uvkcqm4uKv8ZJzWw6zobAaq1nnRarqUK
lLdXvzIzxyGDmeMQz8xxgOxnnwvV0QZGdaxXrRGgAzMfH1IfWoNmfvQ2TRXa
k7Xn1449Qns+J0/etaYA7jvQipk15/q8WhTvMHVmmFQOutZ9UHOdhvAcmPq1
DVW/huqhrD1jymo/FMgL7yXHYt/7R2pEyqH6Zjrfc5e1awPi7Rvcp+VUrUh7
6DzwQmY+xRdmPsU2Zj7FSWa9K2U/dG5QvXjn+mkm+7MrUMGYjSrns1LQoC43
/f3jufvtp/PELmE96tGdCapf3aZwcUqwvqvnnOl8tPDscsWWbtzveU/540DM
7/FLsbMCye8B8XjoJVs7XR7BR/J9rKP9s8tF6oGeC/GN3P/1ejTG1300jggm
8XXQviD5uOWfPIKv1yHJuNyzw4h+7aXTbT7bV/NQ53vBOm+ncfY7nHH5h9/j
8PXx40keD4ivY8/hcSHH3vBQzuQxWww7iNYDPRfiFfl87Lohxv8bzBz9iOS/
hfYFyU3V7nc4rVuHIvoazdWV4uLc0NrRj7vb8pDXjbWJLnO5OHELE1/3ouJr
iE9jbdqcZdPG8JB+y4AFb8tL/4+enpQe6LkQH8hkpUPuGG9/c3jke5IvF9oX
JPeTct53srgW6W/Pa9r0jssPLDW7J+vqU49qG+QPeDVzvx/TLj/6YX6M0CRP
S5IfA+K7KPQdfGD13Ho0Wkbj4Hvv/6snhNIDPRfi63C6ZX4T50Oku6o1kfkQ
aF+sfD4lT6rQ/HFiVy0SvDIK8Qrlvqfi+cisUfj7CTT3PaiMuN+PYXyMLuav
GLn0tgfJXwHxUawzao3esbEOKcwLOHRrIyeHeHQh/ZA9EM/GfTTrA85fWTbe
kiXzV9B+ITmEr4bw2BBfBJQfg/JvkFyFwQ9rUPjhzekrpDLratAQu03eixo4
ue7YqecwP8Msq05PSH4GiG9hXV10r9tna1DAlcY9D38T81gZPTMoPdBzIb6I
yabf/5k/PvRx9FwS7w3tC5IbMeefQ51/f91ik1nSNai26U3XjXO5v7t2xbc0
zJ+Q/nlcHsmfAPEhFEUd13v1oBoty1H8ErsoW6Qe6LkQn4NTY/ZanP90DZtk
TuY/oX1BcqjOAs3jgPDnEF4d4kmA8rSxqq1Wri7VaKB//pdRp7jv+L7JLeLK
86uQY+tF2WNfOH9+9LJdgzEPQFl3zx4kDwDU1180e26EZGMlypjsUp9cy8UL
S6a1ZuC5RWVvYk+Rc4sg/ZA9EF/BZznfezh/PsN6yjkyfw7tF5ILJJ9U7+lV
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
TOOgRH1Po3a34bd7bW7Db0N+C3Sfs3povBD0XYPed1H3kpZHG555fnwbnhm6
b9n19HdBfvzajhOsq5H6t/cOnUdlIZ2l37otU32GzO4/kNsi1BPk6LK1u1DP
jNgFE0k99V5t73teftv7zspfHGizRzuuzZ5AGYXT44X6R94+sL6TUP+YA3lv
lwr1d4s/EIXtvLpm2C5sZ9yU+WJYf3vXt9ee/7rf665tf8ewsLa/o4d980v8
dxwtmeyH/45LGh+q4r8jJIf0RGnLK50Xrv/VMNimr3D9VJVgY3K9D4PD70Th
8K2Z36flprbfZ+vQjZUYVx8ZtSkS4+rLL480wrh6x+ysX/h33meceDn+nTut
DfLEv9v2rm+vPWLPbMZi/P8G6xRLjP+f7Md3xfqXzE+dht8j8+Z76vg90vg5
4wqpfwHznr6c2/ae1h/S6YvjvlyPt1txHCSl0CUKx0GQHNIT+mbIAry+950u
d/D6cZa+r8j1HR+/uYnvsTBrwTB8j0W/abv3Zjxvu/eaqXsvUXFqLF6fpJGq
S957tFyUHvnOV71wn+bhqqVzyT7NIUvd1+H73H7DvS34Pn8S0taP2VDT1o9Z
x/SNpti2fRdMUdt3oYT6LtgFy57C+gX6zltJ/QP7l9tj/X03q5wm6xR/u/6/
2jMheM1kjM83Kujrg/H5mdptdcPsk211w2zxP+uGaace6OP1M/fnJJL9BbRc
lJ5Z1RNlPx4VIJ1Ve27O0eP8jaXqslX4+z46qzgDf9/zu7b1I8/ltfUjv5rR
1o9c8aHNT7D3bPMTnu36009w7OWjgvVbBR3kkfoH+5t2xH5IwB3N3mTd9m/X
/1d7/na/ZTuX78a4glVdDFa7OeWhjBhXVxKfANWvAy79llQd24ACVGPFh6Rz
+6LxpWoen20xPqF+Y+tnjE8otozXx/gEqF7/4kPZ+75Cew5c0r+2X2hPQdrD
4aQ9ZwueDMD2NK54cY2057bJjAHYnmMpH9RJezZqpfzE9jyP0LzoLLRn2rro
GRuF9sysrpGsEdozvOhHPImXoO/nf3+3TP03jqn/ejH3vBpzzy+l7nmonuj7
xdJarYSPMhLSB7wP5uQQvtS8dgXCuBozMYNeQQSuZsHVczuxnv49lLVJPbe/
pl/A6y1+Re04Q6zPYOpo2VQdDcJPRs7PacG4qYBv50xI3JSEU/7ob0L5dd3R
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
uk73/wAqqBfu
                "], VertexNormals -> CompressedData["
1:eJyEfXk0Vt8XN5mlRJEhShqkASklek6hQbPmklKoZGqOEiEhKUI0mCkqotGQ
5xgyJRUh8zyTItJA3rOv2+/13u961ts/1tprr8/53H332dM590nhkM1WszFc
XFya4lxcPOSvxsfZSvJGj9l3GnDWzJAuPPK3Cs0P/iN027gFV554/dasrB4v
rjGrA3ldhdP5462duHHaH618uzzk3v78N8inGClFrSgtw0sXOwW557Wjx/lN
xSAPn89+p1tahoTjBKrdiFw9Pq0A5E/lNCsJDnofoB39huAoKmj8BPmcNuGB
AOMWlHlBddoRsq5S5YM2kJd/AV7a7JG/XXjkbxV601nzk+jjl5vz5UF/5vCx
FpCv2hRaATx/GAzEAP41t9kUzzyn6ATCB+fK8jYAn/pj+p8onnW5BYQ/2uzD
fwv4P3we8A7kVknz7YFnnb3iEnje1Wp6/SAPmJ85FEh4xv0QLQb7+M02/Erh
D90pX3U5hoWbRniO/K1CN6/yubpsimYHNI/IR/5WId8yWRXXG014jdGbx1IK
jVj48vtpu+Jq0Fcj2zrprA6s+9J0pbPLO7Su6uGaU7x1SCt0/AGV5BIcruAi
7GzQgYbmJe8X06hG5fxfWQuTS1DFtnhzJyJ/t/SnA8jDv33aLpPVgcwuqv4+
T3B2ljpuB5x8GTGRyzea0Otn6Kc0WddSTLd3J1mXk511/Q3GE33sfCf7B+hn
opavoC/uoQT42GJmxR/Aj+i13gH471y/zSJ8cIyPnRXwSRye6wJ8ig6JuBD+
6OqqEl7gb+tiuRvkyYmeDeR50Zx5y7XheZcGZ+kBjpHfzOnEPsjvD+sF2Odp
55EFYJ9PERWVfxuiWLNbR3iO/K1C7ywfqfDpR7Kl20bkI3+r0IOWb7cWbG/A
d6UEXCLONuF7XHpfJpjXIfFM2w+9Su242klj1qZJHxFvtNf8oAkNyHPu1qQh
6yIcLPa5dn9+B5L0/rxkWyrh6aepw2VThGRnTd0HcmPPbZdAPjns4t7vSu1I
eb7ztHUE59yDCQaA82CPv/X87Q1o2/nLKZFk3U7f209hXU52fqb+w4bo47cK
b5JBX2L7cALoG6S47SH4eODeJQXA73NesBXwdzTbzCV8MB9L/gDw0e677wJ8
ZJ9dqiT80Ubr3ZUgv36qYiHIw6R+FpLnRUt+hirC8562uq8MOH0OjR7EPqj6
+oyrYJ/uZz97Yd2BqVu97y4NZ2m0j/Ac+VuFeGZ6XDu2LJSt3DEiH/lbhbQ2
9MocW1aLHw/9PX30bTNe+aps/VW7ejS3PtW95VMLjqzP3GalXYRemAbs6bBv
QgLqU+MTewqw+OkHN2Yt6kRvMr+uClGrQVYdjztf9xSgjatPKYH84e2lsSC/
8n7a3NZPLWiaiVvNUYJz9MvdcMCZM2Ff7ZFltehonuFNc7KuKtrf6kHW5WRn
/fnxDUQf7xoM8wH9X6y8FtCPPmWlTPBxQIVsLeCfTtaJAHyucX7ZhA9ekXdY
Gfgs4DV5Anz0HN+0Ev5ISDX5GshdZ8TrgDxp7hNP8rzovcF2A3heu+KKnYBz
UusuN7EP8j/veh7ss0NkzRawT6O74syYBUGsWtqetbQ9i29A3Ahk53WOyEf+
kniV1bHxPbsMn1Fel1rA14qteLg/nzvbgOIrY1fJWjTiTTYThLriilGybqxK
tnYrOhebceFgSjb22SI3KOLRiS592RNdcaMG/Tk2Odc0JRtNMb3wGOTqxjuU
K4l8zSThAYKDSlJPzm4lOHO43RMA51atjsE7dhlSOqOW8p6sG5v7SQ/WHbHr
vP/YOf/jlD1EH+dntCWBvqfqO13Qf2jK+wN4hi2SUAL8ce6sp4Cv0yT3gPDB
6aa5scBn4p/sucDnmv/vSMIfDYte/A3ypV2e94E/lihfCzzt8qUE4Hk9rM/N
BxzXcVuXEPug3fMG08A+Cx8MlMO6MQ8gbviz5nWN8Bz5W4X8ZoE/e7O7aXk3
Ld81VGlosKwQW+7tO/NVuA2f1o9eVL+mEfXG6NplCVRjjZbH8a2qn9EkrWI/
wfEdSEXGmE/Uj403iiqeDcvpREU9WwW3lNSgRx9L3Cf6sZFj+IYlIP9bNycC
5C/lXmRnC1Sjp+Xc1g0EZ6PWPRMhgmN+/U/l5mWFiDdspsE3su7B3ZPs6si6
nOzsWbKkhujjRO3WLaAfuLnBFvTHL9fLIvhYSnUThc8z3EPhV6RsP0j4YJ+g
QorPD7tUio99YtgKwh99uGV4BuRu184IgHzi9y2O5HnRwBrLJ/C8enyWvvC8
Jvqf1xH7oE07P5wD+9SpzdQA+yh7gj97sWRonjI0z1+UnS+xQ2h5CC3/5lyM
Vr9Kx+47hA9vTWrD88WRdPKnRlT5SH+tpc8HbJ9cW16/pBy525t9l9rRhcK1
+96uYcfhqKFN3ENfOtHiqSmtDcM1aPHsw8Yb2HHonXpOwSCRezxfeaORyAXS
hPutfD6gfQt27awiONu9wkVlCI7npaogvVfpiMtyrdI2su5i2QOspE//7Dzl
P3be8nFdKNHHhWeWUPoiTgaU/kdr1e8EH59JtKHwF01lU/grrq1YSvhggaE2
is+ZRUcoPlUR8wTWEp6fN0+h+B+odab4OxWIbSHPiyJjbKnndU7o6YXnjWzd
Op/YB+me9aTsExlyn7JPCmXni6wYmmcMzZNr5N8lAzpu/B34f+UFfGf2F/9o
w1wTeszG8TX9Ty57+HjMA74KtM15cdYa7S//k09baP6w/Xcn2heiu1xrfO3/
5MdKw86D/FTHqfbRchV/4wnhBKf/tBSv/iicW9cGJEvIujsCqxxFRq3LtPP/
T58TPic+nPhzel5O9mHak/ZnFgd/Rkx/Ppd0BvwZ1elMo97vEn6v0f6MmP58
T/3WAfAf3zVj3oP/rOY7fn2UP2MO/ow5+DOLgz8jDv6MmP4cHXh8Ceyvggkz
KD4LXf2vj/JnzPTnKZXLwZ8x/8KkMnheVS3p76P8GXPwZzbTn+n4zOIQnxEz
PquruEN8RrcydKh4dThZzH9UfEYc4jPmEJ8xh/iMOcTn/9iZjs+IQ3xGHOIz
4hCfMTM+b7P1h/iMd84YEwfP6385ZnR8xhziM5sZn+l6g8WsNyRt1TdDPuWZ
N/815FNenR+j6w3ErDeisgPOQ752Z92j6o1vYrlUvv5loJMH+V3m7OAjkOdr
tVL5fVtIM1UPmL7AVD3w1HgfVW/0+nhuhfqh/OykZKgfkEDeqlH1xn/sPMfF
bC/UJ/Zv8hNBX84mnapPXn2t7QeeC+cdmgP4Aa3iVL3Byl8bDfUPPqtP1RuP
SnfPBz5JcR8ioF76MfSHqjeiJ/yOHFVvYGa9MYDvLIV6rHl+LQb75DV3VYyq
N9jMeoOun1kc6mfErJ+7nbk8oJ7kdTSn6snJCz+Nrp8Rh/oZM+vnj/NqqPq2
Iau+DurbidOMR9fPmEP9/B870/UzYtbP3wuVAR/tXn62HvCnfuEfXT8jDvUz
ZtbPFwp6oH7GKl9/bYLnrQyT3DWqfsYc6mc2s36m+0EWh34QMfvB65UJ0A+i
A51SM6A/irv/kuoHjRfKpUA/JR2WXAP91Itpr5eN6gcxsx90S3oJ/SAOuGUq
D/2a1H3N0f0g5tAP/sfOdD+ImP1g+qc06AeRCb/JVMD3d9o1uh9EzH6wJ2l9
NfSzOUNaFSBX5sWLQS6vplYE/W/yQRcFeN6plh9G94OYQz/IZvaD9HyDxWG+
gZjzDeVp0TDfQJNsby2Hfv+xTQ4135gdzmsE84GmwISxMB/YcmjQEOYDnoLN
2jBPWJ5fcwzmCXOtl9mD/NSCSGr+kJDydwjmD4M6JqPnG5jDfOM/dqbnG4g5
32jM/rkN5ieJJtHDgK9/YCs133B0a5kB85axQtHWwEdisfUl4JNqOsYJ5jPv
X/PwA/8PiXE7QN5/PgXmG3jwi/VSeN7bag2j5xuYw3yDzZxv0PM6Fod5HeIw
r0Mc5nWIw7wOM+d1DsZiMK/DCYseP4J52pb940bP6zCHed1/7EzP6xBzXifm
YwvzOlTRfTgW8BPf/P01al6HOMzrMId5HeYwr8Mc5nVs5rxOMOXx1MuHOrFX
y1H/111vscek9bY9qAYZu+1WVb7cjB9ICmS5nG9Af+fI358VUY32t6DNcy83
I6O7P2ycidyg0vsVyJWqTr9wOdSJQnKvOmQSnBhRHRvAaZzP95LIcb4r/0WQ
P6nwsgK51Y+OtQQHb1x36jTglKpnsgEn46TZMrIuGshpTYV1W94n3AH5gY83
5QhP9F5kwl3geaAn0gFw4mf1efoLdeCrzcsK5qx8j4/ZTcoq/Ev87fqcwbWX
GnHozZJC7vxGdFrUK+EzuxapyYvPXHepEZ0XeO/FReQLSmS5yoh82SVDEYKD
Hni7nFQjOOnj8uMAJ5C7CeT4d9GGEyBXdpxCyUUfHpYnOPhJTYEP4KzsdeUH
HE/5sfz6BP9eVls+rGu5USQa1p1x/6gH4M/8xfcJeJrf2pELOIo9gdrXZdpw
hLb+rEi5QvyxzN+HvawRGfKMD5kgVI/D1FR3/lRoRp6NFqmne+tQku70bDGh
ehR+zHPOAJHvtn029gyRj7P6HeUl04bOhzofiCY4e2vyjAAnRt/oPpHjlzdm
UXJZm0OUvDpybBrBwX8k3OcBDne81HjAGV53KpqsixbM8jOAdVV9kpJg3ZvD
UZqEJ0peIzgHeMq+fOQHOJdahWwfrm3GvKs/HLWz/oQTlwYV5RU3o/1nfwyW
yFfhrAmOqxotW9DMG6z84j/16HPbVYUy+Sp0td5iSQORN3XeXFVC5GFZIu9i
1jajp9u6JzoQnIgxe48DjotNEMjxC09XSq6yrskG5BtfaEoSHGwa6acJOMHq
m9YAzqDal/GlBL/joZgOrPv9m0MurLutK+o04Yku9OtaAM8QzwMlgLPAbufu
ffPr8aUTdcvd+krwGe0qldCHbehF5qO6StkSvLTbQ3aJTyvK9LhqpdPSgE5q
n4+uli1BGqxpKhpEjvnFJXSJXCyA+4Hh/HpUghdtu0Zw1v7K9gghOEtXFoEc
L8rP3Qryz082UnIjOaVggoOPbXZXBZzZOQslAeemR95Xsi7af+O8NKybFtxo
Aevmfc3ZTniig66vEPCUu/hFDXg6DdZO4ftUilfOKkoP2FyGY9aXzFLe0omO
KvstbNB5i2ePCfpeb92Gjn6+U8IX2Igy7JN9m3Teol+TL84C+bclRuH8RL5r
Z+kgz6dSlNa7YE4QwbE7skBlDsHRHTQZInJ884cUJV/9XIKS79o72ZXg4Evr
JGcDTpZ4GYUjXbRtNVkX7d7yvhfklRL9xbBuSOi6yYQnChp+kgE8g66+nw08
fTWO1ygppWF3r6PdOz+W4yyt9I+WXF/QbN+FPOplCfjXprs/9Vvb0G4u0Qy/
n40oc01t/KKyBKR9PmQ5yIOuaEb5E7nOjLKB2UppyGSesvM+giMoM+muBeCs
n/uLyPHxwwqU/DVLmJIfHsMbTXDwki9xFI5uxyoK53jbLjGyLuIOd6bWddf4
kw7rruLpKic80byzVyiefSUNFE+aP+LAH3Hgj5n81fsagT+eKJznBDz5Ns2h
eErJLgH+aJpeGiVPOjl1NH/EgT/mwB8z+acdygD/QbrTvKj3ElibQPnPiqQP
avAeZ7Kn9sF7FF8tONp/MNN/fF8ngv/g2K52yk9M/whTfuJ4aDX4D3L89omS
q60lDvZ//Qcx/afH+MYq8NudIgaU3165fIjynzr++eA/OPTXsUzgeV3+EeU/
9P5FzP1b/YhVD/tI+/qwDOyjcLHx1qP2L2buX7cvM6l92uNWZgD7NHr2H2qf
xgf8oPa1ga8lJV9S4zR6/yLm/n19Yt83iBsmKt+kYN3QWUcsR+1fzNy/dPxE
HOIn4hA/MYf4iTnET8QhfiIO8RNziJ+YGT/p/IWY+UvZcHMw5JHGwYO7II+Y
LI17PSp/YWb+un3yNeQvHNmfehDy1DHLQCpPLd48FfIXqm06SMnnDqmOzl+I
mb/ehz9/AHnzeE/WVlhXsOVP4qj8hZn5i64fEIf6AXGoHzCzfjjy7gZVJ9SE
XrKGOuGu6heqTsjeKDUO8FUb9a1AzhfOGl0/IA71A+ZQP2Bm/UDXb4hZv+3O
zFWDOqrt2/UMqKPUDklHj6rfMLN+07QMhfoNLwz5ch7qtOMLTlL1249UVajf
kPE+czuQ2/5KHV2/IWb9lhRXogV1o2a4TQqsKyUQe29U/YaZ9RvvhMairZs+
Y9sNuR8mi3bgiNdVnoZdVUiieUkl8Hz8KSTX6XwDdsg4ngE4XrG3Sj/ueMie
Tdexs+k69lxTtfAJUg/vOWdhkm6Xh4sSQqi6XTNV4Tr0TfY9WUbnXN5h/y5f
Q+hHpLo3WUI9r965poDU5yisvrQD9FnPAf8Oy3pkLoSs6bmQ15PeCy6kf5Fz
Ew+SUWhE3E8vl0PfdPnJgQru7fdYIrS+CK0v+zVsg8Gmz8jQNlRJSrQD6Ucr
XoHnsvDuc4bzdBe926cOk3WjHD3qQT9t6toQ6MvyjA8bkL4M6XxOF4D+6JSA
wkPoF860LO/LIc8VPlTxB/RnuxzP3Uzw283lnQg+rrfmvwT4kV2SMtDHbXVx
DnIgz/s6W2QzPK9A7itVHdJfLJEIRaSPwKeVf34AnD/4TzHBwQ/O/3IAHNM5
URcBp/Dydx2ij5fl62mDvoEVi+o7vhay0uD9vht7Wpq8X7x45ox4qv53Owk8
8fYcg+/As/9FIdV/zRPdAnywX2jfPeATIZ66CfgUiR63hz7F/t5NW7BDUq5L
O+jHuihj87AAdgttzxbanpPCde9AnyseHLcd7CN+gW8c2OdjRZHnnAu32X60
vh+tX3B0kvUmYp/lj84Ugf3vbvh1Ap7rovLHM9CXHeznz4b3/v3aolrQ7+i1
dCXvF0Udrb0F77djtu8HeL9GLX2CxK9QtmrfUfCrHwc+/wV9/pf3/InfovT0
lRXgt3e77QOo97uw3hPs/zDByAT87fqixP3wvCkD0YqriP2V8obdSH+HNT8H
lwJO18fkveHPHrCG6XnCMD1PSH7PV7JKphif38uz1MS7AwcGhitUX6hGgxZ6
LyH+CG9gfxl+24hbtV2VIW7I980IgTnM+sir8msnfcQb3300gfmGpnRTwNCi
WyyFkbkcUqDncrnieyvmbW/AZvyBu6PONqGY7/p+MPdg6Ura6ckUo5C+lktk
XeS0bYEgrLtm1VQ+mCMp2A7KRRJ9t4SW96DvuGalvC7RT3kUlgc878Re664i
+ucViifC3CY7zmvGBsLHUe3+CuBD62OmPkt00Afi3s4PwwtI3MOLI10+Q9wb
M8F2EjxXyfgmRcBRCWlFgHPe7vc+Q3E/9gn6uU7QzzV02+gvzJ16dz1SAJ5/
CisKged6We3GlYTnb8uMcabkudwCP3yAdXOtUBOxA1ohor4N7PDc4ccN0E94
qhlE7I+MT0usAJ7l+QHKYIeAoD334Ll6Cq0VwM6zD004AnzE3028APPGdw4z
ow9rF2EcdSMH5ngq02GOdJOVQPNMoHmWx8mkH15Wizu7FRWOvW1GeXGLX8Bc
sX3Wj0W/Ej+ihddmsCaO6URjWw6kjf1djbx99LjMl9WiS+7DY8yJvv24CdIw
DwyU2Sj8k+g/229lS/Rxa3K3H+h76J8qo+aoTSdkLQifrytYjsBne/haMaKP
j3+6fQ70pb/yUPrGVofKYQ5p8PWRDOgvqzjgAPqlb2MyK/d7s9tp/u00f6Gk
w31HCf8jX/z5gM+pFYqywKe4iHvoB+EjaiQfD/xXTTp9CPAj340vJs+L7Hu4
5eB5s5Y3J8DzVu0qXPSb6BdECQsCH8/DwX2gv/ha0zmYrybtyn0I9rQvcX0L
fOTufdg0xaIRP5u+6FVTXDGOuTL5O8ylAxMgDl9jzRqZw6BZ9BxmXe7GXfns
MhylNXHpB75W1PijYvDs2QY0XVhAsH//W3St/sJWdLATqZ9UL4s1qUHxv7u3
F7DL0J6zHcveE/3rM3O8YL791EB1yneiL+9edIno4++s1rugj0r3BcG8vUCw
LrCd8FkXtOEE8DG14FlI9PFns0JH0F9fnncH9HMnPAd9PL8+htJ/mCVK6W+r
gjjmwV5D819D828VjF9L+GBxxU5t4JOw5tAN4LN07aPjPYRPcGPaI+D/3avb
CPDlbD8dIc+LgtwOLIbnFdaN/w3P62drH/6D6F+6vFMJ+HzWHjs5jugnmh5Y
T+yJSu/sTAJ7Cly42A98bKweW+QIVOO2aUIFtaqfccb9o/lwXnNRXtbvncZl
lgPN04HmuUYJycI50T2tjfibcBva8zhLBs59mvV5grcsK0T3grc2fiVyXocn
pSBvmpnfxC+UiZbbL3XSfdSJp815tLH4RQ16xlKXg3Oihfydos1k3TeiNYNw
vlM+7cN3oo+r5JMvgT5/mzyl3z5p6lQ4t4pY7krpu7ywoPRfU/vOmX2D5nmD
5vl04thbhA8WHqfWBHwMag5+Bj5Vn37NhnMr/h/tqcDf4U20NMjT9npcEiI8
I6SNtGBd77jv9bCu8MupZsQ+qE7O9D3Yx/li9zuwj9muU9bQB808O1AVsrkM
uacOPVUifQq/9Zw8a58PePn1eL/yJeX4292GIDhnXMfz/p3uq3TcVj7HY1tS
G2rp1y5MhHPJUvkTq16lo0eXpXO2EvnzvRmP4Lxy1RIJWTivxL/XSdUSnJ27
kpykCU794SfXeMm6p+42nLlD1uXT6H8IfdaVCC85OD8N0lGm9Mv8/Cj90hWn
jxJ8XD+4g8KvK+ul8D/7R1UQPui2Xp478Mlw+voR+EidSE0j/JGK9DR/4K/5
5UAw8P93XlxlXKYbwleBd9R5RIw+p7bMXHqq5EcbyjcrEhl9rn1w48vkYiKf
UNjSO1ree6utKpLgrOV6YLp2FA4nOSccTusyeZ40HsqF5/rDd5x6rrXiKdR7
uaF8Fd4LWpprTr0XY4Gej6PeC+bwXjDzvdD2Rxzsj5j2l009CPbHHQuFqHW1
fCOodV1NfMD+uNu7luLpZ7KUsj+9TxFzn9L7ETH3Yxt72XXwk8ZQw7PgJ9vj
3Sg/ofcpZu5Tej9i5n6k9x1i7jt6fyHm/tJ4FHgK9sXQsDK1LwoFpKh9Qe87
zNx39P7CzP0V0FD/EvZjygmBZbAfdaV31cB+1D+41K2G9ONPfCuSFvu04pp9
U8yhH6fzBWLmi58SfDshTjZoqmpCnNyW2PwH4iQd39jM+LaZZbVFkMQf3R1b
jMi6yMUq6RasS+cLzMwXdF7AzLwQWZfTDHHs8/nXVBzradbZDDh3K/P7IB6e
k2NR8vLIl5tAvthp/Jsq8lz6O8KjNMhzPRoQT4d5Ap1HEDOP0PkCMfMFHQ9Z
zHg4zckxlo/wyci9FA7Pdby3nw/WfZt19TDkzUpXew2wz3nelF9gHzpfYGa+
MFPP/wr55Ud8zgzIL5XrpSZCfjlaMk+tXL4KLXo/Jr7esgWbjmddhjkDXS8h
Zr1E53E2M4+nTXqAoX5Y+2nzdKgfXFPNnkP9QOdxzMzjdL2EmfWSXucLqIvw
NqfJ0lDnrBt/nqqLJii7yUG+xrpbqPz+YsfJIMDJ0t2rDnnfTmEzlcdFv22/
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
vfefteHFcdvOo8THrONhJmUvdzWh8zOFeuF7twHbRbr3if5Ei7izoP9UKHgS
zBMild5LdCnXoR6znTkwHzi2o3EhfE/Hq+KVBufgly3MG+EcXO6OYjqp9/CS
indUvXdbfS7V1yTcqPsGfGY9WqsH+J8Tm84Bvn1wdA/wmW4kFe0405fd1fK4
HPhE+zYbUd/fjZ1mD/z7Xn9GoP/O/pAszCt+OpmxvxA+sutvHAE+O39fPgff
Ic5YZX30kvUnhA0FWPCd4IyMi2tWZjdj9QWZSte84lkFOsI2Y0+1Iul7aorw
/aP1M4/UC0RfdP61UND/cVI3FuYtd0sVJzcm16PCP7HHYd4yTytN9LN8FdY2
ZVHn7zaG2tT5u/LymamkDse2h7mpOnxl7Vqqf/E3mj4dvlvcobyJDfhfW46G
Af4UjRWrgY/hfJslE8RvsfkWqx0HPivP2p+H7yX/Kq89DPxPbQvSAv3APUue
fiV8Arz+pDQRPu2/XUrcCZ9IieHN8N2osxlP9fW+EjS/MmsxfB8qbaaU3rCx
Hs87s/HvJq5nrLR+PbWvHR1IX+87F3yvKm5Yn+NB9JHlxCrQL7+slXfsfjky
Koo+wb2kEdVf7kQw7zI1D4P7n1i3fzJ17u/peIs695fLrtsK+ShDcSeVj2an
muyEfDR+VfIw8OnXd8kF/BN78yj8RTWVGPj03VCNYe+4zRYoklkIfM7UzdsG
37e6799fCfxPlHapg36+xUxRmKdpnzopyEP4qCp83w/ztJjdu+H+MOq8H0rd
Mz885RF1fzjKPw/mh4h3jC01P8ypkqTmivS9X8S89+uV+ufTVqL/reYuNScc
FNGj5oRxL8quwHfQPpPy1x/4WI5kZizhgu+dzwaNHWQtf4pj5/G2Cbq/ZP3S
0HJe0PkV3WxLtoTvr2tcxifuIfp/I9oXw3fNvxJmte+pjEaFg+GyuLcJpbn5
rfmm2IZMPF9bwHfQO6UkKP3zgj2Ufmae/G/Av2Wt7/lSOJj9IglR+M+E+Dzh
++sPJ55QfF5OlqL4XDVK6dpF8M0P7bqZRvAPfjvH+5Xgh7o2AX+0ptd8hP/u
DZT+7xrROeWFb5FQtMac/ZIvWSzB7xuU1v2PP2byT1/ZpTnTNgMXx1WqNqU1
IcETz53tO1r/8UdM/rvP75oF+KYdvkuUTgWxHU9KbQT8qPIJwB9f2byJ4vNi
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
cL3773sp7Pj3vXa8dt3DfHcya4CCHn53wbI59LvzheAQy7D77/D8dE/Ipuen
VK8fPT9WLA7ZxsEhGhfjHln6voTNuy/F+6xrI+NXnu9ecowPO34Gv8/5WgLJ
VqOzAwa3wpeJMytDCgQwVwhOeMzigWMcPBBjI4jf/b4CtqTflBNMb4F+SQNF
ZdQFICLELu9k7a8xx/4uHF8vrjGZB1qX0sV3zGsGi40NKp3b+bCaYwd79aQs
a+8KWHunxNq7ICH2pdeOyHHsyKv/i/7/w+p/c1b/76uoX/GMwfGm/HMDtx0q
Iyrqdv7aGTz481Pi+5SMViIi6Zpst76c5C5b6sxPq4ETdlYOLhV15FjA2cVn
bBrBJHrno7b5PLgh0JLvmdcCi26LhPq6MPu+l1ijF84Dbxs1n/t6HSDqoXD1
2NAkMmXdzIamWh4Myz76KEDQDieOVuXqM+2hQapXqkfVQpnWUuxPzueMvoL9
N7hcrcf+X7tvjWHGJ2Zx7WE4Pm/RlgYcf2Ci44rdT5qJQEyNZOvVwJCmmNhz
fgwOVN7iwqwTIsZmzMd1TjO4Go/rNNJSbFgwuw5OBdzpzk1ohPM3QnKPMfvd
YOpsw8gB1PLchqEcxjp5B6Mcjv/+MftAcgs5+vvo7gtFFeTZHK3iZ4F82CPS
fZpItZCVtw0WX86pJHNl7jlmDROA1t7ML+d4fCK/JGhQmVMTo2cru3SKayAn
fEBY3KEmqPi9/kFjPz7kXKoPm6LEB41WzT3eUu3wLe/1mGqrZCKudPDcRR4f
Hp+ICRc92wZZCXLXbJn25fOH9tNlcEx77grsT6ad/SOD/efvMaf9l8zdcZQZ
nywJ63yE45c3Lj+J44vO/rr5Zmkj+dodNDnMiw+6ncS06yqDWwIu9TvP/E6n
tPtvKbNOt3f5LbhOueGhC+M1+TAx9k23eFYTTJ7Uky03txa8jZ/qM3KAlcFL
DqIcdp7XK0M5FJ2PuXfvehPZrx/vPcjpHUlc3/V25po6uD7oxmPXgkbyvM3F
fq1fFUmKnZda2lMHSUX+Esz/gryK3EH/FzbF/cfh/4JEGpjg/2KsquJa/F9s
CF26F/8XlYp68hpmDbDi2nzTdGcBOKQ6Lj10WgC72uLb8f9oaealhv/HuLP6
d/D/+P6wmLWXM4M/Z5ZID+n/iAx7Y9pua1APQ57sipvCrD9tyyAv6PeIDNkV
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
v6wXw/Uc2jLQC9dz5NrK6wJm/Qt3ni3F9RsNkZXA9b8vMXo6icG7L0W9xxzw
qyN6E8bfU73Gg5/7dyi0hL2CR/e+T8hc0U6SvBWqls7ngUz9WAOmnViMDxyP
7RN3+77F9s4B/XXxu7fd6quJ3/3e6D6h+N2ltnzowXMYszBmDJ7Dd5mjkvEc
3rtmdhXPrdeVbbJ4bk0Gy83Hc8tPszbE/1HLKsl7+D/6+85JgP8jk5oRUaHM
/+6tv6ga/u+Uvmz/jf87Fd/AExZ76yEpdbd234J6Mie/9W1FRi3s0Q2bEC5f
AP0maWdph7eT59Wr7i46wgOtcblTmHaS5UYysX3UKH4Ctjsf7bZDvaTQ+CYI
9dLl1CNiqJeGb/s1FfXk5U/yCagnHT7f90U9qbjoxjcHRq8GxZtuRr262j2i
vzijVxVH+/uj3pbtHz8R9fbofu0vUG/zZiXPRT2/6vHVQtTzV9+vp3refew7
LckhAti+Z2gWvnuSp3e+Ad89EZavLsw/E3p6hhLawdKBZ+egHZTzHpONdtDt
b/9xaJdHrvg+Bu1y6Hzle2iXLYzP1KUwdrx1+OtQtONNT8cHox1f3KBsizhh
5Piky4gT7hQr99VgcMLNH5oJExhcYXlydjHiCsO4bCXEFTq+imIVCtWgdvoD
fecrbkc+fedLWN67MD/Gpfvnmz8zuGtYxY+liLuCN1a9RdzVdn74ZMSBnz8o
ByEO/BsR8xhxoM3RjFLEjacLdWsQN04wb7RC3OgaayGGuFTEXGQD4tKfrT8p
LnVpkVNBHCt6f+ctxLFfMg9RHHvW+WBWtWwZrNm6nr4rZOxYQt8VEpYnL4zv
H/t3nyEB9j7DM+x9hgtEpjQjH3FZLRWIfMRUVeIj8pErYkF3kb/AuEX7kb8U
bjuQhfxFGP4XhvPZ7wVCvhdwv9f/X1zKfhfgfpcSuzI/9OMVRXyi53xv8Et6
zrvkf5ii3++cx3J6zn+nu4viOf//i6/Y8wzc83y6jwTqB/itf5TqB7PaKD7q
B1niGMHoB1gut5rqh9jLm3/9Rz8Qrn6YPLJRBfWAm24d1Q9zetbeQT1Q1V9e
A/XGFF8P2h4+tSH+P/oBhOgHwtUPN/6WfWf0A7FT2rwJ9cPLrasHon7ot6ax
HOMUago1Q1E/1x8/5f0f/Qxc/fwjqiiD0c/kqk6HLOpnyU61hP/oZyJEP4MQ
/QxC9DPh6uchO09fw3jZ5wX+Y1E/i7q/MEf93DN9X0Ok3RPi/DbeHuuSlvRJ
c8W6pPyxkmJBJxrgyX34Pka5nrhIzu1eweCcjwcrB563e0n2Sry8jPVQVxvF
+2I9VFex9Xist1KZ9qcd662OyIkFYL1VbOASvm1JCjl1L/Ax1nO13THIwXqu
GNsoV81ldbDMLyj9uk8D6Th5Nmn4Vj7ERLgMcyjJJaWv5utjHVlqRXE41pE5
pHW6YZ3aqcAzkVin5vrArQTr1LrqBjhhHZyJe8UKrINLyFzognVwasPX1jrO
rAWnvDURW/MbiTbYNx/xFYD3jFtnsP5u4NEJtC5+kfhaWhef1b+ic+alUtAd
eTAB6/uy7iraY32fsa1rEPK1T5F2lK+9VW2lfE2YH5IE6/CxbtGvajutT6/8
ZU/r04Oe3b+AdZFjxF6pYF3kRofff7AuUmb+2/1YHzR/9QE6/vlSu388V4h/
YKfXhRqsf5+plkHHdxm7kNZFsnIAIXIgXDm8ULlwCu8HUFtSSOWgqmBG6xAP
jy2oY74XrH2iRb/X4dWmL/7zvYiQ7wXc77WtJUbAnCuQVv9Fz9VqnQfb/3Ou
iJBzBdxz5XQ2YgLem1FtOJqeq7N9cgLxXNlPNg5F3BVSHiaFuCutoYPi51GH
bvgn2PDIqdNbRwVYtpCG347nvKN4vfgQuPhQZWe/Dmyf+PzXdGxXklKi7Ww8
Grjx6LAtByO/HWiFbafUTiRGlxPLMTsv2y6sBfJEsI/hHYz+Dqe8Y8VyB3vk
HeGRErewXbtSiba/WtNhh+1sPgBw8wFGrFLXu53ZDLOzB+xfIvmWXAp2PZiy
SQBT34orMDwU4mqA8tD3BtMfIQ/V6Fxhiu2Vf+pHYntUbiXl3Ww+BnDzMfhL
jnvVLm+E3VY9wUHFVaSsJ+rLD4f63jwZ4ObJDPuqfHZTnzoImLH/Q//sGnIj
e0VAwsHG3vwl4OYvbRa3dTfrUwXp0RmHThTzybw/BuW3rjeDVOlcmhe3d4YB
zXNz23WN5rmdEp8RofTrDenMfPKyRDmT+A/UCHws8743X5dw83W37s0WHDr+
huy3Gjp7+LJGUBbZEeaX1dj73iUZzvohX7F+yOcTxy9DP3/ghjHUz99514n6
zZo8Nu6wyX5MpBXHKfmpdBCep7JN7hXGXgTIj7w3KY40xRyl/kCD8XXa6A/c
vGN1LsY11knm0Pafh+WonzBStus7xk10x1bPwbjJk+9L8jBu8n7S66/Kvm8g
f5lo3vuBbcTPU/z0NVIL0d6nKzAeFH71FPULeT3eMg/9QirmabrHIZtM77+z
jVGhhLz83Lbcjwe317lZl/snkZjOVTTO5RIymfq77tldnoTtrn1jaPuFT360
vaJ1Cw/ja0u1t8zA+JrpwdcSGF/zXJt5+m5TBUyIuGVwdFUrkSeVpUHNNTC2
Ii0H44bL9FfQOOOp4Poc9Hsct/+2f2/fXKImZ3ltaXE7GT0svWG3OcNPtx5V
nm37iESbtaWiP2f+uC80HhpcaN2DcdJTz6z/xRPX2c3D9vMex1MxDmvctoXG
zdcusZdA/juyIDu+q4tpr45QTY1qIV1DMiZ2f+bBiQtkHcaXiZOuFvL6Nc5+
lNdHDf2Za3W1kJyRuVN3/mw7WXDKnygO44FfctM9jJtXrZCi8eVzB5Rp3Hyd
Zf5RbP9lH0zbhwVG0fabGYoGWL/zauCIIMw7qjf2oXUrbQkdWr4Mbw8pXzUg
/UgF2Z83bUq1Jr+3Dohw64CCR7+V1HBsI2WfvMtNF5YR2WVV00bp8+DKY/3R
2B6TeqEI27M9nk3C9t9ycJbRG0R36YFDqDfGtpyJQr3BjgPccbbrXp+G6wnb
UvInjVnPsusf1HA99YUHZzL6gfw++MIP9UPxiof7UD/0tT+O6wfrlLODcP3d
xz9rYv+pEqdf5g1qBu8/gZ7e0u9I26wiIv5bANc1Zm5Jsm2Agmf6Glfaq0lY
rfuN+gENcHrhztR9icy+v+w4o8yrJa8LNSbsndwEHWycbgEbpxvBxuk2sfEp
fTY+FczGp6rYONRxNg4VxMah7Nj+Bpx41uCnts/X6/HIhb9LlrU5EnJj3s3E
QN0OMA0eX43/96seCfT/ruYjHY7/91Wvhu4z18wn4yeCQVRnI7xyEB9iZN8E
i/5OP4ztizzn0PYrLw8OxnY7m6Jw1DOq88upnhl/xJDqmWOVyc9wXo9wHp23
4EgRnVeeUxepydZFarF6ZgQn3jFh8TF/1HvbZSYfRL2XLaVainovRmQjQXmG
NYyLRHkmts9TQXk6zNa5jHq1qDKoDfVqdPkwX9Sriw1nueB3KZ9trIrfZZTE
7iv4XXS3H/FFvX1QyXcP6u2X4cu7UG8bxae/we97/V69E37fA2dd0vH7sucE
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
IPzx22hE+NMRvmC0HrPeqo0ShD+7G84T/izc4eHD8BnVCjgWAp/z9EUFYN7Q
lZdlme+ILh9JOALf8fiW3svwHU/o6/V7GV3SMaXrMqXryveUlYtdeEYnjsLj
KPzAZYsMjfC9WbJ0nwT2s3Ah0n/cH2c8tBrr9KMHufqUqkJf76U9N6HfNxLN
VK2Gft93lB0bAB5JzgvPv/i5nPYfn35GnYzXNT9DxquTft/+SFlwF8F/cWMR
wd8z+nCezXFLnVmUnuuUnjKbFR5LX0cjp9z2X90fO/GUg5fsz/9uQctY+nU4
6e9n960O577VPLbK/pF/Ctp/p2PB5w/VyPnJ7NhwmQ+oM4GsF3Gu9ya7bxHn
vv0gyfY9t9NbQ9Y1Z5oqWdc1Wnfdn9ZdX0Prrvd8No9L9k/B2y5bB/Yw8+7v
bGuJYOaVsx7ZqPU6Gk+7d/ZxD7Mu431ZfueYdbmw/NTh5Gcpu2//BW/L3riJ
wYOis5wJnpvvMwme9O+jY5l50SiHI2TeXNUuMu8nqZXwXZDjWANCf8kqdUL/
Xdq/r5j271Oh/fsE2e+FOb9XObtvMee+DXevPcXwGcetqyF8PtwqRvg84SLX
MeY7YvGj38h3jFnoT75jPvvdszi/exK7b7M49600K690OOWVMit/0AQqf1Sp
/LGVVwQ5g3fKPydy5ozdIyJnlFn58C9+vl0wA841Mq6RIec6ymQaOdeF7PnF
nOf3EHvusjjPXbGEWdlAWTma6Dve1jWzA2+9UeU4PKYFlbH3nQ7nfXf6GZfc
iQ2NKETw1un3lu9QOE/Tgtg5zHvhx7Rzrwpz0IZoTe39KT0ou2TfaNGceiQ+
u0fiTWEO3vXK7fs/DFxrV+UtgN/b+7aMwYNPtsduqWDw5NjwNQGes81Rst/K
yvH+FvktFxh6Ds4bXfSLoYdd94J/8aFXsliOGY+4v7eawfjFU9+8hPGrVZ6V
Ap0yIwu2Av6stBsEf9bym3wMPWhzn/YPoMcgLOw20NPxZkoEQz9265+jBfTv
6l3ED/BCc9m5QOdO96mnYL1TsxfOBzx3xLdhhm940ir748A3l/6CU8C3tft+
xzXz+WW9o/vkHb3XYqLf14w0B2QpULgChQvFSstuf3JHJ4/qG3lU37jQmTJ+
evatLM570y3Q+bCAXyNSkl7olLG9DUd1LBt5Id2EXrL6mw6n/mbvEig0/KAD
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
0HoCRrSegOn/U9eVx/W0fe2vqRBlTLPZNZRQIdM2JDQYuqQouplJZMgYUYQo
UobILEN0RWluI1JExopokEplzqx4v2ufpz9+573+3Z/z2Wefs6e1nrXW83hv
MrGLiWSP3wYK/mTderaCP/ks+LFHgLf5BHibwXfNvoLv+gT4rrNiDceTLonJ
5QVCl2S6Xa7QJfHe+i/xNzK1xesFT+NS02OCp7Gk28NGfwedYw/jho/VdCzl
es67ywn3DoDuai50Vx9BdzXpQU/SE2E9VxUKPZFYnUihJ7J23VmPScp+Rq5M
0Gmt7Ge6ZUDLRcp+WmmEtaofHspfbmvvRvqntls6+TyJKGQ+4MGW/7fNf9BX
7Qsehmz8Nzv8N+uGDYjfm4e8XCf4vZv9Xir4vQ+D79oC/+0k/tsB6Jxuhc7p
V+icTj2s1ol0mi6dsxf6PrqnbbcRz0DCzybNvpg94MlBmR0/ry3hvzU3upS8
LGF9+pc2ebwknmeavBP87YodPc9Svf8X8DyXguf5FnieT0E/1E6mHxp3svkW
0u2qWp+5murNx/gcETpTX6ETegY6oabQCQ1vuInyJPni0j4iT/JElrY55e+F
+u4yN4q4ygt1N48lvuifB21TiS9aobgidL7ScR/dxn0UDt7+5eDtdwdvf/M7
Kyg/kA8MWiPyA/ePCBf5gdF43h3PL8HzD26yNfQf3D0XCd6D6Mz3Z+g/hKbF
kw4L76YZ5UF1Z+nfe62murM3OzQzhhAPbdw5kffoaTtN5D1a7nfOJv7wgCIV
sf6rj8QMpPWvUCh2kB7WIezrI9jXX8CTvwX87Ubgb2//REOP5uumal0xX1pr
M6bRfCl8pOc34vk+eL6vopDiF6zx8WIRv3AoShTxC4eSnhcprpGrfUK0P3Re
L9o1FyVpKPtn0xaM7ET9fxqoJ9aD39hdlrQOx3nMEOtw4rAosQ43JC8mHSW+
K/O+2C+d7I+J/TKz4tkW5X7hnbQjxH7RsfYW++WFTN9TC/qegU3Xkd4Qv5I+
T+zrM2nZYl//inFtoty/PLxmqNi/wU93if070daaxsOmrfQU4xnnNV+MR6G4
+D86TUfxPyvAhy//nzcc79E42QybSDHOuuZeYpwf8LyP7H8mJSXTecKtT44V
43HN9BPjGV9vuTiv1m8sFufVtNPR4ryyAr+9HG95NNqWvosZVNiIfp6O2Sz6
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
HlEluzH3TtV6shsjL8Z3ILtRBTryutD7M4PeX/l5t5b7++WzLTV286ytilnL
yCU6NcEvWUB3a63RM17yvb0z2zp+SuKLDfffujrrFfu5Iswqz7eIWXUb2392
2XOeMzvocOd+pSwacf8OiPtvQdy/kyy+H4V7sBHid40Qv0tG/O45+A8DwH/o
C/7DFW1nF5JdXTqokR3Z1U08i4RdnVP4a7JdRRrrFOH/2s+8hC3cELYzZmgZ
Wz86K8xYcZ9nNTmUGal7jVezbzm9fd+y+A9TnvQ8dZvN2/0hIqNVEV9RYtZu
QTeln4u4m/w8sTqvSu9lt6/1Eu/9MOGceO9N6b1c/t6l0nvZXby3Bu8t1jeh
93JFS6Nz9F7zyObivVMRF4tFXMwecbEuJv4q5H8ptLO9aR6do263p3n8Bb0k
Hegl3YVe0r73w2ge+cUQbzGPdscmi3kMNRlH88juvm5uQPMYqTgk5jEJ9Ufb
ZfwkRS+TaX75u22u/Wh+Wdt0Mb/BwJ9NgT9z4M+NoftTew964R48Clw6SIZL
u0Mvu7lML9sU8bLf36R42QzEy5KeLXFV7lNme7rMmfZpu7T4fbRPU6Ajo4P8
MVfkj3WucKf9y1sXfl5G+7c6dY7Yvxt2GNH+Zf1fBKbR/rWa307s30PS/uVO
2L9rsH9DgXsPB+49Hbi3HXRP9svyxncAD+fAw52Bh68AHp4HPPwA8PBK6Fas
lulWgAeAyXkAPMGvNVLG/18CXYnmMl2JqdBR3Ys4TjHiOPv+oAdxTTrPee15
ronzfCX0KzvJ9Cvl+g450Hd4INOLDIRe5BnJjmJyO6o5dBDmy3QQFoPnqgQ8
V63Bc+Vef9GHaffT2VE3L/OEiEoe6tl1t8Wp52zgceuZU+7HsYyRmomGY5Tn
RcTp6x8sn7OUgjvX7NxSWKXlPYFvfB2dKfCNfqaTu9m6RTJt80fWhIcE7xgv
8JCsWd5Plf41O7KmxID8a+cTyTXkXy+80/8q4STndrfrTP1snZ3Qmfpp1OHa
X8p++MJf30U/Ewfe6Er9OCKOJv//w7/X7FP63aw46PMO8rv7f26QRn73Qum7
+DF81wF8V5uhN2Yrv4sH2qUn0He1dIi+Qd8Fe5j9wR5mU2APD4A9vBS6cieg
KxcAXbmdyIfZjnyY68iH6fytx1DaF41vpQTSvrjS7OhF2hc7qloQTwvXOTLv
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
Hv8HZTbyqA==
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["y", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> {330.}, Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-6.283184409581685, 
               6.283184409581685}, {-0.9999998571428571, 
               0.9999998571428571}, {-1.9999997142857142`, 
               1.9999997142857142`}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[2 y Cos[x], {x, -6.28319, 6.28319}, {y, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1714$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max1716$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min1713$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1715$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1714$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1716$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1884577$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1713$\
1884582$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1714$1884583$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min1715$\
1884584$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1716$1884585$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1714$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max1716$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min1713$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1884577$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1713$\
1884582$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1714$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1714$\
1884583$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1715$\
1884584$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1716$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1716$\
1884585$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    2 $CellContext`y Cos[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$], \
-6.283185307179586], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1714$$]], \

                    (Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1714$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$ + 
                    0.012566370614359173`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1714$$]], 
                    6.283185307179586]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$], \
-1.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1716$$]], \

                    (Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1716$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$ + 
                    0.002, CalculateUtilities`GraphicsUtilities`Private`\
max1716$$]], 1.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AspectRatio -> 1, 
                    ImageSize -> {330.}, ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1713$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1714$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1715$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1716$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkQYF7QsSoxtj0oCSlO/\
1kkti4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJShFBU+u4bM7xoSg94CRHxA7301j3gs5I9qd3+D7hEUFIxq+\
asqopqCmB5LkGY1U7RlLemJ+MmUiIoz+hGfbOzvDV6+\
HDgZjGROtQXL1si1knkmiIOkh0A1j3jHCv7nj4/L4qWAshO8F8AjUQ+\
OdSBIbGMEJw3y8b73aTN3DxDThMZHxpdNk5Tlqe4HSkvJ0ArMc37iYrO22wESmynFzv+RmnYJc+\
LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyRjQ9AbVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+\
lI6r0chgv2oYBs2NT49XaW4YftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQQA7GFVtu92hK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe5ER9mXPypuJZdzTYa8H3INKci1or+\
N9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKoDieqSjsWBLc2ZfxL9ssBHwFOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sby20uL4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "3", "datatypes" -> "Plot", "timedout" -> "Plot", 
     "timedoutpods" -> "", "timing" -> "1.68", "parsetiming" -> "0.801", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa6770171i27g8d83hihfb000021c5i373e0067d9e8870886671548023176", "id" -> 
     "MSP6771171i27g8d83hihfb0000180cfad2gb5422ba", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "29", "related" -> 
     "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa6772171i27g8d83hihfb0000384a72215a26hh7c8870886671548023176", "version" -> 
     "2.6", "inputstring" -> "plot of cos(x)*2y"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Plot", "timedout" -> "", 
     "timedoutpods" -> "", "timing" -> "0.616", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "17", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "17", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "plot of cos(x)*2y"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2021, 8, 20, 23, 42, 23.096555`8.116122189788975}, "Line" -> 
    258, "SessionID" -> 21354177791867475517}, Typeset`showpods$$ = {1, 2, 3},
    Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {"ContourPlot", "Contour plot", 1, 1, "Content"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "plot of cos(x)*2y"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{840., {1569., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa6770171i27g8d83hihfb000021c5i373e0067d9e8870886671548023176", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"d739c134-35df-4a6d-ae03-6cd50839dde8"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJx0XQd01cXyRumCKEUQUUEFe8fyVHRiB30IKoIFFEWwAM8KKip27IqoCIiK
DQs9KEWBDaEb6gUCIdQAoRgghIA0yf/9737f3HO/914O59xzPvbMzs7Ozs7M
zu7vpAceu63z4eXKlfujRrly5f/92+7WeXsubFo/66RVLceWle0Iz+d3u37Z
obKw6oMlnQcOPMbxI87vdqhzq9LQaW7+krKymo53u/bcuzoeWGGJ2jPfnDu3
uuN1xl629arMg7Y6Saei46PKPjjm9O0HbUmy/cFAfPDw4TtK6qyyZUm8yPHN
NfYOvnzDrlAu+Td7EvH4WxZyYnsjXoL28yN9x7uDfn7kJ4P4z+BnQeTf8ePA
/wNxvI6/i/GujPJxvALkA3lmqDwp5y5Pjx44rvuf4eCTQ1+f0O2Ay5n45xV2
9B3y8E6XM/FXfzjtt88bLXM5E39pYK9LZg/Y63Im3rLxV/ecPHevy5l4/VU3
vf7AtuUuZ+K9e73bZ3r1nS5n4vH3gMuZeB+0p5yJ71wZ6VPOxFuAH8qZ+Ovg
n3ImPhjjpZyJ94d8KGeVJ+X8c7XaL3fPLwwvHrF22sAVe1zOxNtlrr9hXPlt
Lmfin1U7qcGy6xe7nIlvfen3V299qdTlTPzP5qO+Pv7nUpcz8U+O3HJsYsYS
lzPx0+ZeuXbwo0UuZ+Lxd4/LmfjFaE85E38K9Cln4pvAD+VMfDv4p5yJj8B4
KWfirSAfylnlSTlv/6ZHl8YtCsLfX9cv/3zzEpcz8efu2dL1rEs2uZyJt1tz
0d7GufNdzsTbdDk4f0XnYpcz8be6h0113yp2ORM/+qo3R1z95UKXM/Hbvn1w
7OjfC13OxONvicuZeAe0p5yJ774y0qecib8BfihnHxf4p5yJ98J4KWfiT0I+
lLPKk3LunNTz/HAgqed/upyJD0qui3UuZ+KvJNfRLJcz8d7JdbfZ5Uz8n8l1
utnlTPzYpN2Y7XIm/mLSDqxzORPvjHVJORPvg/aUM/HilZE+5Uy8OfihnIm/
Bv4pZ+KfY7yUM/FPIR/KWeWZrs8JyL9A9DkBfV4m+pyAPk8RfU5An9eKPieg
z2tFnxPQ5yzR5wT0OVf0OeH6nq7PCehzruhzAvqcJfqcgD6vFX1OQJ/Xij4n
oM9TRJ8T0Odlos8peabLORt4QuScDTnPEjlnQ84jRc7ZkPNCkXM25LxQ5JwN
OY8WOWdDzjNFztk+D+lyzoacZ4qcsyHn0SLnbMh5ocg5G3JeKHLOhpxHipyz
IedZIueUPCnncvJHOStOOQv8MuWsOOWsOOWsOOWs/VLOilDOilPOSp9yVpxy
VpxyVpxy1n4p5/+BU98M8jfRZ4M+m+izQZ+D6LNBn4Pos0Gfg+izQZ+D6LNB
n41yJg59NtFngz6b6LNBn4Pos0Gfg+izQZ+D6LNBn4Pos0GfTfTZ5Sn2GXiB
yDkBOS8TOScg5yki5wTkvFbknICc14qcE5Bzlsg5ATnnipwT9CNEzgnIOVfk
nICcs0TOCch5rcg5ATmvFTknIOcpIucE5LxM5JySp/gbhv3RxN8w+Bsm/obB
3wjibxj8jSD+hsHfCOJvGPyNIP6Gwd9wOROHv2Hibxj8DRN/w+BvBPE3DP5G
EH/D4G8E8TcM/kYQf8Pgb5j4Gy5P8Z8h/xLR5wLo8ybR5wLo83zR5wLoc7Ho
cwH0uVj0uQD6vFD0uQD6XCj6XAA9LRF9LoA+F4o+F0CfF4o+F0Cfi0WfC6DP
xaLPBdDn+aLPBdDnTaLPKXlKPGiIX0ziQUM8aBIPGuLBIPGgIR4MEg8a4sEg
8aAhHgwSDxriQZczccSDJvGgIR40iQcN8WCQeNAQDwaJBw3xYJB40BAPBokH
DfGgSTzo8pT8hiEeN8lvGPIbJvkNQ34jSH7DkN8Ikt8w5DeC5DcM+Y0g+Q1D
fsPlTBz5DZP8BuzGTpP8hiG/ESS/YchvBMlvGPIbQfIbhvxGkPyGIb9hkt9w
eUq+zpBfMsnXGfJ1Jvk6Q74uSL7OkK8Lkq8z5OuC5OsM+bog+TpDvs7lTBz5
OpN8nSFfZ5KvM+TrguTrDPm6IPk6Q74uSL7OkK8Lkq8z5OtM8nUuzyHn3PnF
3Lm1s6af/tKp+eO2BbvlxF8r788Pp3a9r3rTpkc7fuXpR+9odkOJPZjs9zDH
/25X7YduP5fY2mS/uwPxVaNe/3lh5RVhRpL/lUb8vWvvuaff1P1hRWzveOXR
sf39kX4G8VLQbxL5cfxa8PNV5N/xk8E/x1Ula131fo23hMd3Vdx8zvBlPi7i
Gb9d82OFbdt9XMSHrT/1xb79d/i4iBcsOHLN4Eq5zj/xSgsjTv6JfwE65J94
C/RL/onfCT7J/z/bXbereb8N4esB245rc+9i5594xcadn/yw5Rbnn3iHepcO
v3H5Fuef+KYd/Ws/UjHh/Dud4oiTf+K3gg75J34k+iX/xN8Hn+S/UVLf1oTv
n//589JG851/4jnvv9nsuJHrnX/iR918Y/6h+hucf+LLG2b0fbTKXOefeKVG
ESf/joMO+Se+CP2Sf+J9wCf5j/Y/N1Sd+dxhV78xw/knfvKO24+86YSVzj/x
1/8eWafb+JXOP/EN99227/BK051/4hU7Rpz8E38GdMg/8bPQL/knvmtG5JP8
R38sJyxr1G/+cYsnOv/ER2YP+Pq+1Qudf+KbH1zw5IrLFzn/xFfbnOmXVJ7g
/BOvlBFx8k98HeiQf+Jj0S/5Jz4JfJL/6Odkhsu73n/RQ5d+7fwT33xnz2VL
Xhzn/BO/5IJw7Sn7xjn/xLe+lH/OggpDnH/iFV6OOPknfjbokH/iO9Av+Sd+
OvgU/g38m/Bv4D8I/wb+g/Bv4N+EfwP/Jvwb+A/Cv4H/IPwb+DfRH4P+mOiP
QX+C6I9Bf4Loj0F/TPTHoD8m+mPQnyD6Y9CfIPpj0B+T9WtYvybr17B+g6xf
w/oNsn4N69dk/RrWr8n6NazfIOvXsH6DrF/D+jWxnwb7aWI/DfYziP002M8g
9tNgP03sp8F+mthPg/0MYj8N9jOI/TTYT5P9y7B/mexfhv0ryP5l2L+C7F+G
/ctk/zLsXyb7l2H/CrJ/GfavIPuXYf8y8R8M/oOJ/2DwH4L4Dwb/IYj/YPAf
TPwHg/9g4j8Y/Icg/oPBfwjiPxj8B/XrDH6diV9n8OuC+HUGvy6IX2fw62xV
9OscfzP6dSZ+ncGvM/HrDH5dEL/O4NcF8esMfp0dV9z63C5d6rn/eXOXtj9e
sXe/59WJ3z5oxI3lV6bOlYg3+6Hqxlm//u32mefXQ5N6u9pxnrcuT9qTPN93
2D6uu112Z5J+VafftH7ijv7j/nY5k060k8XennTunfvSZ7/+O15gPEI6ZTU/
+0eTVft9X2P7uK5LHSf9LUk7udP3O7bPS673lUHmK2C+fH5JZ03SPi/39qTT
N1F2ec+FB/28gHTi79/u57N9f7RnHMT2k6ZP/eilZ0t8/2X7yo0in8TJT+WM
yA/1h+0rQQ53RHm6/38R5M/2pLMO8mF70rkP8mecRTqtTr2772vf7/d9n+0X
Yd6Jk/4vmF/qLdu/Cb2C3mao3rI96UyGvrE96WRW61B8e7W//RxE9ZnrgnFE
rwYtjq2WSNUDEJ+1quMvz2/dIf5tIfzbpYH6yfYrM3sm2jXeJ/tmIfzeItdb
th98yQ+9G/6+R/zhQvjDRW432P7JJrUG//HtHtlnC+EnL3G9YvueaE+9Iv51
x5/31Lpmh/jVhfCrlwTOO9uvwrjS9+tC+NtFrg9sP7H65yurv7dH/PBC+OFF
tEsZKv/0/b0Q/vlS8Q8L4N8ucvkznnrjnw1a1e9XKn5jAfzeQpc/219+z/jp
9QeWiD9cAH+40OXvcWLlOSsP71MifmYB/OSFLn+2vx/t0/3PAvjPC13ObN8H
/Kf7pQXwqwtdzmx/yq780/s/WSL+dgH87UKXM9v/tPCKt1YMKxE/tgB++CKJ
g/IRB81xOTPu65C0AzvEv82H3U6da7P9yGR+pkjipnzETetczmwf7WeR+MP5
iKdmu5zZvj/ap/vJ+YizZruc2f5e8J/uP+fD7q1zObN9/WQeqUjisnzEZWtd
zmw/Jml/tom/nY94bY7ocwL6PNXlzPh0TNnsvv/ILxR9TkCfc0VvE9DbXJcn
6TzUv/ukwk82iN4moLdZLk+274b26XqbgN5muTyVz3S9TUBvc0U/E9DPXJcb
6dTqec3CkikbRD8T0M+pIrdsyG2MxLnZkM9MkU825DNT4txsyGG01J/koP5k
gsSP2ZDDaIl/szHemTLebIx3psS/2RjXGB+XniNzXHoezXEpznEpHfKvOPlX
OuRfcfKvdGReEL+PEb3NRvw+U+L3bMTvM0U/sxG/j1b5I34fLfqWjfh9psTv
2YjfZ4peZSN+H2OyHsH/VF134D9XziVzcC45QcaVwLhydd1hXFkyrgTGlaXr
COPKlXElMK5cXS8Y11T3/xkvY33JOVcuzrlWSR4jH3mMOWrnkcdYq/bKYAfk
/CsX518bJO+Rj7zHOrXzyHvMVjtmsGMm9spgr+RcLBfnYislf5KP/Mlstf/I
n6xT++bjSj8vy8V52QbJt+Qj37JW7T/yLXN8XpgHwH7h80K8avI8YoPoZwH0
c5HJvmzYl8UeFkBvU/PC9tiXRW8LoLeF6udAbxfqfm3Yr032ZcO+7PNCfGfy
fGe96H8B9H+hyX5t2K/F3hZgXaTmhe2xX8t6KcB6KVT/B+tlkc8L8xvwl3xe
iG/u0yWv+PitkjcrRN5sqYlfavBLJR9eiHxaURC/1OCXSp6tEHm2IvX/kWdb
ov6qwV818UsNfqnPC/E5ly6ac+rHWyRfV4h83RITf9Xgr0oevhB5vKIg/qrB
X5X8XiHye0Xq/yO/t9QkXjPECybxmiFeM8lLGPISJvGaIV4Lkn+AfUvVS7A9
4rUg+QRDPiFIvGaI10zyBoa8gUm8ZojXTOI1Q7xmEu8b4n2TeM0QrwWJ62Hf
dgaJ1wzxWpA43RCnB4nXXP4Sjxvicc07GeJ3k7yTIe/k7XneivjdJB9liN9N
8lGGfJTmlwz5Jc1HIQ+8K0geyZBHCpJ3gv0pC5JfQt641M+7SWdszNtofsmQ
XzI55zWc85rkkWBXD5rkhQx5IZM8EuztQZN8kSFfpPkfQ/5H80XIY6fqQ9ge
eZ4geSFDXihI/gd5712az3F9kPyPIf9jkrfxeZc8j+uJ6I/nf1jPwPzPTchT
yXwFzJfXFRDfj7wi6wSIt0S+lPSZx/gFeQ/SJ/4R8i3MBxKPv/u8X+IDkBdi
v8QnIx/FfhnXN0QegP0SnxTtufdLPP6Wer/EL0E+hP0SXxv3O++XcW5txMXs
l/imuL97v8QbYX7YL/GfkB9gv8TLR/9H6qxyce9mg9yjycU9mpVyjybX82Tp
dVC5uBezQe655OKeyyql4/uhyMEgBx0v/J0dJuM1jFfn0TCPOl/Yn0tN5ssw
X6qHBj0MoocGPTTRQ+wz+0z00KCHQfTQoIcm68uwvjTvDbv1t8n6MqyvIOvL
Wsq+wHxvQVarjqds3Ov2mXiVLo3rPNP9gNtP4i/8Mu75kZl7Pb9B/BXgtGPE
q4IO7cz/6pf6FOOCPRKnFCLfUip5lULkVUolvkjRSc+HFCIfUur9Ml9398Du
R+7//7pQ9Ev8tmcb/33iM8XeL/G2wNmv0mG/xK8+6+KM7AHF3i/zV5WT8vnT
+yX+fFKem71fv2cEnP0SrwI67Nfzb0k5b/b8vMdlETfhx8BPEH4M/JjwY+DH
hB8DP94v4wLIwUT+BrkFkb9B/ibyN8jfRP5OJz1OL0ScXmqib4hD9wTRN8TF
pRIXFyIuTp37KB1ZXwY9N1lfkM+BIOvLsL5M1hfkvNdkfRnWV5D15f2+EGr9
UfZS3axP59db27xfUbhg+sp77h60JzRItq/s+JVnd3q806YD1iXpt+wMxF/c
s+nhl77dHJYl7clGIz6tQfVLWt+yJ/TLbBHKyo7IIH7tUxlP7Mo5YFfd2/+w
pmPrOL7so7r5r7+8xfvN69xrZlnZpnDMM6Psycf/8n6JD/5oXct/Zm7wfom3
314286dJJd4v8YqfPFWvy11/eb/ES8ZXmVDadaP3e8LfK4eP674+FE09UOOV
fSXeL/Hfz86/sP7UtU6f+Mxfhk5eXlji9IlXX73/kwfbrQukk520t6vCLx/+
dN7cr/IC2xO/pcqK9T++scLbx31nSdg1Y/C+zpMXeXvifdpM+eKt9onQJjnv
+6CHM8OVf2+uNWjAnXZa0j8sh31zgd3dZHPHbnXmBs573F/ybPDS1wf8vX69
UQ7E73tw5bvnfrA5bEnq29xA/MXCj0KbVzcb5UB8SU5h96o9Nzv90LxGo36N
19niWx/7+quGfzp94u02fd2zypRip0/8qKz9e3b9WmycX+KvtsnP6Dh9q/dL
/LTrs47uN6LY+31+zLDL8sdttEqbzl465Jyd3i/xlwff8cO+i3Z7v8TXvnf2
B5PP3O39Ev9x2XMf5u4q9n6Jd278/qMNG+32fi89rsXtjVtstVOafJP3RE6p
90v8p1urLt86bJ/PL/Ejpz+Yv/HnQiM/xMfcdW+TN7/a5/wQP6pin0MvvFHq
/BD/rvzd04f32+d6QnzDdx/OadZzk+tzyauF3brnb7dtp3fdc+zgra63xOf0
/qJo7jt/Es8CHoCTfpauX6EfQD90jLgRP+yMdJx0+sKeCD//0S/GFTAux3Vd
i5wD5Oz9Ej9RcNIZDjsj8vR+SR/6EM66796szIkF3p542R+vDB1+/3pvD70N
n5aOuqms7ypvT/yigk2VLhu02ttjfYUlZ35bZ+DIpd6eeNdz52Yd+0Su2wGs
93DtmGZHfnXp/dY42oEM4tdFO+A47cbm4e0/6F9jutsN4LY34uHuSD8QX1Bx
y//bGcdpZ64dn+zX5wX2ymCvXK9oN8C/Uf5sf9jMpN1znO03Rjk4HdhPg/10
nPYB8nQ6bD8r2mHH2X5YnBenA3tusOeO0w5gfp0O28+O+4XjbH951BMTvTXo
rYme/8f6ZXvsgyZ6a8MFJx3oue6D/9Ev1qNhXasdcPsg/oDBH7D10V45Pin6
Aybr3bDeTeyDwT6on+D8fBrtntufDPgV0m9Av+HYaIfd32gGf+b5aLcdPwf+
j9jzAHse2C/xr6O9VTsfYOedT9qTw+GHkE+2rxrteRD7H2D/A9uTTlv4ORNj
e7djv6C97BcB+4XLgfgP4FP2kYB9xNie/daGP0a5sX1DyIc429fs81C7tw+W
uNxoDzvFfVP35YB92eVGP2oG/CvKge2/jfuy7uMB+7jLjXTWvrJpVKW2211u
bF+A9hwv8ZfAj+z7Afu+y4f0t8JvpBzYvnz0Q1w+3v7DDd8/Pnm7y4f2/9To
z6i/FOAvuRyI94p+kfpRAX6Uy4F+Zp3TFiyaeOEmlwPbH432HBfxtuhX/K4A
v8vHS3x+9Pd8vOw3s/b+wfNf2eTj5f6ViH6jiZ8Z4Gc6n8RfAk4+iXeI/qrz
Q3xA9G+VjoGOx0HcF8ZHPk3mxTAvvr7YvkGUp4k8DfI0kadBnm5nuF8UR31Q
/Tfov8YphjhF15dhfTmfbL8l6r+J/hv0X/XZoM8a7xjiHV0vhvXi4+L+Uifa
AbWHBnuocZ8h7lN7a7C3ag8N9lDtqsGumsSJhjjRxH4a7KfaPYPd07jSEFeq
XTXY1SB20mAnNe42xN26rxn2NY3HDfG4xt2GuNtkvzPsdxqPG+LxIPugYR/0
vCX5j7/7bUKjD/vN/eexHhf0ONgq5J9/KBzV45rWAwfWcHzoeQ/s6brtLx8X
8dUFp554ecVDjvMcYcRxg55edVKZ2z22X1RpcpWVJx+yr5PnF+Udb1hubauu
GXsdJ50edyy9rf2p+1wf2P5fF/brfkq9vW4nib9yat9JresccvtA/HXBSX/i
wPYnv3ZBWfgy9utxSj3wQ/kTXwD+iZNO/dItbQZklLldZft1kE/1KE/HR0Ce
xElnZp+/q9y0cK/bPba/vFO91dc8sjdgvjJ0vuT83esVOY/c369ZXDps1/2l
nn8mftzid95+tN9fLn/iM34+4roffixV/cG63O9yIx7Qnvlq4k+cc8q2IdNS
4yXeHPxInUBAnYDkRXOQF10uecsc5C2XS143gbziWq3n9PoEyRt7/pByo304
qsmUPpcOTp0XEG91w7DzRr2xO1BuxI8t1+iqGStLXD+Jt3hqxl0nd/7L7RXx
m4FTnsRrgQ7lSTzLzjr6y8zdgfJ0ews+aZfoh1vUH13vBv3x8dJuPP3KWYtG
nbbHx0t8w32Prm/yb79U7IPBPrgc2P7JO3a3ePvpVB6S7WEHXD5sf1zGX8V/
5h1w+RA/Abisd8N6932BeM9oH1yepNMV/FCexE9u0OCPb5fsUztgsAMuZ7Z/
HvKR9W5Y77pOXc68P87z0Gd2/1z10JF5dvjf9S/rUljL46DFexYsK6rxmdfL
sX3+9AMTzzws3+N6tr90+a4LmtXa4ve+2X4U2jOfwPbvNfv2s6wpvf19JLb/
BPxM//yLxwfWr+nxVJvXV77c+qLNUheXOmfhuHje+t5d3z16WdOlPi7GEXcs
aFq5x70f+7jYvt3ugbcMysv1cXm+9/iRzW89aqOPi+0vRHuOi+0Lq+Z//K/F
z/m42P478MNxsf2tOc/33NRmg8+L34Oe/EXO03cucv7p549odV73/fd86Pyz
faLJP9ZXzUw4/2y/+L6H7+tSfZ3WCwXUC6lfF+DXeT0t2/8C+hwv22csq9X3
+M1P+3jZ/lfwz/GyfctaDbr17rHWx8vz4q7Je/1/+Hjp548p91fOEQfe9PGy
fXyvYJ6Pl+2vvvH6oj21VmjdWkDdmvrbAf62j5ftu4M+x8v2F7X49NhP9z3m
42X7d8A/x8v2n2Q+Pe3Ms/PkHZJcvEs5zcfLPPy4MVPObDDoZXlvJBfvT6by
aWy/Zv7E+icdmdD6SbwzuVLOExM4T1wr70/m4v3J6T5e0t+yvkLNnSd3kXcm
c/HO5DQfL9t/kDF25J3dF8k7Qjl4t3C8j5d5wh4zqtdu9+STWpeL9wknaP4w
IH8o7wTm4J3A8c4P2x/9xfqmR3aYJu/tZOLduS+dn4h/E7Zfse71Ka+1lHd1
MvG+3BDnh+1nFtf9fli1IfJOTibeixvi8mT7/n80Oqr5iKbyLlwm3oX70vln
+/qzK97e/MCXyj/eC/oykP8oh99tV9GP6+f/e76Ef7wLNCSQf7Y/45Fvnnml
5gR57y4T7/wM8Tww2xecN6Zu0b/lI/zjPZ8vA/ln+9ptr7uqZ7Px8o5lDt6V
Gu/8M9/7eJ3rf7nh3/Yz/Z2oHLwTtcjzhGzfOPvsyZ0H5Mh7UDl4D2qC5rEN
eWx59ykH7z6Nd/7Z/pijvm++pkGOvCubi3eEpjn/zANclHf3gX43vS7vx+bi
vaDpLn+2r/lu2eHVj86Vd4Ry8Y7QSpO8vSFvL+8F5eK9oOk+XrbvW3denWtr
dJV3gXLxLtA0Hy/b99tXe+LUfy4NYp8N9tnHy/zDead/PPjVYe+a2Ge8JzPP
x8v2T5V/d+m6Y1YHqTsy1B2ZnGsYzjVM7DPek5nn42X7bZPP/eCpf9sTsc8G
++zjZfvPui6d93G1VUH2X8P+6+NlXqL/7xtPvKzPRyb7r2H/9fGyfdGV1Zbk
H7k+SH2Xob7L5NzHcO5jsv8a9l8fL9t/XLznoxkdngmy/xr2Xx8v2y/41807
L+xcEKROzFAnZnLe5OcR4l8Z/CuXD+P6Outf2TH6kk9N/CuDf+Xy8XOE/a0n
zzw6tf+yPfwrHy/bX3ZK+LReixeC+FcG/8rHy/aLTxt+4PPrCv0+qddBXXVt
459O2cd4xNvnNt/7zbLx+9RPNvjJPl761R8dcWLW6ZsGmPjJBj/Zx8v2rcb1
Hzqm9p9B/GSDn+zjZfsdP0+be9G//QHxkw1+so+X7ZeurV6pYuOtymcAn2zv
ONpz38lSf1v4D+DfeE5HfMLoJJ+Oe53GjdHPl3EFjMvPDT3PAPrESecUxBcy
Xue/XByv4+MrxfESJ51rdsW4RvQ2QG9dPsShPy4f9dtFnwP02eVA/Jhzknrr
uMcLtWK8IHoeoOcuB+LVQZ846ZQ2iHGK6L/zTzkQn7smjpe4nwfNjfGRnEv6
ubPYwwB7GOR80+tVKDe2h/1xeWpcIPYzwH663IhP2Ju0e46TzturYzwi56QB
56RqPwPsp563Bpy3BsqZ7VeBH+J+roQ4S+ytj5dy9nOlCVFuxD1euynGd7LP
BuyzLk/i2L9cnhp3yP4bsP+63IjfMz25bzpOOne2ifGOnGsHnGvr/huw/+r5
eMD5uMuT7duDH+Jsfw7iONmvfbyUG/FNp0T5ECedAwf3JONH8dMC/DSXJ3H4
Py5PjWvEfwvw31xuxP9umPS7HCedIX/GeErqEALqENR/C/DftJ4hoJ7B5cn2
5cAPcbZfhDhR/D0fL+Xm48qN8iFOOk1GxfhU/PYAv93lSRz+s8tT4zKpKwuo
KzOpAwmoAzGpGwmoG5F3YnPwLv0ir8Nh+6f2Nnyz7Ndp6uc7nxwv8SeOjuMi
TjqfZ8e4VeKvgPjL5UAccZDLQeM7icsC4jIfL/GzLk/GX46TzpOLYlwp8VpA
vOb6QLwu6BMnnd8Qz0oc5/xTDsT7bInjJU46HS6NcbTE14b4WuVgkIPKzeNH
ibsNcXcQORjkEERuBrkFiccN8XgQORjkEERuBrkFidOdf5GDQQ4qN4PcNB9i
yIfoejGsF11fHp8yjmD7B6Oem9RzGuo5g9RrGeq1gtR3Geq7fLzKj6wLw7rQ
dWRYR5rvMuS71N4a7K3aZ49PJQ9myIMFsbcGe6t1sIY6WLXbBrsdJA9myIMF
sasGu6p22GCHXW46LrGrBruqdthghzUvasiL6r5v2PfVT/A4V/KlhnxpkH3f
sO9rvbGh3lj9B4P/ECRfasiXBtnfDfu7+gMGf8DlpuOS/d2wv6s/YPAHNH9u
yJ+r/2nwP9Vf9XhZ8uqGvHoQ/9Pgfwap9zbUe6sfa/Bjg+TVDXn1IH6mwc9U
v9Tgl7rcdFziZxr8TK0z97pE8VcN/qqepxjOUzQ+MsRHGk95PC7nLIZzliDx
kSE+ChJPGeKpIOcvhvOXIPGRIT4KEk8Z4imXm/Iv8ZEhPtJ4yhBP6Tma4RxN
42tDfK3xuMfvcr5mOF8LEl8b4usg8bghHg9y7mY4dwsSXxvi6yDxuCEed/ko
/xJfG+JrjccN8bjfC2acfs/VV3zaakWq3oN1CAF1CDy3Jd4AdQ6850I6s0t+
3NMkP1XXwXgf579+bks641B3wfN60qn27jk3V5hzQM+FA86Fg5wLB5wLBzn/
DTj/9fMX4jVBn+e8/j071JnwPJf4aNSx8D6O17FjvHIuHHAu7Hkt0umwpfPM
41uV+f0d0jk04a65sw476O8H+n3VmB/TuoKAugKTc/+Ac3+TPJvTkTxbQJ4t
yP2IgPsRnq/jeeKVuS90euejUqfD9pd8OqTP4qtS9WmMB3G/w+nwnK5X8j3w
HU6H7fuva/7oghnF+v4Jvge3Qe+zBNxnke+y5eK7bBv0PkvAfRZ5bz8X318r
dH7Yfvs9BZ/3H7hZvn+Xi/f5C72Ogn4C2st37nLxXYMNWidpqJP0+jf6IS3m
jtvV7ai18h26XHx3YIPWSRrqJJ1P5tshZ+eT+zLkbFJHaqgj1XpUQz2q2w3m
q6EPTp/7FPTBpF7XUK+rdb+Gul8T/df8cJbmh6VOyVCnFKS+yFBfpPXMhnpm
p8978VinXudA+4l1qnVrhrq1IHVxhrq4IHbSYCeD1LkZ6tyC1LkZ6txM7KTB
TprUuRnq3EzsnsHuaR2aoQ4tSJ2boc4tiN0z2L0gdWuGujVf72yP/UXr2Qz1
bCb20OUs9UsB9UtB5sXtp9QvBdQvmdQvBdQvaV1QQF2QSV1QQF2Q1oMF1IOZ
1IMF1IOZ1H0F1H0FqfsKqPsKUvcVUPdlUvcVUPdlUtdnqOsLUtdnqOvTOj1D
nV6QOj1DnZ7T4byMLGpx5bphB/x+OvH4e8j5JJ6oUvuHoRsPBFlfvg8K/QD6
/v4h8dxIx+0G6cy68o6q7x/Yq/xgfRwKwk8AP75fEP8F/VI/SX9q5kUNx7fe
p/rs/pLURQfUReu9xYB7i76vcf/tgXpI8uP3L1CHyf2Ueb9b4r7g+yzzYwuS
clju9GnfpqE+kPIhHn9T/RK/HXWM5N/XdZSD+o2+rsVvNPiNzg/90lNRXyf+
pMGfdD7ZPv4eVL/R4De6fIhHOaTq/fy7J7CrHC/pb0Udo/h7Bn8viP/m+wLr
VN0ONP/m72Of2e5yY13c+5fcVPeYY1LfReU8xrqvPJ9Hf3+y6/3PNn1/pda1
4n2A5fLdrhx8J3SR5p0C8k4h/X2AHLwPsFy+q5WD73im7iOTzrNXXz9qYZfp
ck8/E+8k6PfaMvGdx3HOD/OQFU9runzA21+F9HcSMvFOQpZ8fyoT32Ec7/yQ
zscPXfpexm1DlB/U9+r3PTPxva1xfr7PvN91HU795sIfxsu7DZl4ryBLvguZ
ie9hjfc4nXQ6NLg90fH5CfIOQw7eW1gu30vNwffLFjkd5uWu3t1xd/GHc/U9
T39vUN5XwXej/D6j+4G8dynvqfr7ePI+jOF9GJP7qn6/Ut7Z83dZ5Z29gHf2
gtzT9Huvcq/T78XL+4r+fqm8r4jvSvu9Wvf/eU9W7qX6Pfr0dzBS+p/+3b0c
fOfX9d/PQTAvjuu6kDqogDooP+8gfhlwmXenn/5uRmpdpH+3LhPfb/V14ecU
0EPHdb2I/gfov9QlZqIuMUu+x5qJ77GO83GRTlvQIc5+T8B6l/XifMp4fd3J
ePGdPl93fu6AcZnIwdej2B+D/ZF3RTLxrkiWfHcvE9/dG2cyLsO4TORgkIOJ
vXI+RQ/dPoge4vuPbh/83AH6ZqKfbjfkfgTeD1mu53H4/lrq/jXp4zzORG8N
emuyLyg/nj+X++AZeo9b/IEAf8Bk30e+52CQ/R1+zl7dxwP2cY0TPb8hflGA
X6T+T4D/o/dHsN+t1Tg9IE6XfS2B9bvW4022f+Gzoz45+4a1ov8J6P9aj3co
z5die9HbBPR2rfqHBv/QxM80+JlB/EyDnxnE3zb420HucxnucwXxww1+uMm9
KsO9KvW3Df52kPtThvtTQfxwgx9u4pcG+KXq3yLe+kvmJfUekdzbNdzb9fiC
9nkW/Gq2J56V7DdP/JBs6MlClw/t3v1HtxhU+MgM4ScberLQ6bP990+H4woz
Zzh9fS+a9Glnzkn6jcN939f2pM/2K4t/OuWt7cPF/8mGfBa6fLje30n6sQlp
n9Jb0XODnuv7VP4OldwjNtwjtrN/2PXZ3Op1/V2y4U1nXTf1xl3hMOTziS+c
c/u3ez/+NAz//uVfyl46yvEu/1g0c9/cEmsr75tVxrtkyMN7/Jgxc/aeN2a/
bLcm8S2Odxx66uL1j+2hXjUjHue/LHSI7f09tEPNc8vbnhLm/x1/+Yemxc/M
eMHKJ/k/3N9Dy25TvvvZDXfZXfJ+WiXwifMLj0PXZq+r/c3ZA8M5UT6Od31i
4Qc1Fu4JlBvjjhWVVx//7M3FLjfiaxMzLmx14COXG/E2Y9vfPOSOHS434qPx
rhrHS/z2xp0rPTJoh4+XeMa4pSXr9z3j4yU+sODujl+t3uHjJT4S9Mk/3097
a8CF4fV1m51/4lnjH3v95hnvOf/EV+6uW7VlzS3OP/G78D4b+Sf+47gTKrZp
7uc4jpeb8czuVuc+5fwTH9FgVOHG3lucf+J3gj755ztsXUo6f3jKTwXOP/Go
t284/8Q7J/W2wPn37y/gnTfyTzzqW4HzTzzqWzfnn3jUt/XOP/GKoJ8u/wTk
v1zkn4D8XxD5JyD/PJF/Imzf0iF/b8+1Iv9EyKi8/pgnv8sT+Scg/04i/wTk
nyfyT9FP5z8b/M8W/rPBfzfhPxv8zxH+s0F/If2TZsT/RP/p48oOPzzz6bjX
es6WcWVjXLfLuLIxrjkyrlS/HJfac45LcY5LcY5LcY5LEY5LcY5LcY5LcY5L
cZkvw3yZzJdhvkzmyzBfQebLILdAe078pzgvOo+GeRT9zDbMo8k8GuYxyDwa
5jHIPDo/sr7s8kFVxxz2a56MN4HxviDjTWC8eTLeBOivFT1MWLRvecJ/Avx3
Ev4T4D9P+E/RF/tmw5L78noT+2awbyb2zWDfgtg3g30LYt8M9s3EvhnsWxD7
ZrBvQeybwb6J/Asg/y0i/wLI/z2RfwHkv0XkX2DYX0T+BZD/FpF/AeT/lMi/
APLfIvIvMOwvur/bg+WG1jipZrHJ/m7Y3032d8P+HmR/N+zvQfZ3w/5usr8b
9vcg+7thfw+yvxv29yB+ncGvM/HroD+fmvh1Br8uiF+H90sPqD8G/Skx8ceg
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
gwQ51zCca2hdhKEuwqQuwlAXoedThvOpIOvOoOdBzqcM51Mm51OG8ylfjzif
MpxPOY7zKcP5lJ43Gc6bdN05P3LeZDhvMjlvMpw3mbx3FPDekZ5fhJlyPoX7
yAH3kfVcI+Bcw+QeccA9Yj0vCDgv0PvdAfe79Xwn4HzH5YZznDBM6klwjhMq
Sn047nEH3OPW852A851UfTLOc/F+kZ7TGc7pnD7eHTK8O6TncYbzuNT9O8zj
TnyfS/AAPMj5e8D5u77TFfBOl9bdBdTduT18Ce/DPBDthr63FvoVt1/9Zf4y
x3/HuysntC+edXqFpc4/v0u1HN+rknvZhnvZvo78O01yDsXvPX2C70nJfWfD
fWfXf6XD8fL7AtXvOP7PI47fGdLPKZaE0x/+6s5yeSv1vDLgvFLqgXNQV5zw
9cX2x+O9xPS64hzUFS92Omd9G98PfBvvB6afe2ai/nmi02H7Z/GeYXr9cybq
nyc6nZp43+99vO8n9HGuOtHtANt3xHuDQt9A33Ge2y7A+34yXsN4Hed9vb/W
Tmt08VUFei8A57ZrtU7J3ryx0vs9hm3W+wuG+wtur/A+XugT2we5Zxdwz87x
S1F3tDfyI+/05gbcc9T3DAPeM5R3lXPCMMyvvN8Y8H6jvGOcGS7HfFHPC3Fu
Xijvk+OdxoB3Gr39l5ue+/e/kZPq1xqxqekTv09Kf8c4E+/kT/R+8R6m4T1M
eXc9E+8qTzSh3wz0m8m7l4Z3L034t8L/+i53Jt5VnqjvixreF5V3+HPwTvVi
p4+6Atsl9PGOqOEdUW+P+gTbIvdASR/5ExM7E2BnXP6s38A7wLJOE1ineeqP
BfhjQfyxAH9M1m8C6zcvVc8JOtddX+Gma9blO046Pz3+yvjKs1f7/OK9Wbsk
tnd5vgA/8MfYXu4jJKxI5IN3ZQ3vyprsC4Z9Qb+7YfjuhtMnju9upOqggOP7
F84n5Yz3mXUfCdhH9N4H7NIWp08/E/WcjtPPRD2n1p+EvtjXiP+Bfe087Gti
98LxlT+8/olrlzvO9hPyay4f1n6pvmMPPZmj9jksy8sdmlNrpuMT8a5X3TF/
P7emU5aMNxt6MieI3Q5VH24z7a2nZzpOOhk1797899Asp19O/mQ/sveS36MZ
7PK5Ae9udRn+x6VNXsl0eSod2aes2c7//07NYG9POgVnrJkyPjdT9pdszOMc
x9tgXd+54aq5Z46el+oX72J99MXgxSumLBI6CdBJ1QsxPsI6MllHhnUk+1c+
9q/1jjM+Qh2s44yPUAfr39nke+DVM0L7g4cO+Pedqc9ffFfz6ZP+rc/EL+a7
i1UffPeGsl3+/biTsX8dge/0sT3xF/A97k7J73/VdLz7tefe1fHAH/59W+LH
jL1s61WZRf6dKeKjyz445vTtRbYk2f5gIP7l8OE7SurM8+8zEt9cY+/gyzes
9+83EWcdMr9fRrwE7edH+o4/Bvr83ivxYeCH358i3gD8PxDH6/h7GC+/k0i8
QrrcMlRulPMK1Bsfnfwe6GqXM/E4X5tczsQ/ziy45q1m013OxFsnv0e20eVM
fHry+2UbXc7Ee74ytem4BTNczsQ71H36z3a5q1zOxFkfRDkT74b2lDPx20Gf
ciaeBX4oZ+JtwD/lTPxnjJdyJl4lXW6Ofwm5Uc6NcU5RPTkvS1zOxHsn52WN
y5n4Y8n5/c3lTLxuUh9WupyJj0nqz0qXM/Gvkvo22eVMfGtSPxe7nImzvp5y
Jl6K9pQz8cdBn3ImPhz8UM7Ejwf/lDPxDzBeypl4pXS5ZajcKOfTsC/USLaf
7nIm/kqy/QLH47gHTIq/P06i/Nn+ySQ/P7v8iddP8j/X8XQ63zXjvLD9L0k5
zPX50vacL7b/JinPET5fxIuS8p/m80X8NJ6DAddxcR7Zfg/ocB6JP4V+OY/E
R4F/4so/55ftT4R8iGt7zjvb94WcOe/Eq6TPY8b/mMcMHS/ntwHiux6xvc8X
8RqRT/+eIPGf4nhdnsRZT0Q5EP8O7Tle4rVBn3wqP+TzRNB9Nuqz80m8Zlwv
zidxrC/nk/iJiBfJJ/GhaE8+icOeOJ/KD/lchvubn0f7RjyD+CDgXI8NwUcV
fLeX64v4o3H/8u+qE68V9zsfL/ERcX8MXC/EP4/7qX/fmXhh3H/9e53EmXfk
uiBejPZcF8S7gT7lSfxH8EN5Ej8W/FPPib+N8VLPiR8O+VCexJ+L+7XLk+9b
Vm9Wubd12uLyJH7K1kmXHr9qocuTeNFRD9720I7U99yJz7vvuSPz6pS4PImv
+zNnab1zEi5P4l/XuuS6Fqs2uzyJx99dLk/iI9Ce8iQ+HfQpT+JzwA/lSbwY
/FOexC/FeClP4hUgH8qT+NnRz3R58vyuRvweusuT+EfJfX+Jy5P4LfjuPOVJ
PBvfr6c8ifdI+iFLXZ7E70n6Ldtcnsslf0h5En8U7SlP4reBPuVJPIAfytPb
g3/Kk/iPGC/lSbwi5EN5Eh8c/XmXJ+vwq/z85VXPzdjp8iR+qFeVW0o/X+by
JD76hZLqfzVIffeW+ISGq2p1ar3P5en0643/qM2TeS5P4kcceVeLsQ/5/aZJ
xOPvAZcn8dpoT3kSX1M30qc8if8CfihP4uPAP+VJvP7zcbyUJ/HykA/l6fzH
uMkyN+yv1PSpWh5Pnf/jz0XDR82wx6+rUHTh2CMdf/7IxeWbdfwL35mt5Ph1
px9WmH3XfjuqxzWtBw48FIi3/7b6bz2nF9hpXe+r3rRpseNTe5Rd/vq928Lm
5LgmOZ6x4vbrF317IPRLfld3vxH/65Gf+nR4eI5dmfxucoUM4vnN/kjcMeQv
u2D9m6d0Kazm+AN9Vi3ucOF+q/3LpG/mvlfT8epn7z23VcE6e7/nr027nHqM
431a9jpUcPr2UOWykdPLwrGOL3ysX8uBrQ4EfDfZv4N8sF+df92WuyfsSMp5
aWBcefW5F1lOz5LwSJXHOw7Mq5dB/NB1u4Ye/nEJ9O0Y8ceGTnoQepuOXztp
8X/19wY3W/Nf/bofm+VCb9Px/s1WQm/T8U/xm/sf/ttM6K3yORd6m46f2WzF
f/XThjSb/1/9sR+b3Q+9Tcc/aZYPvRX+J7X9H37XWOgt/Zz7W++vuvepL8KT
0Fvinzz4yKJXH84JvaG36nfVht4S/3rxJ/3WtfslnAW9Jb5r8xWHf3/jVGtc
J+ot8af67buz97sL7EPoLfGrh/zyRou8IeEK6C3xLkfUm37DsJxwHvRW/bda
0Fvi2x44r8P028eG96C3xN95+u2t2yZOtcrQW+IzJ4+ts6XfAjs6Oa4a7r8N
nTX7qyOWLg/Hx+9KO776ynuPGrhxZdgXv08diJ/+d+vvnv9mtX1xzp1fzJ1b
3v20nQ1PO+n1Jnnho/j9a8fXPf1o8bzfVvp6If7oq1ePrf77auO6oP92U497
rnzw0ULbcf0zC8qsjudn2v78xDcfVMoPPV7rfVWXoUc7fk6DjB191m2wyP9f
vu6e/67t17PHTA1fJfncZcSnfzd00rxpeWHa5188PrD+Yb4eP/x9QcV2T260
1sdc1nXgXbUdL6rVbnvTu6aHr5N0anveJuv5nz8vbTQf9FP4e8CjfTva8Znv
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
SA9Zn/SQ3aWH/C8ksURc
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxNnQXUVcX3/u97T9fFbkUxsbsTO7E7CRNbsVAUMbCwxRYbFbsDE7DF7k7s
FpP/83mf+a7ff6171+wzZ2bOnHPmzOx49p55+h245QHtVqs1qmq1IqX9ilZr
m65W68u01VohabWW0/9v5Z+atVqXK38mpTPFOlbhf5TfR5UvUv6aoudQ/hnK
nyr6+LzV+k/psWpnLuWfReMq963aX03khk2rta7qXqm89XW8vujrRfcV3aju
ejo+TdeaT3XPVd1Y51ZRX1bSPxKdqszaKnOKykyv/7+qd4yu1UftJzp/kug7
RW+sMiN1fg3VW03/SufO1PHNSudR+rfKbKK6m6g/C+taF+pamc6dqvZTpaeo
nWEqM6vqnqB0BZVZXv8eOnebjjdQ+2fQT5XbTe2MU7n/lL+56NFqc2mVvUxt
1ip/ttrsKD1HZU8S3RY9TPSiKjNKZXIdz6q2upQer/yF9N9T7TypNoerzTmU
nqj0fNWdSWUu1fmybLV2Upltda31dH4d/afXub11fJTye+p8j9J9u055J6t+
T5U5Semp+vcSfYrS9/VfXGXWU5mNlbeh/jOrnbXVt+vVt1lEX6Trzqb0Kl13
1tJ9u1HlV1OZq1VmBp3bXPU203920Rsq/yblzyH6NLU/v/JHKL1ZdYar7nxq
YxvlbaV/T5VJdLyd8q/R+b6qe6vqzq38S3TduZRep+vepHPHqsw8Knu58nsp
/yblH6T8U5W/gPLP0DUWUpunK71F+WcofyHlL61nuwDvTeXPUd3pRF8oeoLe
4b2ip9F/XdUp6K/yz1SZUvQZojdSmbGit1Vb34peWf8hOv5bfTxS/++Un6n9
UxmbSk/Q/1flHai6he7leJX5jfGheqvr/7voJdW3rfgs1LdVdH6A6u6h/5Gq
+6nyd1LdH5R/oP6f6fg59edg0fsrvVttLKf/5/RH5XZUva+Vrq7+D1OZo1Tm
Xf2Hiz5G6Z8quwZjVeXa9E9pl9JHlLeq/j+rnSMLj+2fVf7qxvcaq2/vZ34+
CzI2dX6I2vxJ54bq+Eel++q6h6vuZsrfRHUfVHsr6f+9zr2p4+OUP1jpnap7
h/4nqa0fVXdoFw+t1XpV545WmUOVTtR/f9H7Kl1Rbe6pMj+p/aNV7isV3130
P/ofybNXerv6d6LSvTsal6KP4psRvVbh+WQO1fsh9zd4ltJNdV8X6dwjKjOt
5rxpdf440Rsp/wLlPyx6fdHniX5I9NY6/6fa2Urp+fqvKvoZXeNGXes4pXup
zOxqZ2buR/Q9ur+79T+f76TxfPav2rpM5Y9U+ctUZhmdv0L9aVTmUT2ntfT/
S+XWVd5hyjtY/99Vdl+lvyp9Sf0erHMHKf1S1xms/L+UP0T0t6o3UPR9amMF
/b/W8W88S/0nix6uMlOUHqYy6xQew72Ud5/6c6ry9lF/eqv/cyvvXJ6J+nay
6v7JPKy8s1W+VrqmvqfZEs9fi6qdz1TmMd6Vzs2l6w5Sepn+m+j8+2p3A53/
Svkr6v+N2vw6Nn1mGBuX6ZpfKu8L/ZfV8SU6nknX3E/9WrvWGFHem8q7VP85
lX+w8ier7FfMvzq3gMpszphW/j/KWyNyfj/mM6W7qB8XtL1GrK36l+p4HdHr
iP5U5Qep/NI6niJ6uch9WFr3taTSI3QfV+m6y/Hc1P4xavPb2N/8x5W/3yuV
bqJ6P4peRf8fdP772PTstdfFD9Xe55Xf79VK/1G6pv691e5RavOT2H04WvRn
opeh/dC3pUSPa9z/T9TOhnrW3/NNqW/XK91C/4fVTm9da0vR66mfK+o/mu9Y
1/pJ7fyo/1Y6d6Ta/0D0YqKnE72v2l+UZ8Scr3Sw2hzV9lq5g+rPW3u++03n
U5XflvVLx1vpuFHaX+UPVv5NbecvrvJDlL6o6y6gMj1ED1CZpZV/rOiXlH+K
rl+JnqD2b1E6TP+O/t/yHJVeo/TsMBddLvrxxv2ZovYuanud3VJ1f2F+0n9b
3lfktrbRf0fRC0bOH63/ZszXPGfV31752+n5bcN6EvmZ3Kz/1vo/qzJL6bld
ovQAXXeu2nzJF6p3Ydt8yEY6N3dtHuV75T/WOH+y6Ecbj6tPRY9hzWt7Tt9d
fXxY11pMeb8pbzX9e8HnqB87wQvo+c0lusUz17M6qXJ/11ZfNtK17ha9kegP
9H9R39P++jZ3Urk296q0k/kbHaxz86qdXPm7Ke+tcF/r6RrzqU/vqA8P6vxC
oj8Q/YjoU9W390SvqzIL63halR+outtFfpa8l0t0vIHOv6X2z1L5j3RuQx0v
qXa+Ev0k64vKbcfzUf75fMvK35TvTvfypPq2vfq+FDyDyuyn9j5QOi/vRmX6
q+wOovuK3gseTvSeSi9hrtC5LZV/hY63UPqJ+rCs2llQZQ5R3mH6Lyz6UKWf
KN2JZ65yF+u6r+i6e+q6e+hcqfzdlV6k/zo6/6ra+UTnplGZt3Ufd7XN636i
4+9Sr7G7KP287bmE+XdQ7jV2N+V/mnnNPUrpIbnXt32U/0fqubaf0gNzz8ED
aCfznHyM0u913Z7Kf0fXfaDtOfwbHf8VeW5nHv86zJesbf+m5in2Unpv2+vg
lzpeWe3vTF3l/xqZH2Bd/DbzvHqs0t8yf0fHK40yr9WDmP9r83jvqg/fR15n
4TMOz73+H6AyP4f5DP6gFXtdZo3/tO05Ej5j38Jz4XFq++G21/EfVOZi3eOh
auNSjdU8M79zsI4jvZdKxwOVv3xhPudH5fdT++PU/uI6Xomxq3TFzPPBe6JH
qv7f6vNfok9QG2+rbKpzfVhjIs9FjOFDmJOVvq3rD6l8/iPRr6rMv10+967o
grVA9MvILkpXYy3n2StdXv9I15qidKjamKj8b0Qvh0yivt6vvvykb3YbnVtG
eePV/psqk7B+6/gI5a/BdZR/tOg16aPod9r+vtZn3cz9fV2se+wV5iHG6Jtt
f7/0jXmSb5bxulDub3kUzzn3N/0mzy3zfb8uekv9H2XNV99eV72utvtxueg7
uyzv9NUcdR3yTuV5/o4u87W7VL7v59TPx3hvamcVtf0c71z5KzCfKX+M8ier
/Q+VP124l5XUnx2UTkbOCt9Rm3GitqZVGin/LbW/szKvVXpVWGcZuyPV1nQq
86LauJx1j3lb+R8rnanteWaa2tc6V3UnK7+36M3J173MIPo85X+VWmadoHa+
ibyWMW+8pDZf1D/jXtte05kfPlbdWURfqLoHVebl3lR/l1F/fhO9sv4DlL8i
bSCLiF5W9ETR/So/jxdEvxR5nKyi//6V09eVv2/lNl4VndV+F6dWXmt6hDl5
vPp8NfO8nvMLaudXnqX+m8DLMg+pL5+HZwI/cFvbfWaOfb3t9YL3e2bs+Zw5
+jnRz+r/O+86c3sT1N5RPIfI9/mq6v0R+jxrZN4JvnaiykzQ/3PR5+rbXErX
P0fpS6yBXR7r1+j5Lqz0brV5R+57fFr0qnqeZ6rs/fqu1xQ9krlNdD/d+/Yq
85mew4y6Vl+19RPfndIfwrgapGs+Ffn5tivrCq5R+dOVd0mX5fmjdY2llRa6
p5HKv6LLugX4usu6XOfzxuvp56r7XeQxyZw2NvfYflJtTMe6pDpf6fhQnlXk
d7xB5u/7cZXZTH1/Wvm3qt6sufmHc3X+VmQBtbeI2l8583p+n8o/peNxSm/W
/fZR/lLKf1jHH7e9TjFW4bl2bHutOjzz2PwsfC/bhXVn98Lr15U6f3HstZU1
79Hc7/w9ZJvM38Q76FIi83vwAffnnuteUf4DorfkHOtD5jlpkvJ7B56I9XV8
7u/gC+Ufr2u9Fnmemjs3P3mB6j2Re33+WGW2yTxHPif67tzz6Auid9X7Wo11
Vff+uJ7DA8jloqfPPXefzb3qvl5R+/co77zY8gKywQGZeYQPVWeJ3PzDpcrb
BT2B6FlZYwrzCQcp//22+YeNVecNtbN92/LGzoX5h8u5lvrwiJ5lqnH3jsoM
VFsL6FxVe84/C15e73EflZlTZbdFRousC/gvt45ilNL5de4UlRlJGX0HvRPr
FzZX+dtVZh7RS6mdHVUmh2dUH9ZWmYuVrq4y16rMjCrze259yLlKr1X5XZGl
VL6Pys6ZWO+wospfpTLTir5e9bdT/nVKF+QbUPmzla6KjCd6ks5dq3NbKr0a
nY3OHa/8EUq3UN4CifUjm+g+5+f9Vn6fyAn/6XgjXesWXWtO0fMiL6vu6UqX
ha8UPVH1U7V7J9+Y+nyV6E2Vd6XSFVXmMJV5XsftwjqZS1Vm7tJ9O0npJjo3
b2Ld0A2634HKn1n56+i6N6r8rMr/K7ce6QKla6buwxuqU6vNB5V/rfJ30/Gi
ieeaHVX3fuZ91k21dSHfvdKF9T9X9HlKc9W9V2VGow8R/Tpzi8bDNPDoyr+R
bwiZTvkPIiPDA4teg+9D/49Fr6l0feUvKvoexjHfo/pwI8+g8hg5W+NoL/Xn
icjf+VHK31T1dtCYn6hn/EKXn3vv0jzLueia9Bz6iZ5e9Ppqb+7EOrvdlX8Z
cgN6BmRY9fEC0QeqzfXU5jain1adR9WX/URPEv2U6EHoGXLP4Vuy/rOmq/1V
dX53tb2E/kvr3GFq5wrlL6f8xUuXuVBppPKR+nqazu+ishNVdkH9b0mtT1tc
bfZV/kNd1t1tgPzSZd3dKerneKVrq+5Q0Y+wjoi+WnUPUN2F4XPV/hM8T+Wf
pDJPil5L9FbKv0X0wqLnTf0tPKLrvKr8e5S/rPL/0v9W3rPS2RPno2e4Us/7
7i7rSU5Um4/z7liTVXec6FVF9xd9n+jlRN+u+5svyBcfNl5zz1F+p7a8+Zro
z/kOwnxSNpZJR6KLUH6vtuemXXPzlmcrf7zyvwzr4Bsq/yDfrvJPUJuPil5N
9Bui7xe9vOgnRN/AdyZ6n8rvpI/qXdx2P9EbL5j6G3lC97pjYz5tKZV9QXXv
Er206OdVfpLoJZh/Kn8HF+r8HpXzRoseqHf0cpfH986V+egrlH9Hav3qkozR
xO9iXt6ZrvUs71Zlt2b9FT2f/htWPn8mfUeXp7qLqu72KvO08hfS/3Sde0bp
+ir7UOo1cTmV2azyODqPb6Ty93GN6M1U97Eu629X0nUnKF2H6yZ+buh7R+vZ
PtDlOfDY2mNvJWTwxM+ZeXJE7bG6LnX1X0T0xcpbO7XM/rHK3ptax7sM8mLl
+WN15unK6/WlKv+snudzXa6/q/r2fJe/+fVS60w+Vzsfqc4SyIUd8+3wn8/D
Syg9Uf9pkK1zyyPIAq3a3+NqpfkreMJ7lf2jzt2HHkVtPVOZzzpe6ZDYssYt
LfNmtEO5J3XuO3gT5Aa1dZPy7uT7Vpt/K/8BHc9VWJbZLuh/jg1z+7OV0+Ho
zwq3v5HKHB1bfrm55bHEvHc2+mjlvyv6ctH7I2uIvow+iN4istz1vdr6ROme
fDuFy6+qNlfPPL/do7zbG/NBHT2rJyrX+4YxrGt9yLercp/pOVzFWlD4+fKc
mcv2RJ/Q5XPrpC77KXqmzPcKv3EtcnPbPO3TldNjlZ4Ym1e/C/lBdY5Rmqj9
5xKvU9enXruZi47Q8bOiD1XapTITEq93o1Ov6cwng3U8RvdyhfJaupfxKjNI
5L96z68o/zfW8I7tOHybu+jc/JntKSNTr+8XKZ2547HImGTuvp5vXunfSu9o
zBv26Hi9Zu46CHkfmVb0DkpnK3xfW6jtjTPP4WOVXo2+Qf/vu8w/I5fdqnNT
K/PSy5fWdx3Z9hj6Vu3fpvM91d7Eynw3+kDkCuQLdEnXqOwvyr9Dx5tnTpEX
Togtj9zZMp/8c5fbgn9gzj+wZTsa89XOLfPwk0XfGORD5ER046vq2sOVH2fW
j+4e9AmjE+s+0UWjWxjG3CJyb+WP5BvT8dCCF6rrK70q8fl3cuulaXMRHV+r
/CWVfqD8SPSmkeuiZ+vXtg3m/qBjQRZNVfcU5tKW2z5c5ffRt7tnYvn0cJ3r
D48VWzexrK69G99BsL/sKpouY3PZvavbZNFt96HMjMgt6IZ13F/Hf6Lnjqx/
ngneDz6ssk2kX5d13Ieo/VXhveETY9t+qDtAfbge/lX0PUHnw+P4GTsfYzm3
veBk5i4d/yJ6j7btKa/nzk+QWSrnHQofUVm220/plTyTto+3z6xvvA0bEGun
8hZnnOTWD8yn/D3QS4u+tmV5kHXwBtHTFc5fB7kk83yFDHWVynzd5eOvEo+L
2VX2v8qy5BLqz2G6v09ZI3Tum7afD3a0xyvLZ+hg0bX3V/7Nle1lxyp//pZ1
ZUeJnqdl28IubevKLk+sW8XWhj7qeNZYHT/Utm5qFtFniR6g/y1q87LEbbyR
Wxd3BOtUy/r13fQ/rss2u2N4DuhECtP/qf02tlH142gd7yX6jLbpl3P3c6rK
XKj8WVXvFeX9lJufWSAzb3wZtlPNAz9ix2X90zj8SvTZou8VPbi2ze42pUfW
tsXcrvRjlTkNnY7oEaq/LfKe6ENr2/tuVfpTaZ3hUTret7ZekWe2X20b5b/6
j0Q3pz4cEfLnC+V/KK2PJH/z2rrgLbDDqHyFDhh7fW0b381KR1e2Zcwm+ufC
eu95RF9RWdc9a+21jPVrQdG7dDzmTmZOCnbz3yrr0NGl/1rZzoG94xfRJ6v8
pui8VPcM0Xsg14resbbueCf08Wo/Rr6urX9HDz+n6EG19ZbMMWerbqn+H4Ou
pbSeEnr/2nbMKLZsiB38pMa8HbzHXqJXqMyfvKOy02JbVd2bE+vR0Kc9Vpvv
hK97rTbPj239RKXH6PgidFKi51OZG1XmKeUtKPom5nnlLyb6Nta32rZgMAZH
N+aV4ZmnIH/oX0d+tlt3vF5eojInip5fz2Qp5ee1dfFF7ftijjxWdaavrbed
QenvpfXA5B9U2x49VukBte2ztyidqbbue2but7ZufTr0r6r7R3inj4p+TvQ/
8Lql1/t/RafwIWE8zCg6jvwu6tp6/0ZpXNs+kSj9Nfdz7q0xsXtl/oR2Nq4s
T/1dmWdDphsBr6Jn81qXbfwfIXMjWxXuyxvKH6Xj3fQu3+zyOeQyZJbjRN/f
uJ2t1OaHut5LzPFKX08sh96uZzqucvtfkSp/mPKzwnacF5V/ZstYgrHY8zuW
uV5V/gUty4aviD6/ZZ027Z8l+nWV/xO5t2PcCOOkv/IjcA9K/9S1FsqMozg/
4BCQIwYw3yaWr29OjXm4Bl2n2tkh8Pzn6NyuiWUE+LqycH+WV3vvJT7fA1xH
YnkZ+Rdd1p1Ka2TMILfyfNCHwJ8PbRmbcaPKpB3L4PD8J7EGlbZ3YL/Fdjt/
oA9VuYcyz4M/VLap/Kj0YOUnaudMtXeY6CL1HDxY9GPYglTmj9J2B+x+23fM
9xxe2eaH7e930Ycrf1xm/gC74KKhPPM48zRt/lTZRvJz5XfMu2Z8HsV9qu53
9EvXeiLMOdsE/v80tfVW4rTSNd9OrHtBD4AuAlnpZB1/GcYkY3PHxHIEY3Lp
xLpj9KF8V0PCvPKgrvVk6P8toh8P89sR8MrYrEQfKXqC6MmV8QbLJsbeXIsu
PsyBedXqxkzdgEwQbNyDdDymMkbgkNL25fNV/jN0Eqnljx8S6y9HB57wyECz
3j8d9B7oP57LvOaur/TlgHMA7/BiZr5xs8zzNPZXsFAbpeY9v0k8Z2MfBcN0
KO+mbZ4Vey40ssD6qfmFLxPfN1gCMAVnKj1XZZZt2Q5yguiJyAa6/yXBrHSs
txyu/BeVfxd9VbqIzi2du/xfavPvxPLZMspbLnf5/5T3jq59attYgru5N5VZ
PLdNAn7wLJV5uzJOYJ/SNj3KY+e7N7ONC0zNtV2+R+y/6Ju78QQtvzdsVdis
WK/IRxf9deA/4UVu0DWWh18uPHfupf9S8IqZv51vlF6XeTz/qrRQ//ZVmZsS
z6PQK9JOZhwC9jPwM/B7c+n498zXugKeMfOz/DPzvLt323Xaua97fWL8DzzV
Asq/M7Pde8HceJU9lb9Yy7a/gW3z6PCA2IrAA6yVen79MPF3ST72owu6PPZW
aXlNY5xgo2e+vKTtOZNvBxqd5AKp57bH1c6/ma91NXrGxPzaavDd6v+iUdDz
Kh3atn0Lm87xop+C/898H/uo/C+Jdb+9dS+L5S7/e2L7J/ME88uupe/3AY2v
7QrreQ5UG4sX1hcdnNmegl3phZb1SOif3xa9fO02X0bG5VmpTwvpuNY19hA9
d9t6+0WUvodsk1hPPY+O16w9Jt9Q3V1q6xBeZ05j/MXWUfcqbNPcFXtQZZvV
mayDpb/lNraU3Lo7bHzo7aHHwavpeL/IWI6tWMeVTmIt1X0ugj5X39HzlW0F
IyrzS8h6d+n8r4nbWBDcQtvPlmtji0RnPl7ndlGfHmvZjnBj27wWx9ihsG3x
3Hct3Id9cts+sNO9q/zBav/d2M9q99LfaQ/18X314/S28TzYxqGxl2O7Zj1h
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
            "]], 
           Polygon3DBox[CompressedData["
1:eJxNnXfgTuX7x8+zzvM8ZzyFSpoaUqm0o6HsEiUaoqwm33ZpSJLKjJC2NFAa
SJERkVDaQ1vRlPbe4/d+eZ8/fn+cz+e+zj3OeM657+t6X+/rOjv0Pb/Lefkg
CE4vB0FR/+9PguDbQhB8ovJnURCcq62ByreUgqB5LQguk3yO5BWSj5I8Tf3O
1AD/aftX5X3Ufyf136USBNeqfmY1CLqo/ZGqn6XyFLU5TeXftf2m8olpEPRQ
/ZMabwu1n6p9p6vuLzaVb9I4UzRevVwQTFD5Bm23ST5BfbYLg2CG+t2mur8l
15N8qc7vfyov1/4/NPaV2tdS8u1qU0/jnaNtT/VvqPHPVfkUtWlX8vjN4yAo
6ByP0424VH32VP292nqp7bfavlH5OR3/e/XXsMEE9btP+/qo7idtP6p8lPo/
pfqxXLPKy9X+C8lrJHdXp20lbyX5CrX/Sv1P0PFb6X9dHX9vHX+2+pystker
/jGV99H1dFJ5vMb+n+7Phep/mfp/pTYXqLylthkqH6M2DSjr/sc6//2oV/kd
7Ysk7yz5Px1/io7RUW3raX9/jfeLjtFB8liN30/y09r/qcZ/U+27qX1e+6/V
ud2oNk+p/Krq/1b95qr/TvXbS16k8nGqb6hyM53vsSrfxL3WeDvof1fVH6V9
Y1Qey/1W/45qe73qf+b3kXyujvFr6ON/JvloyUsZW+d3pe7PwerfX+XvNMaW
Gu9q1X+v8j3aenIvtW1Q+T/1OVrXe77aNJE8UX0P03iHajtcddO5j2pblRxJ
vkhyI8l7Sd5f8ky1P0fyrRp/M53Pk9r3vupaS16o8nE6/yPUpia5se7lR7rH
x+p4DSW3k/yI5IrkvXX88xL3f0/9V0o+XuP11tZC8oE6xkAd++6Sn/exnJPq
5qn9m5yrxntC5fvV5mzVFbSvIPkSHX+cxjpMbZfr/j2g/v1Uf63qa1n/1So/
xW8i+WGdQ6jzaSq5rcoPlN0+VJsyv4H2PazyvmrbqebndYPkzjr+MypP1D0/
QMdoof511OY87pnq10s+V+Vpqj9J9VdIfkn/L9T5jVS5udo+o/Fu1/E21fF2
UZ891L5JxeVrte9xfgttDVRuon37qO4u3cNDJf/CPEB/nV8TnctU1e0peZLq
m6v+a+YRyZdo/5Xq+52OebHKC9S+ka63leTvdW5fcLxM3lx9ztd57cj90xjX
IOt8T9B5b69jtNXYj+n5DVUewblq/KskX6T2q9TmX7U9U/v76Xh1JF+l8afr
/41qf732baKx+6n+f8xX2j9Y9RepT/eS7wn35lxt16h8AM+6xj9D8tGqr68x
Dov9vl7Fu6A2F6nNnTrH+jrX3TVmU9XdrTE7qX3/bI57TNv5qr9bfbZU+1Ya
YxuV91P5GI3fWP03kbxcbT5Q+Swdr6P6bKV9zdR2lK5vqMZarX3Hqv2ZarMr
77fan6Xyct3P/XT/UrXfWe0XqH2k8hidyx5qP0v9WEDG0EfHDNXnV8mj1KbM
76vjdVabrSW3VP+9Kr6W69VmjuoXa/w9Nf5ROoffdG33qH6O6q+WfKzKk7TN
Kvj3uVPlr7XtlbXfWv2Xqv/ekmPV76Dx8zqH3fJ+hplvJ6h+vNq2UPkWne9a
HaOV6oexbkk+R/W7qj5S/TjJvTV+X/VNdc5Xqm1z1Q9hrZJ8nepv5JxUf6r6
7MiYtFFdJ8kNJJ8s+V2Vd1Kf7irfpu0w1Z+ifTuEXr9u593T+Y5W+XyN/5Pq
LlV5J41/qv73Vn2sPgPVd7Du98Wqf17y0ar/Vvvaa+zRzAuSE7XvoPp22peq
/Lnq26o8kt9a9SxU2+Y9pzKfs+ax9nGNvVhLJdck7yx5V8mNKy4PZf1R3S2S
Hyj4+bxZ5S46nzo8jyr30fgv6v+v3C/WWM6Ra1LbHyT/T8d7UNf3s+q/kPwl
1yL5wMBz1Xj176mO7Vn71Wd//X4zVV8rug1tz8jmj0YFH/MSfl/VHaF916lu
C21tJLeRPELlktq0ltyaOU7l63TMKyW/XPL8dnvF8x3P420q36NjHs78qb5n
8Pvr/w6qT7Svj8p/szarvFb7TtSxf9F433Ntus/z1L6e+pc01nWqO0TyauZH
yT8yP2rfI+p/i+SR6l839DvFuzVT23sqX6Jtj7znjLMrfr7uKvh5HqtyOx2v
i+pvUbtza/59nmctyfv3Gqz7N0jHmKN9HXS/3qv4eb5OY7yPrqB9v0m+UuVG
6v+j5IG6vw9rX0uNfVVi/Wr30Prc31U/39+p/U2SZ2vse3Qugbb6avOd2l+i
/lO062B0Q7UfkMltdI5vaN/Bajtb/ffn+dP9+VPn+qfqBkn+o2yZNY21jTWJ
tSkOrQ88qv+7qv9z2t5Ev9K2u+r/Uft/1P51te8teRf6qv1hOn5jyUN1zi1U
7q7jnlLwmsLaEkgOCl7zWftb6Hy21NhNdZyO6j9Q969fyTrK3ipvi76R3Z8O
an+1+o9gPQ78+72r62uh/nO0/wD1P03/zyxYh0CXeEXnd5j6b6Y2BzMXJ9Y9
66pusNpvUvV8tFR9NlX5NdW3UPvNmbPV/mfJgyQ/ojateHZ1Tv/T+XWXvI/K
i1V+XG0TbTvpfA5SnwYq36Vye42/h47zNHOhtge0bxBrjvqMQB9UOdYxR6m8
kGdc5ST2/cmx7qh/uer14Antq6j8q87nGp3PY+izOp+7Euu3D6j9reh3tM/q
j9Oxb0w8fzOP36z63yVfq/rH0QHRzbX/PNV/LLm/yuu0r5XOdb7KB6p9qer3
9TF0bJXn6hr2UP2L2t7VdfykfbeobqTaT1D7UTrmFNVFBc9/Z3AfVG6m32OQ
6iZo+xZdrmD9eI7GmCb5Jslbqe1xOr+TCp4DX4n9m/HbNVFdB41/kvp0K3gO
QpfZU/V16M9aq/qtVL+F6i9V/Xr0eY13suR30I1V30ny8ZLfYB6W/KXaPKTr
21L7tlHf51TfrOgxGftoyV1V94za3Cy5rtpsKvkSjT9Dx9+dNVNtt9V2n8Zc
hA6Q85zBesR6wL24QO0fZn6UXC/r/0nJ9sJmmf0xS/XXJJ7f9wq9vmyrY1aZ
r9BTJQ/R/yN1LvdqXwN0ZdU/qPINKrdk/Sn73ZygfanK72m8NkU/kzybqyW3
LHr9OEDykTr+UTreZhrzW429QOc0U3UVbdtLfkftWxf9jvKuzlf9Izmvmdh7
rC+dmL/V/3fJQ7EJJbcNrH98W7at0EH7jqr4/WXu/Uv1g7l2bXUkX8icrrHn
antA4xe1ba3+7+v4Z6ntbhrnSF3fOGzDwM9U+4p1IHShsWp7hOrP0vNbV/U3
qt1Bki+Nfb/rq+1Q9IvYx9tc8jU1nxPnVj+wPdlLz/M6lXvofHqr/IKOf0jR
9ug+secE5obbdLw22GfoBDpWA21DVe7J+Wq80zXuGPQDveN90A1Vt0ryI9q/
XPXTeX81xga175fN1/ep/IzaXa2xtkG/Ufkz7TtF9RN5/lQ+SlsX9V+gcYZr
vG8kn6/6u1S/v679A43ZE91C5z9J11PVGD1Ufz3zleSXK74/l6rNKyp/pf7n
qn6S9u2n/pur/XmZfCi2ps5/iM6lr+R9VR7Oe66+xwR+X6eqbrjux9XMX6Ht
iRdoyztPWWMeqPoZKu+r872X9UXydMlNJa/U8a5B39c2TOWLdcy9C16DWYs/
Dn0/u0ueLPlfyVeq/y/Mnyr313g7sKyofGPN+uxrkk/KWz+/R+MOydkmQadE
H8jr+rZRmz9Y43RNQ7HZsAFU/k7b2So/q3N5XuM9pfYfqu9LgfWNfjreAPRf
3hdd2/O839gS2veCyqvU71qNtyNzvMo/Mo/qeKepTSP1/5T5qOg1B12Y52GF
+u6nc3yYtVL7Tpc8SH1v0PF76ZrLupbttW8n1X/JGoO+q/Zfq/yz6n/OG/MB
+5ms4+4UWOf/VfLN2OC8SwXjAVwPulN77VuMbl3x8Vgv71LbOjru2dnzdqDk
x1X/iuoPUfvHVC7oYp/I2XZpp/O7TvvGqr6d2m+h83lUx58MPlGwvF7Xc1r2
PN2h8vaJ564tWcvVf5naz5e8KfZ76Hma+fpEnc8davOJ2p9Q9Bp5g8o9GE/1
x6r96tjzOPN5VzAC9JGK8bGBzPEqv1Xx8zFY8tsq/1MxXvaQ5H9VzlWtz8+U
nK9aXy2pfK7Ge1DjPQTOxvOlfdWK5zdsq7t0/GtUHqDnpWfJGABYwNMqz2N+
xMbWuX3IO1u0DYgtyPvDWleQPEzl+9V+X/XNc3zJX6j9mWp/j/bdo3I78Aze
N9UN0/0q6pyuU98/VD8g9O/zsurnST4GvI35RmNOlXyIfqtU19RH441hflDf
Hmqzv9rvr/O7HH1X9Q3pq30DVO6WeP7ooXFHZ78vv+V/anOtyisrG9WT4Fz9
eVbl49hYH4vG127FllX90drXoWI8imdvsI43W8cbru3OnO8x9kCXxOv5Feo7
En0TfVryLMZg/dB4s1XeVvt2UF3/0GMfovGuLrv9C5IP0pizsLc0Xi+dy+3q
cxtYisY9DUxH9Qeq3E/3ZyBzocZZquPtrnt0LfaL5Bj7SW2uV/tG2kapfA7P
dNGYW0HHu4LnXeXHi9Zv+T3Qh2lzqOSW2hao3Fn7tgltv+6gc31b+7pVrR/T
F4wJrOk4yU+q7eu6hi5gs2q/TPI72Rzfhnq1P0n7Gmq8f/QMvURfyb1V3k7X
s7BoTPU7td1W8nzOBfuuaoyWtYs17Nfs9/taY5+kfV+EPifObbu87c+/NOaq
vJ+Xo1U+UfWvF415gH2UtDVBRdW+N9EdQ5cH8fxU/P79i+2UM0bdj3OWfLm2
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
vzc0drxI20p0VsmHMbdrO7Fs/sXvaj805/cJvs8Ilftm+D/2Pbb4wzn7aH8q
mxvJnMTchP0IP+CXnO3PEhzFvO/RtbqffyS2BbEJr8b3lZjfB89vYM06M7rz
p/gzVe6uNu+BN6pcU/1xYPSSI42d4p+T/Ink1qrfRHJnya9LPkByUjOf8Lu8
OZ43l2y/4t//J2d7Nyj73aQNfENsXGxdXdpGPmG7im1b5mTmZvBA+CDTtW0r
+QneXfCunPFZ1mPev6k565v1UuMt4C59a/ZfLNJ496vuIfga4Ft5Y1AbosyP
pb6nF80fqAteWPQ7MlFt72WNV/mkov332ATYBh8X7V+EozElsA+wruR62FPg
HeqzrmT+2p55r7GstSsj12+m8iPga+q/Dt266PeR95My/rMBZfvw8L3gg6mp
fj3+En4vyX2r1ofhui7MWf/FHsX3iE8MHxj+UM71CskLq8bMwM5OyRkfw2eE
LfF+0e9Dj6rLl6r9gqp9SPiS8GHyDGyVGl8FZ/0x4z+cKvkFjfeO+myeZvpo
aFsPniF8Q9rAj4Cvwb1+VfvWlOw/XYb+pHYP13z89wK/o7yrk7HX1LZr0fyF
t8peC8ET8K3BOYJ71L5of9B/GrNaMmflJJ3Dx/hbVVdU3weZb1NjhWCGI/T7
PhS6/lF8Quq/Vu07Sg7Ufjr2bGI863fVTauZMwd3rlPR/ib8T5SX5Mwpmxa6
/yMa7w4wIx2vNXZSaP40nC989/jw/1Q5p/2blsx5OTk0RwauDDoi8wv8Da79
mZw5V/BJeBafzZljeJO2P4u2gQ+r2B/I3FYr2QcJpgu2e07OePkafFKS/1b5
gZr5BPi78HvdX7N/jXv5ZM6c9HtCt5+u8W9lbk5te2CDPAC/Ekwub5vyT2xc
jVc/m78/0rH7VP2sDlTdkypPDM3NWKBt17IxgF4q759hA29WjR3slWEOY+C/
avz5zN06v800/id5Y8DTYrcHn7g5MN7wVWS+3MFVP5/oo+h2zCcPxsa34KM+
lDO+d0NqfGKa+rdV+cuyuc/otOi2bVKvB9jqC3X8V6rGJnbVdkPV8ylzJ3Po
/eBbkj/LG1OfHpvvkVP5Pubnsu0R1v9JOdtTIyPrr+ixxZr5d+Bj6IDogr9G
9hfim/pF5/JDZP85voCf4J7qGC9L3k9tq9n57aaxLguMn8AXZ+24Vb/fKPDY
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
ATlC4dP+H4yHE5M=
            "]], Polygon3DBox[CompressedData["
1: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
+3DUgw741WrUjPXE15gvj5Yf4+ObCDX0reXtre/PeMbQTLuQpwjWxT5nPO21
x8BU+e7BH4/vQG4678a5t1WcwayZD9yDhrGO9C3h+QgOiPsSLuU7JP8Y2pjY
f7THQXP8mTjji2lZkL5z38U3LM7lYk6Jfxx4k+eDgHY/3oP6vrUm2sYzMq5r
6ddAmzg/x9nTWMYZSxlaNdodMW7aMPxuGIrP4Gts3RXHvgtr5J8gZzP5F8V/
ihq18Hn0SfhkGBD/b3GGjTVtHg2z6Z8o/o0uyKYz1GhjfwgORJw6tdSdE/8p
MBn/D/1X7Zm56QzZPP7VaO/infPSebaFfK/TjuK/5aXnPIvv3/FNEZvJT89q
Lm0mNDWPEr798Fo2nWHiLLM4ngUspq2ALdo989J/SBue+rF3xpkO7jLmeniH
0ulfpAtf51hHpdN7He93LfFPwNzY7+Fx7fHQR9+x2N/4muLPwR206vhDcW/w
OTCIVjX+IcSW4l9Iq2a+bc3hV1isvcpYdqr9S1E6x8V5bm6sN1iYTWfFODM+
H/948axozWjP0rbJ+Rl8n01rOtZ2dZ5xcS6OM4i5VFfjmThvwON49zhruh/n
x14C6/n+D/G6EkQ=
            "]], 
           Polygon3DBox[{{2586, 2585, 3496, 1693, 1694, 3497}, {2680, 1579, 
            1687, 3492, 2573, 2574}, {3423, 2459, 1471, 1472, 2460, 3424}, {
            2576, 2575, 3493, 1688, 1689, 3494}, {2687, 1583, 1692, 3495, 
            2583, 2584}, {3478, 1589, 1491, 1490, 2467, 3436}}]},
          Annotation[#, "Charting`Private`Tag$362110#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl00lIVWEYxvHXW5b33kyjdk4oZUZ5aYAguEJQq2rlwiaJaMSILDJTo7a1
rmiCCoJCIQJBaSJaFC1atMgGhyxtlQ2bIqKE7Hdyce7//zznPd93OOfc6l2t
jYcKIuKJ49fMiMSvYhMZSkeUynfkYV7FRzCHo9iAX3ETTuJ2zGQiso4DvAo7
sRbP4GPr1POLSVcc8Uy+xRfz57yf1/EX/Cm/lI0oT1mzMGJAHtCXyWl5yvFK
VyHHrIjXyX68y31knXsjt2G17oSumL/VDVqjdXZEjX5QPsIX8iF+z9wxc7Vy
CQ7r7uvaeZ2uFAvsNaJfIqf4O76UnzQ3z/lRuQPrdad08/l73Zh92+2V03+Q
j/PlfIw/MNdpbqW8AMd14+ZXyPs8r5fyxxkRWzLT72kD9mEeb2IOL+AyPI2L
sAMrscLRwotwGz6y7m/7beR3+Wee5+Wee1/yfngZ7+WV/Jvr2nwLU3KJfBuP
yn/xinudqzssX+Yui+RjWl8Usc79zpF7zP30nA7q1+q80ujW/dC16Cwf3/l+
nk7W97PHWnvlBvPnueXihmt26/7gOZ3HFzvls4X/X3/s4HmDa1yjiuvmvjjR
rF+tE+OanwndVp0qPvHNPPmEHtq3y4WrUtP/g38HKF0m
        "]]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzUkyg2EUheGrVKnSTqRjZsxcsww7SJBEl8ZEtwYLEFMES2BuxFw0EyT6
IlmB5x+8dc49597vmypUFyt9EZFHazDieSjieDjiDv0DES/mX/4Pr3xhJGJ2
LKLE5/kTnKJtbo9GzOnK/DQ/Lk8lO25r8hZd1W3rUkiji45s2d4aXaJNHNq/
0b3J7t2t0wa9lO3p0sm/5ox5Q7dDr+VZmkNT94ADvi5/t9M19/DBF93Pyzf5
Ff4M5/g0d9ws6Cr8DJ+RZ5Mdt1vyR1rV7eomMIkevmRlezVaohdo2L/Vfcue
3NXpEb2S7etyyb/Ju/If/AOJ6Duq
        "]], 
       Line3DBox[{2522, 2798, 3177, 1280, 2431, 1301, 697, 2799, 887, 3727, 
        3178, 1018, 2800, 3766, 1258, 1259, 746, 2986, 3699, 652, 1383, 1199, 
        3571, 2801, 889, 3179, 1021, 3572, 2802, 653, 2972, 3683, 749, 2987, 
        1260, 1403, 2492, 1261, 2988, 654, 3700, 2803, 700, 2804, 891, 3728, 
        3180, 1024, 2805, 3767, 1262, 1263, 754, 2989, 3701, 655, 1384, 1200, 
        3573, 2806, 893, 3181, 1027, 3574, 2807, 656, 2973, 3684, 756, 2990, 
        2675, 3355}], Line3DBox[CompressedData["
1:eJwVzcsuQ2EYheGvIaTVmhMToa6EGzA0lJi2qBZNOzR1GDltlKlDiYgJc65B
4uwa2hDi2YM338q71v736Gx5upSJiBk8ZSMm8xHrhYi1wYgp+RTbuYguyvIY
/6AvyWfY4X+wwY3rDgcihvhvri3XuGf3Bb9cYtfBn7xgt4h5nGPfdpfP2L7i
DUe4s2/oQr7Ckk3LneN63OvU+b6KLa7iXmDPrle3LBf5R+/U5Hb6L12/bpOb
0B3Lw3yfe5N+w727H8jiwK6LnLxqV8cKLpHYJt4r6D7xhRPc2zd1efkWVZsR
7h+QPzY6
        "]], Line3DBox[CompressedData["
1:eJwVz8suQ2EUhuFF0gSlISFEaWPkcA3EDGNzEwNmdQdcSZ3PDNqqkkhwBdyA
Y51NmUgkPHvw5fvX+669/70HZhemCw0RMSO3zRETbRGTcpaJuDFPORdbIn5k
WYr4FXbHlVsjVrBfWZU57h7P4u3piJJ0yCLehz1wg85rdv9kXSr4I36kh7gN
rNEzm/pL17lz941yneaKdEm//SfughvjurGq9CRtruPPfNXelnel8O3kH7hr
7oU75nawJm5Xz3OveA7vxWqSlSU8j71xw857dtP4vq7h7/iJHuEOsAx3qL/1
B3fpvnEuZz6VfPL92Cf3Dxr+OCw=
        "]], Line3DBox[CompressedData["
1:eJwVzklKA1EUheHr0L4DQbCpRBRF0QUIgjhSZ06dZRQnugXX4AKMG7BPYiqp
CO5A12HfJJqZXwaH897/31v1coWjvcOeiNiXl96I7cGIHcmGIp7dd53P+yKG
+yMudAl/xF652kDEJTbGXeki94YneB5LZQQrm5+Rd+5Ur2Pj3LWd1OwHXtfL
+A02wd3qlv7kNvF557osSM7sF36M550XsYYsyQn2zTXwsm9MYhV9hj/59w+X
cVVsirvTB1wLn+u+ActkFKuYn5U2V9Ib2DRXs9M0+4vf6xU8xZLuG3Vb/3EP
dra4VfemrEmCdbh/86I26g==
        "]], Line3DBox[CompressedData["
1:eJwNzcsywnEYxvE3pyS1cLiAJjNmjMgdNBatCB1uoAvIXgu0aI8bUF2HcVa5
IUT4LL7zPr/v8/wr1zytthIRUcN3KuIgE3GIu2zExLsiHyGXjnhYjrjHje5H
9yg/Ia9b4W7tpvyVu+r9K/fkkrxh82L7jD/+1X1DT7epO7E7RixFDLlz+QJn
KCLBd/myb9rY4XZRQJ+f0VflGrb83ic+UNbN6r7kCbaxxvXt5vhrd917Xh7I
+3LBZuQ/hljgx+47BrqirmFXR1I34i7lDtrYwyL/D3NgLC8=
        "]], 
       Line3DBox[CompressedData["
1:eJwNzDtOQmEUReFDK0osLIyFCWPAYARBW9FY2GiCjUZa6Xi/KXAiYpyMFppg
Qa+FE0B8fcXK3nev89/0dfXsNhERp0iuRJyvRSxQ0y9kGZfYS0Z0VyOOUhF1
rqM/4Rk5rmRv2FP4ct+U65jqS+Td9N22bD35gntvXrl9bke2uYx8xzcm6Ng2
8Kn/4Bdd31fyBhUUvB/637H/9biBPsMbityJvW/fxJ/7gdzCox7cgZux26Ft
JOd4sM/4Q25Xjris/ECCu5Nj2zb+ASQAK10=
        "]], Line3DBox[CompressedData["
1:eJwVzk0uQ3EYxeG3w34RRKs+BpagWrUAwrAxkJDQppJ2xiKKDbCEKqtgjEpo
VaKW0IQteO7g5JzzO+/95663Lg7OUxFRp7VMRDUfcUXX9DIT8cdX8Tbv0HY2
4ovv235yESu2bz6hmm0Pf7CX8GX5Vi7K9wnTt5Lv3Y6pgI/xPv6pV21neosW
bU94U27Qo7yAleUuXdIz9svn8RN+ShVvjPiubejNOds7/6BN2w5+Z5/Fl+Qb
OS/3kv/Uy27e3A4ohw/xHv6qb9iO9SNK26a8YDvkGf0fwlwo0Q==
        "]], 
       Line3DBox[CompressedData["
1:eJwVzslRQmEUhNGrOFThkIIimAPqSpzYCBQhsAJESIJ5ciUxoCahRqELFdxp
FB4XX3X/3X1fvVSlVW6uRMQ19pIR1Z2IezzvRtRoHTc43YrobNvJ23Zt/gOf
yOkK8o58H6t8l6bw6DbhfWbTs+3JuvQLc/mb/lx3RPu6LP3Bmm7gfYBXviGb
4YW/pU20cOF24FtF+dC2zy+wxKWuJB/J01jnxzSDJ7cb3lc2I9uJbEi/8SB/
1+d1J3SqO6a/2Pz/L3onO8QfuacoVw==
        "]], Line3DBox[CompressedData["
1:eJwVzrlVglEQBtAxk7UHExGlBJdQBVGgBAvAPdMGPKDsUARo6jmiCVqJCEWY
eAnumXnzvTf/v3F+UauvRUSFzWTEZSbiniGzbMSVes277DgV0UxHPNGTNdQf
prKirGrW0udY17fVLcbeJ5xP3FmwpMQfE1lSVta37GrzTN/sUD2iY0eeb7Mb
9x8Y8eV8q97xIT+1o7v6NwayjjrnU3Ymq5l19duk9D11hxfv084VdwbuD1ff
55dXWUZWle3rD9jjzWxXfaRvR4F/gr0rgw==
        "]], Line3DBox[CompressedData["
1:eJwVzkkyQ2EUhuFjqok1RDMUlqDZQZJSqFQEhZJBTFmDuSb6ZsSEGROClAH7
INGtgKo8/+Ct79z3O/fcm11cz9e6IqKEke6IbF9EvifiHi0UMhG3XMH8hwc7
RbnXa1/3qts1v6Ohm04dl9MNyEHMcA1scG35iVlc6zLcnHnf+weo4wOX/KN7
Jd2R52McYocvc0/4wjfOUeWH9PPmJupuF7mK+T/tu7UgT+2M8m/6E3MLz7ql
9A/cWLojh7HMvWCT+5G/WMGNrp9bTd/2/gXO0MYV33RvTTdpbwoTuOPH5Ra2
9Tl0AFY5N98=
        "]], Line3DBox[CompressedData["
1:eJwVzzlOQmEUhuFj67QHGltlEBUtdQMmBoyhIRZGCBQKkVJrl6IbsDFKACec
Ky3tHNAVqM8tvrznfO/9/3tvqtJYrY9EREmWRiNWJiIOZVlOJiN+cFHfwmfc
Hot4wlzixiMK5m98xC3uAbPcAq5jW9eXPZnX1XT3uGm/w6Gzc/jq/mPu1lzh
BviHeexwB1zL3pWmlOyz3K65IztS1L15Nqf/cu8NlvXXmOE+dVnzB17hBneJ
aS6Da9jQnUld0rqq7gKLyX/gu7Mz+OI9R1wvOZd8F/7iNJ5z+1zNfipVmdL9
AwqeNkE=
        "]], Line3DBox[CompressedData["
1:eJwV0KlOA2EUhuFTg2C7ATAVUMCDY1+LRCAoVNSzGhK2IFjCzdAEErgFWrBl
bVkSLIK1yD4jvrznf7/zT2YmXVidW0lFRE5mm6U1Yq8tIovH7REfycz/O7/h
TkvEKw7o6tyM+Q9fcFu3wJ+7M+3cx1+aO7kb3Yn0clO6Ze4Zt7ga/vKTWLNf
1FXNm7onTOkmMM/3JO/FX8uRLHHjukNzWQ5kkXv3nDH+x/4jbvAP2K/75kbN
X3iP67p5/sydEecMf2Hu4Eq6fenmhnWlpog15zvzJzeEVbundm+T79JVMHSD
mOO7kn/KX8muZOw3AI2XNrA=
        "]], Line3DBox[CompressedData["
1:eJwVz0kyQ2EYheEvIYnodqArE30f7CEhrTBTsQCWoDCJYKjKMmRgGbrl6D3/
4K1z7nm/unXvzMlZ4zQTER0cDUfcj0SURyMWxiLm8TQecWgfshVxy/dtBS6P
Njcoc7jheuneXRsH3I7cxbT9nd/WS2hxrXSDKa7HDXhHFk3uwRZ6Bl2u4C6P
BtfhNvUtvHHNtOPaXudreh2v3IZcxxVXS9+q59Iz92j7039R5b7lDy65LlfV
9xPcqlzDpP2FX9GXscdVUmKCu+C+9E9UuNlixId+nv5PZlG2H7td1JfwzN1h
zr/+AxwhKQw=
        "]], Line3DBox[CompressedData["
1:eJwVzTlWAkEUheFnhk03KK4At2DkPO3ASFCaFocQNmGm4ngctqGROWrumDns
xK+D/9xX939V1ewNNvpjEVHgIIm4q0Z8YT2NGNQinrKIff2kcwPX3J+ux03J
vdLJBq64ob6w18UutyrXMK3/5FfMy+hxuTzRv7h7yU3IOna4X/nA1eRF6ezW
UXAzlYgl84e+I7dxbLfLtc1beOdqsq9/9EbOpc4ZzrkfXcFlssNVZYozLvd+
q3xXvyAX0bT7xs2b58o/uE15pH9275RL5Dja3Le85ypyyFXtJmhxI90hN+v8
yt3gFv/s7Sv4
        "]]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzT0oxHEcx/GvwdPV3XY2ZHCpCyU2q8VosSHdQImcxUCZMB5ZnEkhKQ+D
gTKdhaJYPCzcbUwoxcbrhl/v9+/9+f/6t43PDE3XRETOWa+NuGqIGKmLmMJR
vMbNVMQHv+MTmMdJ/E5G3PM//oR5nMct38/xZ56ojyjjgnuHvsQXeQXTtjdc
ds/aVvkKf8dW2ydu6wWtwNfwCzO2Af2HF7WN6j/xF3f1rP2P72jFasNojNi3
ddtenCOtB48xob/yXifpuzNtz7sD/ZyntH5bGkvVd/qh/ZI3aYO2Zrxx77Od
2m55izZsa8cT/UG7sD1iRsvZxvROXtZKtgp2uc/a/gEdJTq4
        "]], 
       Line3DBox[CompressedData["
1:eJwVz0krxHEYB/BHZhgHXoJywLwIo9zIMstlIi7cx1yJgxEiN4njlCI1hpRy
pCxZLt6B5WS5W3Lwcfj0fX7f5792TE4XSg0RMcFGMiKTiuhlpjnihWdm2yKq
8pU35vlgSv8ud/jkiwpz+h/5zS6NnpegR7/i3GROsm9up0+/Lg9bIuoccMa1
/lxWWOCCG92lvGKZJX5bI27lHfessUrCtQ/+KetdVTadczJPv/0Ae+Ytfcb7
awzqhijq6nYj5uH/77LLyhzjdid2BXOeI7tO50V9l9x2Tstujs0l/aN8osyY
e0Y55Q//JjbC
        "]], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/G3gTvp7ooSEzezksWPVWIw+JEzuDK44XQ2JSklREkM0g3X
qetckmRQohSZ/R9kR3kYnj1fr9f38/n0zeZXp4tNETGPk+aI0WTEWmvEGH+1
RAzKDbymIwa4koj4wLjvn7yJgv0BK7jQv/GDbSy718Y1JNxJYti2q3fiEmnb
li3Dh3oW+/IkduxT/OTfzr3/qJf5NxXxZqvIz7Yqv+s1ftHrfIcRbx2hwxsF
eztf6ROY04+529aF6/8Ni/ZT7rX14Eae4T37ujdn5TNbPw+hD7f6Eh84s+FM
Xi7bcnIJC7jHH86oLz0=
        "]], Line3DBox[CompressedData["
1:eJwV0DEvQwEYRuFPKCqpYMNUsVQYiPQXGKz8AEN1kqhJajGQmDAYEEJIOoia
GgYLJmFgIEzY1MREJMLg6XBz3u+cO9zcdG5mvFAXEXnPViLipjlisjFiBvN4
i9utET/2gz2Ns1jA71TEo51oinjGIjePO96fs1/sNu0VF9x9/JK9aFexW3vH
ZXe/tmqv2B/Yq31iiV/n1uwN/MKMNsr/2nvcJu7jHx7wA3p9MuKQ2+XK2FC7
tUEtaR9zJe0EU3wLl9Xa8Ywra0f8ud3BjWideOUe5iv6td3FjWlpvHNntVPt
3u7hJrQMVvgn7kJ7rv0LbkrL1b7JrnKX2hsOuYvaP4MsORI=
        "]], 
       Line3DBox[CompressedData["
1:eJwVz80qRGEYB/DnLDQYxCW4AXZjaSEuYMROJOuZC5iUQjP5ZslCKaVsEGUU
ioWhfH9eADfgY4vfWfz6P8//nN7znvbRYr6QRMQQq3URvfURfZQyER+8U2qJ
2JCffDHBD2P6b7nJL39MM65PnBFs2Rtllm79jL3Z3MS2uVW20ePZon2vIWKX
Hc6o6c/lFJNccKWryUsqlEl01/KGW+aYJaO/k/c8sMChbl4+8sQzS1TTO8gX
XnnjSLcilznmhNP0m/qqe+fpZ0B3oBuUa/6jU9fBvrmoz5m7WLePeGc4PZt/
GdI5ug==
        "]], Line3DBox[CompressedData["
1:eJwVzj8oxHEYB+BX4lyirlDOdEw2N8lokIXld+XqDJdbFcMxS7Fa/GegdBYj
pqOUsyhlYrT5jUax8Nzw6X3f51PfvoXaarLSEREL8tcVUe6OqPRELGciiuaE
bPVHfOtKujdelTFe5aPml25e98oTGWGLuryZ6mZ1z3xGNvkgH5AP3bTuiZf4
pHmTjbiWd92U7pFfuhvyworsgZ27z6TFfvoixvmJ+1iG9E1eYEfue/dh+102
zA7sd2zfvGI5tmdvsl3zgvWybfecf66zNTnlGb5hr8uvPfXnT9nRdbpv7alZ
0y+135R/ODQwZQ==
        "]], Line3DBox[CompressedData["
1:eJwVzi8shAEYgPHX5m5nbgISCif5UxSbKBEIJsg0Nn8KjUZzmxPYcOUkN+FI
CAS005CQuITCFOb3hWfv+z7Pt+/7OqcXJubrImIGkY6YwlUm4hJ9DRG9qDRF
/KQiJrVz/gzdfA6f/Dh/wlVw7NkOvh01bUQr80coa618C160Ye2Q7+dLZpZv
xKM2pG3zRf4AaT6FqjbGD+i7/A7+8ItrbVTr0QruLXzjCyX+Qu/S8u5NfKDA
v5unWpu2YV9HkX8zX5P/1pq1Nfsq9rVn8yl5r5bVVuw5ftl8wD32tEzyPX7J
vYg7VJHXBvl6fc49i1vcoMb9A6zkOQ8=
        "]], Line3DBox[CompressedData["
1:eJwVzT8oxGEYwPHnhsMNbjumuxgMlAmxnDOYdIPEcCmFrERyx8RtRsomSoou
ZZGzCGUxmG6S0Wjw50YlH8O3532+3/f3e7sXVqaWExExi0RLRAmLbRFrrRGD
5gB+khEz/Au3hD5uPh3Raza1Sa3Bl5Dj5rSs+a5NaM98EVW+k+/AmzauTXMF
rZ6KuMYrn+cf+Zr9HA1uiHvgTu0neOJ+2yP6+SP7nXZo3vM93Lc3Kv93+bJZ
57P8tvMGdvV9rcvbl1pGq3I7uOLH3CngTEtre9yWtolRPo9jLaWta7f+E/jE
Bw60pLaq3di/nEd8M4wL/AH42TDI
        "]], Line3DBox[CompressedData["
1:eJwVzy8shGEcwPHf3ebuCE5C8if4k5xkUzSKYARBNNUJNBqNoLjZmCHYCeY2
GwqbkU5D4hQkJFOY4POG737P8/2+7/s8b+f03EQxFREzSGcipnCTi7hGf31E
ASeNEX91EZPaJX+BXn6T7zG/tXHtjD/FMd/Bt+NTG9UqiceR1sq34E0b1g75
Al82m/g8atqQVuL3+T3k+CwetDF+QN/mt5DmU6gm52l9ybv8Bn7xgwP+Su9O
/jHr7njGCF8zz7U2bc2zq9jlP8x3VLRmbcV6GTvaq/mCspbXlqy7+EXzCY/J
N7QGbZ1fsJ/HPe5Q0gb5jF60n8Utqvji/gGn3Dhc
        "]], 
       Line3DBox[{1769, 2105, 1627, 1912, 2403, 2404, 3640, 1424, 2119, 1637, 
        1916, 2407, 3766, 2408, 1437, 1647, 1921, 3620, 1549, 1445, 1657, 
        3686, 1926, 1555, 1453, 1667, 3688, 1931, 1563, 1461, 3602, 1677, 
        1571, 1469, 3607, 1687, 1579, 3658, 1478, 1697, 1587, 3662, 1487, 
        1707, 1595, 3665, 1497, 1717, 2375, 3630, 1603, 1505, 1727, 3691, 
        1937, 1609, 1513, 1737, 1940, 1615, 1521, 2132, 3613, 1747, 1943, 
        2413, 2414, 1529, 3723, 2139, 1757, 1948, 2140, 2141, 2426}], 
       Line3DBox[CompressedData["
1:eJwVzj0vg2EYhuFbE20NpOgg6RtJk46mMiAWadLuLYlNmbUkkkYi8R/8AaPR
yECkXXRgKAsxmqRMBkMZHIYz11eej+Lufr09FhF1fKQjVrMRixMRQ/4Tl5mI
g6mIK3o6HvFOf/S/uOYPbTf0zPZN08igi46tR89tKfdO8ye6GZp3/kJf8VZO
l+jW+eT/Tf2srsTf8nP8Aj+ajOjLS3xKN+DX+Cz/yi+7YwV3ONL16Zu+Sjfl
Gr3HA4b6xJ8K+oa8gUc84ctWss3bmvIOnvGCka1sK9r25Ba25S1/b9Jj+gfn
qSvY
        "]], Line3DBox[CompressedData["
1:eJwV0C1IQwEYheHP4F+RBUFMY0WjtoFFLIZxg9y0KKITdbqFpcG0GDRocDBh
iLAyWNMkGseaYBusWASjaRgHPobD9573wL3bze1V0rOpiEhkPBOxNRex69Zn
Iw7mI0qysRBxPx1RsB3bLmwn/Atfdju2Gn/Jr3AZ3OPO3UP9ml/Cz9yVe8Td
cln8yi3qd3hV+vqy/oDXJMHvXBfnZUcf6k94U1L9U3/DBb9lXd/G39zALetN
70rwD/fhnnItLsW/XNH/ynIjvc1XPKcqE9sNv2//sj3+fxNckob9D/ERKWs=

        "]], Line3DBox[CompressedData["
1:eJwVzjtLAmAYhuHXQE3KwCGSaFCnlqAlyC0l3Gpwq6ChocNS0IFoqb/R7NjY
poNBLglRSzUUNDoKgrl1uBpunhO831fcOaofJiKijq9URHU8opyJGPIjNNMR
x1MRLXqdjBjQBMbQxpntjjZs33QSWdzj3NahN7aMuzP8lS5P827f6mveyulK
ulW+oG/pp3XzfIef5Rf532zEo7zMJ3Vv/Ao/wX/+ezcqeMCFrkt7+jW6Ia/T
Jzyjry/605x+U97CC14xsi3YCrZdeQ/v+MCPbclWsp3Ip9iXt/39gF7SP6rI
K1c=
        "]], 
       Line3DBox[{1903, 2391, 1759, 1902, 1758, 2142, 1891, 2387, 1749, 1890, 
        1748, 3720, 2133, 1878, 1739, 1877, 1738, 3670, 1865, 1729, 1864, 
        3633, 1728, 1851, 3598, 1719, 1850, 1718, 1843, 3593, 1709, 1708, 
        1838, 3587, 1699, 1698, 1834, 3579, 1689, 1688, 3652, 1829, 1679, 
        1678, 3648, 1821, 1669, 2370, 1668, 3643, 1812, 1659, 1811, 3623, 
        1658, 1801, 3575, 1649, 1800, 1648, 1790, 2363, 3571, 1639, 1789, 
        1638, 2120, 1774, 2356, 3569, 1629, 1773, 1628, 2107, 2108}], 
       Line3DBox[CompressedData["
1:eJwVzzFLgmEUhuETiSWUzrZFS0GDEC0iDaU0FBThkuigi0WSk6266tBSa622
1mqrrbXamr8gCB27HA73/TyH7+U7m432xe1SRJyau5WIWipimozo8B+8T0c0
VyOu5bLdt+6KT3Bgd2lXk7/kKn5iRX/OP/gZ7sljfsQz/J0f8hHu45rujb+a
nJyUX/jQ7MohP/Mnc8y3dY/8YfGOvCUPeMn/9fFAt6Hr8SzuyF2e4fN1d/I0
72ACC77707fkZfkGT9w1x7zdr12Dz0x9cYdd0fwD6mIlfw==
        "]]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
3Svjz3cL4Yq+xDfugQQWrfv29e6aIvR3sXfqt/0tlDvXmf5YWQTBwTcfNIor
wn1rZiz9p+Qkeha/Oz/KSQGxJi/Nrw8vgtp+QxJDUzPA7c7vDWeTi2D0zRaj
7umIYfPqUdsXiMUwv7Zl7PIlMm3fGrJ9a8S3keXbiZx8VJzl5HuQ/P5vhqxv
H1+Evq1N5t8asR0Kx3c9/lWDx47DD6GE/wfhb79SJUiYKAbbRkPrzFolhpIO
sbPsfDR4fpgZeU0X4/xefSaHKDPBtceimV2SleC2c3n21SlifJho6mr2xBct
H0y2PawqBq+dMVM+tBODXbu8AutF72BRnWF1pReUMPzDZR/3Xblw0TT/cRt7
KVwt+qIwaCTX9k8i2z95m+LRUIpHYRSP9nPycQTJdyT54S7dbXCqGH/LN9ap
+90Nui+rez2huBjcOfywgfC7EP51i7vexp+5cHpcv096Cgm0O1450WS6HAxC
YPuGBtk4alkvn/j+2TDCrV1Mk91q2KcaE3l2bxYOXeUlWjPdD0O9ApTXOnzQ
9uUC25dL9UNg64d6nHyYTfKHkvyq0pwnje68gZ69n94TG8tg1t5Q0ToNL0gy
HtO+8dwolAQOP5FyKwf6qxfUyh39HpyujFizYkQYfljx+NyyKH9UWocn+Ss/
wq7aPc5taBYFZgZbyqws88BQf2vbWooSOD7+w9Ept29Bnw7CeLFxEZywGGs2
r44S9nDzUZfmN6b5O7Yecao3KgwTdh8eatnLS5NPPW5YVPwR4jg8UEF4ehGe
0TEbBnSHIAjqvbTBy1syyH3dw7rCUanFDyz+aw67l4xKTQKba1ZXTo/2x4CL
L4ZFTfiLH1n8l7wXGmTMicZoC3erTVIZ/DoXte93ikKLH1j8091alxxNT4IV
y/s/uJrlCa42M9Klk/7iRxb/75fN6iqiovFLWdef/2yVgU7kzh0duyq19gCs
PUwZsXdI+oUCsNo/zqmoxVl0PPPcd8XFEkjaeePzP3ZJOLjt+5u7Vijxu/7q
nM2BUvi4fZ+j6l4mJtsvlp2Jl+LHqi3pwR/k2v5/YPv/qZ4MbB2b7AdZ+zHy
VLicUWSiaM/O1Jc+UjjQdcuJF00V2v0L7P7t+qGy35cYKZSPnrkgfOpp3B+0
ss6Wbirt/kV2/zZwLTzkpCPEIxudysOuSeDHpsgvelCk7YdBth+G6vbI1u1p
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
+jT118hJfNF8+BWNnEV9chf8HBQFW2KSWnwbV4KjfrcyuCEt0N7vQPZ+h8nD
T6hKdtfkod7hERo5Vx+GFcT+e+/M6IaFIvgpZN2tdURpW4JN53h7Nav4+/0T
YL9/QvdZgL3PQt8VAfa7InSfBdj7LG9uGF7vprMV0y+K7mRp8LgPqHgn1ODZ
VXEwsEgQBmPVD1wy15RghF1ffYf6//t8um8L7H1b6pMEtk9y2vS9qxxbvcam
XyacajK3GLceM9v8XiDS3rcF9r4t9UkC2yf5v+qZ+kiR7SOlflRk+1H/V3ug
fl1k+3Wp7xfZvt//1W6pTwnZPiXqL0K2v4j6mZHtZ/5f9yn1rSHbt0Z9ccD2
xZGfBNZPUp8b8vS5IdvnRn4SWT9JfW7A9rmR3wPW71EfGrJ9aNTnBmyfG/k9
ZP0e9a0h27fGF1+onw3ZfjbSM7J6pv4lZPuX+OZT/xLy9C8h279EfUHI0xeE
bF8Q9YMhTz8Ysv1g1PcFPH1fyNP3hTx9X8j2fVFfH/D09QHb10d9esDTpwds
n94923PzBcdyNHlXq7LmqSo4qJuvikwoAPWHw+9MHsTW6CPt+9SkfNujbKic
VKutW61i8G4zzPN3bIF2fyG7v0g+svLbkJwqRo7k2aTIRxIxZL50bWQ3X45z
Dfr8sTfCU6MvkfAgi+cirasv89wnGeZqqZcY7su3bT5wTY7rtk7M+7/sGVl7
pr5oZPui6d4isvcWO5Oev5Oeq8w5Pd+i99Wd3pcNva+RFBeaU1xworjQolLq
9M0yDr96bV9y5mQx+piNaHFXXwxNyU6MGDvJfHrdZF/Lmt8rqHrP2e0Ostso
stsw0sOj/089EG8Eljci7aNdzD4iPoksnxwmUI092aPmdw+INyLLG3PJHvIZ
eyBeByyvG0R+oBP5ATH5AeJ7yPI9Prvtp5e6KeOGBFvs61qiXifDE1ctC8a2
EMHZpMbrpE3y8cX+L0aPdiuxdYMcHf9KIVSu7dB12rgMjPeq6j0+QYHJjy5u
WtJBCoNidPvcGfQKBw1oINDfWoyl59/0XfpZpO1rBbavlfoxgO3HoLoTsHUn
vdSWwVs6PYLzPSLerChR46HTeq6FMZr42GG1lzosEUYOHJatF6hEdXibOwNW
SCHL7eTEFvdS4NCmNo7jn8mw/UOvqA/mChi6FlyMRQHw4uHkl3fK1Jh9v5dl
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
RWeKC4/oHo1MwfG6bsTrKF4gGy+CKB6tIjxVhGc4xzPhCvHM3sQzO1FcE9K9
zgMU19zpnpED3TMaR3yV4jWy8TqK4uwoirNRFGffcfwNLhJ/e0H8LYXi9UP6
rog+xes4um+VSPetfhAPpDiObBwfSPwhifB8JTwjOF4KQ4iXzideakU8pCHd
u1xOPOQw3SN7s5Ljt3eI3xK/QpZf9SReZEq86Azxok7Gf/ge3CC+pyK+Z0H8
qoDuFW4jfuVL9+ns9lTnjcS7kOVdXsT3jhMeR8Ij5ngsiIjHGhGPPUm8sewq
xxsvEW88RfcKPeheoaI6HwaWD9O6kF0X6QFZPdC6kF0X6QFZPRBPBpYn07qQ
XRfpAVk90LqQXRfpAVk9UP4CbP5Cdous3ZKdI2vnZLfI2i3ZObJ2TnkNsHkN
2S2ydkt2jqydk90ia7dk58jaOeWbwOab5JeQ9Uvkx5D1Y+SXkPVL5MeQ9WOU
hwKbh5JfQtYvkR9D1o+RX0LWL5EfQ9aPUX0A2PoAxR1k4w7FKWTjFMUdZOMO
xSlk4xTVDYCtG1DcQTbuUJxCNk5R3EE27lCcQjZOUX0G2PoM8QpkeQXxEGR5
iPY7dSyvIB6CLA+heg6w9RziFcjyCuIhyPIQ7T07llcQD0GWh1gRT8shnhZO
PI14I7K8kXgmsjxTe2+O5Y3ae3Msz6xFvNSXkU+8EVneSDwTWZ6pvR/H8kbi
mcjyTF/i4aYMD6e8ANm8gPIIZPMIyguQzQsoj0A2j8imvANI/maST3kBsnkB
5RHI5hGUFyCbF2jvu7F5RP0eBQP215HixyF+J2d/laH8u74kvUCgrd8iW7/9
PWS/7/F1MhT+LNiaViWFWO+gP/XbHC/u9x+1v485nH7/MWI493uO2t+7rEe/
56i/+7/Pt+5n5BMyQArFJ8TRp5NkUKI3c9pBkQDmUF06mOrSD6kura1j6y+t
XseufOLScl6t//RLa/sTWlzZMXv3IimOm5RWd22gDPtdLhkzRibQ1p+RrT9b
BTf6B5tp5oXGXayaq8njXjz/U9/udKD674Fq8euO4X7fcyfz+5Wx+6vPH0Hz
/duY7zc8JIXNj3cIs11k0Cxzl1O5QgCWVOefRXX+EKrza88F7ntWPxd4C/pv
7huJsfbvnwsa1ZHjzflpW2t7FELOJu73W7W/SxtEv99azjO+TtQvMXC4GNTx
IwY5FBaBQ8+Lbv0OF0JDOteQ07lGbzrX0J6DhLysfg6izreLdVghRnefWWsH
PCnCW9mx01ef1eTFLtV/J1f73K7MeAiN7yrptOXLCTH0863/cM/xIjBobdn5
7tVCWEfnOF7MOY4rnfu8OF393Of0Du73hdnfTQ7dUf13hx1pPK93A783KQKI
fGp0bWypHKYu2BwT4S+C53Q+ZU/nUx3pfEp7nvXDs/p51qLCL2sO2GMNO9zk
zv2OM/tccxq/QONLaXz8lRmSWS5CCBx96W5ykBz22ux5mnZXBHl0HhdC53EO
dB739/yuLnd+Z0Xnd498q9fttb/rLfP97/X8fsdFK0wW5UDAqJZVkz8rIN59
8shwBzF0oHNGCzpn/EDnjNpzSZ2A6ueS17apnhTfflpDD+/P//ffGT98/r/X
/709ZQuufc2BlJZLg5Y+UMDqWLdvK3eLoTWdq+6nc9V1dK6qPYdt+4Q7hz1B
57Aek/97/b83nf+60vmvIZ3/dqN6owVTb9SeI5tHVj9HpvoksvXJ/oZ6C7N8
HvzVQwHpoc/06ucFWjxSOu/OovPuV3TePYHOxz8nVj8fN5zMnb8vovP3Ijp/
n0Tn9a+mVD+vfzyj7PzxkByU99Z/bHtvByS28Jkesf89BFBfgSH1FWymvoIz
1IeQv5rrQ7hKfQjafoaT1OfQjelzSLb9730RH6kf4wvTj6H8Ur1/g9aFPOtC
dl2EH3nwI4tfq4frHarrgewBWXvQ9uew753eF/K8L2TfV53vP3rWVqbDitnT
lrcvVmJieS24Vi7Wnk/VsIfQydXHn9O4l/laJyuzt1g3ybS4OFUJs13qeD83
kmj3KfLsU2T3Kdk5snZOdjuStdvKcfcN0pe8hcLyE3EdHirx8tTHfdua/T3/
Qvb8K3la9XEt/kfGfUJvXnyLje+aCl74K+GBzbPO8cMk2n2NPPsa2X290HfU
ugZNc2CVReMZBY2UuMvPYdb5GX/PK4H1b+T3aoyT30PW75H/Rx7//3/q+u64
nN/vf3vPbPG2va23vcWRyIjsFWWTvTJCREmSTcpMSgqVkdFwMoqiQqHSvKu7
nU0o/e6P1/Pl+7uv233/ee7rcV7nOtd1nXWdcy4W5T/knp4o974p1u8z8oqj
cy8GObSNyeJfDt1OF639c+/JotyDPNSAQx6yKA+hF1iLXmBRLzy6d7djjmUS
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
hvznepD/rpD/BpD/dSH/nSH/SYJTR8CPAz4cesRY0COG0ncpEt/9hO/2wPsL
Pnh/4RHeX5D1VFfQ3wb035Tmy/0wXyXmuxX67r2g72B/smh/wt9h2d8ZB3v+
35mWh0fG5HKLOwv67LkbyVmtN71odySF2rf2XVa1bCYPj6nntS5QQTEbTt1d
syGZvrp0NTrul0GOtVt2ONEknaJqnAt8uSSZdvWdcbrd51xq2jGxnKHPU65R
f+6qJi4pVAv+juy/GMJ/2SGNZ0OMr47xJRJ+thHwt5DooTECPR0l+qk86M8B
/bjfYdFPgR3Ooh3eM8m0xv5tOTy3Q9vO0Vuf8+5zF90zd6ZRw9XpDRe1TOfb
a71LfmWp9kG3Ed3rdkslF8UufhepIJP/9o3QGZZBS0bsyMtskUqvXL26lr2Q
Q8PXdKpcMSiKj64tnxbkkCb7xXxW8ItfSuPZAuOPYPx5CT9PBH5z4K8r0UNB
Aj29JPppAujfA/pvtrCp/tgzi8/anCzrPOslP61xo3TLjnRZjvFAwT7RPxnt
8O8nP257N3tKyJZ8Oj/H8O6TlETqvcz+y670VH50se2T0oaZdP3Q5c/m7dJk
fc3mwnk/gziJGLdxLG/XtcqRVEr8OL/ToOWZZPd5ytMVNdJoOuSMnSAPv9pd
cZ2zP5Y2XenbPKRyLnvNC9q6q2oK5dyr1qhVbBaNqtc+c1+bFzyzzh7dDYfS
ZTlJcwX5Nl/ys3gr/KwM+FmZEh6eDzzTgAdykrcJ9k+1bPsbC2tc5atmNazT
duaTaZjZyoi4RDoqzYtfYV72mNdCyPMdgvysh3iXOeJFRxEv6irxmcIFPiug
R1YI8nanztoVD3JiKK1Vyyn7euTy3g2r/dZlJdNtad3JEev+DOveCPrrX8H+
fDOw+8wLJ9L4ytrrs7uGvuZNV8Z5DeiWTdan/94v7pfT3+Gl/Qb77jB5ze46
sY+qDs+iwP4tSkflKqikYXZ/3bhXtPJQATvbZ9GtrBumU1TnOLBod6d3ayNI
0W6T37I5ebwl9VqZfxcnkyvgGYBvBDzMqfPa0xFpdHlbjOmb6a/Yos6i1Dqm
2bRXGs/ZGG+B8RcAzwR8E+APJDwcATxrgKflYfU+ewrMa9QJdXg64JUb/Z4X
m2NegZjXV4kPdAl8uAs+HChzJzzKPJxu/XxfedvmPL667EhYh+HJtB7wO4B7
AR4vrQs5YV22YF1+nHjgqeMXz+eO1tnl9C2O//vqVO6QbS4dqNZ1zbtMDx46
clxsDdt82nOluu/6nER6eNG2QdnEKPZJV3xNbJxNFxKidCacSKf1Gb822epG
0cmhugbeU7PprWJN3wNm6dT8w7PiaqUR1PR24dsl/rncrkT/c8dRqdSiZuUj
8RODqWbytvCu1fN5Vp+9376+T6KKO5yOnK6aQB3r7nijsHjDVR802Xw1LJdK
avwez7UwfgbGV5bwc3PgbwX8Jdt/4+ExwFMeeNwqdh2t/ObG36YcTXaxzyen
nf3cH6nkkq1EPx8H/amg31+aL/lhvucwX8+v93uHtgyn/Z075E2qmMdP55w9
eFiZQjTsikPh40Bq++P5zelN8vleVNPKo2KSqFTiM9mDzz3A5zb16jnXXv6U
647adHq+awJfut1m+r2R+dTldESTpoeZn9S1qxJ/IZteXJ8SY1wlg1Zt3xC6
5uE9iprROqH622zq4DbB786TdCpc0yChXdxTOkR3M+vWiefD90+UqXk6n5QS
nG8C7gD4DgkPRwDPf8DTUvouPcN3I/HdfyU66edIic6roFOKk1wMGr+tqf3s
YW85NlDH+/Gn/D/xotwVp4fPis2ml3auWfe6yXEeZ731Ph1mbq+aQ1Xr16py
rUB+Z+GSXr+SB4e3XY3ngOYhp+6Nl+Mwl4JMAL+uBncOWg08tdXwOOsV4rvR
at+9qNcfdMaDziaYlw7474V5yXwQ+b8AfIsW+J8JPh8Gn4+Az0lYF3/A9wFu
gXUU+V8f6y7yvzn2icx/H9D5FftKPr9dsa+CsG+vCue0LO6vI3F/bYT761XY
/+L5LSOdRxbP43fpfJF8vioAvgNyQDxHvpAb14Rz9BPyxwH09wT904VzdB/n
6APyEEqE/I1XkG9XId82Q77Vg54aJPhfJZCrHoJ+yRHiBrIdMl2Sh6QPeWgH
eXgX+RVyvkcA8it+SHqKVwl6air0uGifhEKPiPpoLOyHeYJfVkWQe60h9+oL
ctUEcnIV8kzkvJH7yBu5Dz0o66+1+O4o2D9Wgt9XUdJTJOqp+bC7RPtkhSRv
SZS3SuTPiPknn6H3RX2XJviJ8rrI9sYJrPtWrLvsJ3YQ/MHN0I+3oR+9oR9t
BH16GXDYvXRWsH9CTv69j66189/fCYLdS6LdCzuWRTs2G/akbJeawJ68Bjsk
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
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{365.41688790182826`, 178.4973473504126},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{-6.3, 6.3}, {-1., 1.}, {-1.9999997142857142`, 
   1.9999997142857142`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.963123152237914, -1.5189281990830878`, 0.6022942061001851},
  ViewVertical->{-0.1583958819924954, 0.08119540073632467, 
   0.9840315297118722}]], "Output",
 CellChangeTimes->{3.8384845116054363`*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"9d6e9043-3b86-4a92-8c9b-5fb950a15c5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "plot x^2 + y^2 <= 6 and y > 0", 
   Typeset`newq$$ = "plot x^2 + y^2 <= 6 and y > 0", Typeset`chosen$$ = 
   "RegionPlot[Evaluate[x^2 + y^2 <= 6 && y > 0], {x, -6., 6.}, {y, -6., \
6.}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "plot x^2 + y^2 <= 6 and y > 0", 
                  Defer[
                   RegionPlot[
                    Evaluate[
                    
                    And[$CellContext`x^2 + $CellContext`y^2 <= 
                    6, $CellContext`y > 0]], {$CellContext`x, -6., 
                    6.}, {$CellContext`y, -6., 6.}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"RegionPlot", "[", 
                  RowBox[{
                   RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", "^", "2"}], " ", "+", " ", 
                    RowBox[{"y", "^", "2"}]}], " ", "<=", " ", "6"}], " ", "&&",
                     " ", 
                    RowBox[{"y", " ", ">", " ", "0"}]}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"RegionPlot", "[", 
                  RowBox[{
                   RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", "^", "2"}], " ", "+", " ", 
                    RowBox[{"y", "^", "2"}]}], " ", "<=", " ", "6"}], " ", "&&",
                     " ", 
                    RowBox[{"y", " ", ">", " ", "0"}]}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"RegionPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", "^", "2"}], " ", "+", " ", 
                    RowBox[{"y", "^", "2"}]}], " ", "<=", " ", "6"}], " ", 
                    "&&", " ", 
                    RowBox[{"y", " ", ">", " ", "0"}]}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "plot x^2 + y^2 <= 6 and y > 0", 
                    Defer[
                    RegionPlot[
                    Evaluate[
                    
                    And[$CellContext`x^2 + $CellContext`y^2 <= 
                    6, $CellContext`y > 0]], {$CellContext`x, -6., 
                    6.}, {$CellContext`y, -6., 6.}]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"RegionPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", "^", "2"}], " ", "+", " ", 
                    RowBox[{"y", "^", "2"}]}], " ", "<=", " ", "6"}], " ", "&&",
                     " ", 
                    RowBox[{"y", " ", ">", " ", "0"}]}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"RegionPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", "^", "2"}], " ", "+", " ", 
                    RowBox[{"y", "^", "2"}]}], " ", "<=", " ", "6"}], " ", "&&",
                     " ", 
                    RowBox[{"y", " ", ">", " ", "0"}]}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"RegionPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", "^", "2"}], " ", "+", " ", 
                    RowBox[{"y", "^", "2"}]}], " ", "<=", " ", "6"}], " ", 
                    "&&", " ", 
                    RowBox[{"y", " ", ">", " ", "0"}]}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[258]:=",ExpressionUUID->"48cb8adb-ae40-4b48-8339-461df2639a9b"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxdln9o1GUYwO/HFJI2xxpkQ92urXm4aZvtFMfy+8XZqCax1Ppj0dHKYmTU
KqFmUia2CBEDrWA6cbq/1uGhTEE7+H4LmdugkXB01cKkTsl+bO6cy7W8td1z
n2fwDsbL533e58f7PM/7fC/w4htbXvZ5PJ6/Zv/n1u5FBzcHo1634N6BG8lQ
3KpaXFsWrp9y4EcLIuFE06hyjazK5lop55WDYk+5S/zZMP7Rwz+Mfxj/ph/Y
XPEP49/0xzn8wfgz72Hahc0Ve/jFnpkHMy54fYbTTnHm3IRVLWzBK2R1zH14
+/6KIx0pn+vN7F+0XhC2YewXZTipTFzYRw5r3mVf5TByT+bvcgw5jJx9c0XO
fdiHkXNP5LDZX8h/+SR1d3CHR/NBfkozelesSK734+7YpIO8JlPHG8qPyaqM
HtyZ8TeuHMl/++uioWll6ko81AM75I97wOg1yDkHPfLJeZjzxGvWHTbzBqNP
XJwnn9jpk/tpPnhP8EnJhzLvAeY+mu/s+4DNlbpq/qU+yrwfuEfqqcy7hEek
H2yzPmaezDlDvqg3duhPmPeEHv2HHu8JPfIHk1/uoX2RtYcf0x73pJ/pQ/KP
Hepjxm+u2CMO7KFHn3AOPc6hx32Il/vSd8ixR7zIiRc5/YKcfkJuzhnz3ZJH
5PSTeR/k3AM5+cYO+eZ+p3bWn2163a/f15E91xqDi336vdP59Oyd1tRPNy1f
3qc/JG/f1frpvMjKyde/uZlzVpns63xADzn5S4hf/f70Slza1zBxcT5n366q
8Fafe6IyPTzj/GnV7bueSD6TdkqnL83qbbM6ehsPdFf63WMfff9OIv+qtfJ9
30up2gmVr7lZ9/OMlVQuXTbnb5tyYXDrP4MVs3nP8tLOA22Jqgnl1cffvDbY
mFbe2DpQ0v6Z3+5/b6K4PbfP2iv+bfyH/sj7qqnc424ZXu+NVk9ahZe+tOsH
5/u6WfadajlnX99Ycz4Uv6PvKip2HOw+tTvjxzH9wvjlPPU86Z/zt13rBVMP
mHrA1AOmHjD1hak7bNZ1idzf5f7MI+5Nn2CXPCAflVXnBf1u5hVukLy45OlE
feU90dNel/pdqFvV2bHX77YGfvsxGfrWog7Ui5X9Y6Jvo39O9G30h3LLqsO3
vO53yz3jp1rGrH5hGx4YW9oXOjftuLJa5vqrnHNMPZh8kV/ur/XJfp9hvr+w
zq0sky9Y53CWWx4YD7T/7dPfKzU9gYuhHp/7ylsFA0WLfreOXx4/2B2Zz+eS
C88tjD7hd/ccXbng8Bcj1qqumd6mDVP6vtauXvdarGFUObjpSk40EFdeHj89
XPRkXN/XmsmSp1PNo8oVH+7s2vH4lPLzEp/+bigU/zb+PTIvbOZFlcRvEz/5
ws4ZOeeg966cc9DrEbsOfsjvNzn3fxD73G9HpA8csy9g4sQfcWKPOPFPnPhf
K/NH8/WI5EO5TOaV8ibJn3K5zDdlW/I9Pw+NdaHUR7lE5qdyudRT+UGZt8oP
Sf2Va2ReKx+V/tH3xJxnzrS1rXg4fN8tqz+2YSy5bP67w5zhu5b3av5/g7tn
38vVBS2p5tv6O2BI9FzsHKk94zlcnHb2r7P7iwqm1C7yQ7LvHJJz1i7ZdziH
HnJW9v8Hsu4ARA==
    "], {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[0.3], EdgeForm[None], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwNw+VTWgEAAHB5jweP7g55dNuKICh2J4ogIoIiKSLCufTO9eacq89rN7eZ
H9edt+5yc/F/zN/dD/EnOv1AVlbW+mZwcySMxKKy0bhiLKEaT2omUrphkyHk
FrgIdAaByCSSWCRy0E/xiehmBtfK5HU7xL1OQViGjyoIcRUxoSEldeSUgeJ2
0Rx2FpHJILGYfhZ5JCj0mTlWLsPOY+YgOAKD7hFSivWYgJjVKYGlCMqJ4HOl
qIgUkMuAtIyQLwdiclCpAAkKYoESHFWi1Sp0Th5qwCsaU0NaDUTSkIu00LgW
o9dhyDoKUUWa0GONBqzHQC0xYoeNMJKDqs5FFarRSBgvCwONhejmIqi1GNNe
gjWYqKUmuKsUZpjpFjPXbOGUWbhMK8Nm5Vlt3Aobz1bONXbAHZ2wvZJXWcXL
rkZJa4CaWkBeB9bVgyw7s6ERrW6CmpohbQumpRWjb8O2tWMr7fzafEDSBQeG
xGIHy9HN7+kWI05cyIl39uIyaZfXRe9z0zJuvLtPYPBQ+j1UT7/Q5aXVF4B2
B3/QxzH76L5BEcVPDvjZ/gBrKMAWeemmYdg4bPAH2cIgJTjCdofwzpDAO0BT
NqDDEeDO/sJoDJTHZIo4MT6KVkRBVRwtixKS4xjlqEKVIGnHNTNXJa40IZ3B
T+7CGVJYWRqfmsDqJ3S6FMWdcb08UaFLYtRjqg8f6969r9lzM+/tq8pPnxt+
rLf9/NXx5WvTt+8tmiR5/mL2kQXh6VmBJgElxqDr13LOz4lOvq6afsM/ell8
/EX582Nl0giyvJW2ZRE3d070dIqzNs2/f6hkY4n6+2/3mRX2k2eWKzOShbPC
lZ3sS/PZU6ucpW3UxUnc7CnBnzX+9mXa6g7Ojd25Dx6bHh4ufbRBvXew+O6B
on8Xem7tzb+9r+A/qCa6vg==
          "]], 
         PolygonBox[{{141, 196, 56, 57}, {131, 187, 47, 9}, {125, 234, 97, 
          23}, {159, 230, 88, 27}, {189, 119, 1, 49}, {128, 203, 60, 24}, {
          186, 133, 49, 47}, {153, 192, 52, 74}, {146, 200, 59, 60}, {119, 
          168, 31, 1}, {157, 171, 32, 82}, {165, 226, 85, 86}, {156, 195, 55, 
          80}, {154, 193, 53, 76}, {155, 194, 54, 78}, {158, 197, 57, 83}, {
          123, 232, 93, 16}, {150, 188, 48, 68}, {163, 233, 95, 29}, {151, 
          190, 50, 70}, {148, 204, 62, 64}, {199, 198, 16, 56}, {126, 235, 
          100, 22}, {152, 191, 51, 72}, {232, 143, 28, 93}, {170, 229, 86, 
          30}, {209, 210, 66, 26}, {179, 211, 69, 34}, {204, 147, 63, 62}, {
          218, 154, 76, 75}, {182, 217, 75, 40}, {216, 153, 74, 73}, {212, 
          151, 70, 69}, {181, 215, 73, 38}, {205, 128, 24, 63}, {208, 129, 25,
           67}, {231, 160, 27, 91}, {230, 121, 9, 88}, {207, 149, 67, 66}, {
          184, 221, 79, 44}, {234, 164, 29, 97}, {167, 150, 68, 31}, {183, 
          219, 77, 42}, {214, 152, 72, 71}, {180, 213, 71, 36}, {122, 231, 91,
           17}, {138, 184, 44, 54}, {137, 183, 42, 53}, {139, 185, 46, 55}, {
          136, 182, 40, 52}, {202, 201, 23, 59}, {233, 124, 17, 95}, {162, 
          236, 103, 28}, {135, 181, 38, 51}, {134, 180, 36, 50}, {172, 158, 
          83, 32}, {220, 155, 78, 77}, {235, 145, 30, 100}, {132, 179, 34, 
          48}, {228, 227, 26, 85}, {222, 156, 80, 79}, {129, 206, 64, 25}, {
          224, 157, 82, 81}, {185, 223, 81, 46}, {236, 161, 22, 
          103}}]}]}, {}, {}, {}, {}}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
      LineBox[{132, 179, 211, 212, 151, 190, 134, 180, 213, 214, 152, 191, 
       135, 181, 215, 216, 153, 192, 136, 182, 217, 218, 154, 193, 137, 183, 
       219, 220, 155, 194, 138, 184, 221, 222, 156, 195, 139, 185, 223, 224, 
       157, 171, 140, 172, 158, 197, 141, 196, 199, 198, 225, 174, 123, 232, 
       143, 169, 162, 236, 161, 176, 126, 235, 145, 170, 229, 165, 226, 228, 
       227, 178, 130, 209, 210, 207, 149, 208, 129, 206, 148, 204, 147, 205, 
       128, 203, 146, 200, 202, 201, 127, 177, 125, 234, 164, 144, 163, 233, 
       124, 175, 122, 231, 160, 142, 159, 230, 121, 173, 120, 131, 187, 186, 
       133, 189, 119, 168, 166, 167, 150, 188, 132}]}}], {}},
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "ScalingFunctions" -> 
    None, "TransparentPolygonMesh" -> True, "AxesInFront" -> True},
  PlotRange->{{-6., 6.}, {-6., 6.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384846111050873`*^9},
 CellLabel->
  "Out[258]=",ExpressionUUID->"8e0ec0de-c73b-4c97-8434-8e2a6ef93762"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "number of turkeys in turkey", 
   Typeset`newq$$ = "number of turkeys in turkey", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Turkey\"][EntityProperty[\"Country\", \
\"LivestockPopulation\", {\"FAOLivestockType\" -> \"Turkeys\"}]]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "number of turkeys in turkey", 
                  Defer[
                   Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "number of turkeys in turkey", 
                    Defer[
                    Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[259]:=",ExpressionUUID->"d47a9578-d38a-4216-b4b5-b9bcf83004fa"],

Cell[BoxData["3.183`3.*^6"], "Output",
 CellChangeTimes->{3.838484663595275*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"4cd5c90a-bde6-4055-85de-1990b2928324"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "population of Germany", Typeset`newq$$ = 
   "population of Germany", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Germany\"][EntityProperty[\"Country\", \"Population\
\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "population of Germany", 
                  Defer[
                   Entity["Country", "Germany"][
                    EntityProperty["Country", "Population"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"Population\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "population of Germany", 
                    Defer[
                    Entity["Country", "Germany"][
                    EntityProperty["Country", "Population"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"Population\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[260]:=",ExpressionUUID->"f1fb24d6-58eb-4800-a812-5c7b73a5a929"],

Cell[BoxData[
 TemplateBox[{"83783945", "\"people\"", "people", "\"People\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.83848471336589*^9},
 CellLabel->
  "Out[260]=",ExpressionUUID->"454ce765-b6ae-46fe-bdb1-f1dc74d2ba93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "population of Munich", Typeset`newq$$ = 
   "population of Munich", Typeset`chosen$$ = 
   "Entity[\"City\", {\"Munich\", \"Bavaria\", \
\"Germany\"}][EntityProperty[\"City\", \"Population\"]]", Typeset`open$$ = 
   False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              "population of Munich", 
               Defer[
                Entity["City", {"Munich", "Bavaria", "Germany"}][
                 EntityProperty["City", "Population"]]], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "population of Munich", 
                  Defer[
                   Entity["City", {"Munich", "Bavaria", "Germany"}][
                    EntityProperty["City", "Population"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Munich\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Munich\"", ",", "\"Bavaria\"", ",", "\"Germany\""}], 
                    "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Munich\\\", \\\"Bavaria\\\", \
\\\"Germany\\\"}]\"", "\"city\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Munich\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Munich\"", ",", "\"Bavaria\"", ",", "\"Germany\""}], 
                    "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Munich\\\", \\\"Bavaria\\\", \
\\\"Germany\\\"}]\"", "\"city\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Munich\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Munich\"", ",", "\"Bavaria\"", ",", 
                    "\"Germany\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Munich\\\", \\\"Bavaria\\\", \
\\\"Germany\\\"}]\"", "\"city\""}, "Entity"], "[", 
                    TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""}, 
                    "EntityProperty"], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "population of Munich", 
                   Defer[
                    Entity["City", {"Munich", "Bavaria", "Germany"}][
                    EntityProperty["City", "Population"]]], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "population of Munich", 
                    Defer[
                    Entity["City", {"Munich", "Bavaria", "Germany"}][
                    EntityProperty["City", "Population"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Munich\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Munich\"", ",", "\"Bavaria\"", ",", 
                    "\"Germany\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Munich\\\", \\\"Bavaria\\\", \
\\\"Germany\\\"}]\"", "\"city\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Munich\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Munich\"", ",", "\"Bavaria\"", ",", 
                    "\"Germany\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Munich\\\", \\\"Bavaria\\\", \
\\\"Germany\\\"}]\"", "\"city\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Munich\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Munich\"", ",", "\"Bavaria\"", ",", 
                    "\"Germany\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Munich\\\", \\\"Bavaria\\\", \
\\\"Germany\\\"}]\"", "\"city\""}, "Entity"], "[", 
                    TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""}, 
                    "EntityProperty"], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[261]:=",ExpressionUUID->"735644b4-ee10-4a55-b876-b37454e8d5d2"],

Cell[BoxData[
 TemplateBox[{"1500560", "\"people\"", "people", "\"People\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.83848472878065*^9},
 CellLabel->
  "Out[261]=",ExpressionUUID->"2fdf7f80-9b59-43db-92eb-225f60816773"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "caffeine molecule", Typeset`newq$$ = 
   "caffeine molecule", Typeset`chosen$$ = 
   "Molecule[Entity[\"Chemical\", \"Caffeine\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "caffeine molecule", 
                  Defer[
                   Molecule[
                    Entity["Chemical", "Caffeine"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Molecule", "[", 
                  TemplateBox[{"\"caffeine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"", 
                    "\"chemical\""},
                   "Entity"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Molecule", "[", 
                  TemplateBox[{"\"caffeine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"", 
                    "\"chemical\""},
                   "Entity"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"caffeine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"", 
                    "\"chemical\""}, "Entity"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "caffeine molecule", 
                    Defer[
                    Molecule[
                    Entity["Chemical", "Caffeine"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"caffeine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"", 
                    "\"chemical\""},
                    "Entity"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"caffeine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"", 
                    "\"chemical\""},
                    "Entity"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"caffeine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"", 
                    "\"chemical\""}, "Entity"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[262]:=",ExpressionUUID->"a003925a-3b5b-4382-9cf3-6b684b28f28c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Molecule",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               StyleBox[{
                 
                 LineBox[{{{3.7921, 1.8138914166666666`}, {3.7921, 
                  1.4069457083333332`}}, {{3.6721, 1.8138914166666666`}, {
                  3.6721, 1.4069457083333332`}}}], 
                 
                 LineBox[{{{2.123878534341068, -0.8591940564018317}, {
                  2.479938937159644, -0.6536164566220537}}, {{
                  2.1838798543846294`, -0.9631163427172804}, {
                  2.539940257203205, -0.7575387429375025}}}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 LineBox[{{{3.7921, 1.4069457083333332`}, {3.7921, 1.}}, {{
                  3.6721, 1.4069457083333332`}, {3.6721, 1.}}}], 
                 
                 LineBox[{{{2.479938937159644, -0.6536164566220537}, {
                  2.8359993399782195`, -0.4480388568422757}}, {{
                  2.539940257203205, -0.7575387429375025}, {
                  2.8960006600217807`, -0.5519611431577244}}}], 
                 
                 LineBox[{{4.234206191436269, -0.7101003513647408}, {
                  4.5981, -0.5}}], 
                 
                 LineBox[{{3.22994181375266, -0.7101038065769887}, {
                  2.866, -0.5}}], 
                 LineBox[{{3.7321, -1.5911866666666667`}, {3.7321, -2.}}], 
                 
                 LineBox[{{4.995243668982119, 0.6278901669190993}, {4.5981, 
                  0.5}}], 
                 
                 LineBox[{{5.889635190252114, 0.32853271488026803`}, {
                  6.127900000000001, 0.}}], 
                 
                 LineBox[{{5.727979220759462, 1.3666744681491587`}, {5.855, 
                  1.7553}}], 
                 
                 LineBox[{{3.3681581862473404`, 0.7898961934230113}, {3.7321, 
                  1.}}], 
                 LineBox[{{2.866, -0.0911866666666667}, {2.866, -0.5}}], 
                 LineBox[{{2.363893808563731, 0.7898996486352592}, {2., 1.}}], 
                 
                 LineBox[{{4.995243668982119, -0.6278901669190993}, {
                  4.5981, -0.5}}], 
                 
                 LineBox[{{{5.889635190252114, -0.32853271488026803`}, {
                  6.127900000000001, 0.}}, {{
                  5.763138256559612, -0.2985572955104733}, {
                  5.972048341428801, -0.010500500969289131`}}}], 
                 
                 LineBox[{{{4.5981, 0.5}, {4.5981, -0.5}}, {{4.7181, 0.4}, {
                  4.7181, -0.4}}}], 
                 LineBox[{{4.5981, 0.5}, {3.7321, 1.}}]}, {
                 RGBColor[0.4, 0.4, 0.4]}, StripOnInput -> False], 
               StyleBox[{
                 
                 LineBox[{{3.870312382872538, -0.9202007027294815}, {
                  4.234206191436269, -0.7101003513647408}}], 
                 
                 LineBox[{{3.5938836275053196`, -0.9202076131539774}, {
                  3.22994181375266, -0.7101038065769887}}], 
                 
                 LineBox[{{3.7321, -1.1823733333333333`}, {
                  3.7321, -1.5911866666666667`}}], 
                 
                 LineBox[{{5.392387337964238, 0.7557803338381985}, {
                  4.995243668982119, 0.6278901669190993}}], 
                 
                 LineBox[{{5.651370380504226, 0.6570654297605361}, {
                  5.889635190252114, 0.32853271488026803`}}], 
                 
                 LineBox[{{5.600958441518922, 0.9780489362983171}, {
                  5.727979220759462, 1.3666744681491587`}}], 
                 
                 LineBox[{{3.0042163724946804`, 0.5797923868460226}, {
                  3.3681581862473404`, 0.7898961934230113}}], 
                 
                 LineBox[{{2.866, 0.31762666666666667`}, {
                  2.866, -0.0911866666666667}}], 
                 
                 LineBox[{{2.727787617127462, 0.5797992972705185}, {
                  2.363893808563731, 0.7898996486352592}}], 
                 LineBox[{{5.392387337964238, -0.7557803338381985}, {
                  4.995243668982119, -0.6278901669190993}}], 
                 
                 LineBox[{{{5.651370380504226, -0.6570654297605361}, {
                  5.889635190252114, -0.32853271488026803`}}, {{
                  5.554228171690425, -0.5866140900516574}, {
                  5.763138256559612, -0.2985572955104733}}}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609]}, StripOnInput -> 
                False]}, {
               TagBox[
                TooltipBox[{{
                   RGBColor[0.801, 0.202, 0.192], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQAmIQvTUjP46Lk9dhYXDtFZ8v/+1h/OxTGivVnBkcnl7q
Ylwiw+ug9Pn2K58aBocKvu/K1515Hb4qR+jPXMrg0P3yYAxXNq/Dxf624Gfn
GBxsj2p+WjyX1+HA0blPex4zOPA69v5afBvBP+eh2WvLwgfnG3j0GFzX4HPo
i/vVcvMmg8M6xbslBZ58DjoTNh8uOsbgYLQj1Z4ri8/hyh+5RzybGRyWT70y
+3ETn0N9wsKX/6czOIh/vZ35dzKfg8W3Nzt9Shkc2kMem4sv5XP42G3RNTOI
wcGe5bnckrV8Dg6cbhYO2gi+ZdqxE/X//tvD+N/Y4mf4LP1vv+Txn/uLl/A5
LDoc9rg+9L99xd1bjksm8TnYxH6okeT/b+88h+3I4gY+h2vfOsU2n/hnf+yt
f6JKOp/D3Q25gWmT/9m/jQ6KUnHjcwj0ucdgnP/PXtDn1k9lVT6HY2o8d/97
/bNvv1cS28XI59BQcsTkmcU/e5+py7XDgeED49+TWH7sw0YEf1ldwYUPPbwO
CTIxVs98/tmrqi81Cs/hdVDM6XZ9VvLPfvH5m1P2evM6PNy9K+DZHKB5lh/T
uYx5HT7Nj75af/mf/fwjPVNtlXgdQsO1GTZL/Lf/5K9xuECQ12GX747wZ7GI
+K7hPVgouRzBh6UHAPxc99s=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQXbO3N57LlddBbMLjkvpP/+1h/FU3Pzys7/hvz+jX
GOcVzOtgGl158r/Jf3ve/IyYU/m8DvsEiu79//7PXnKCf5RXD6+D+7Gsz/93
/bN3UQ7P5NrA69Dd2PG8fs4/++6XB2O4biP4DSoTla6z8cH52cl1DE+0+Bza
L31c7bP7n72XBv9cA3c+h4aSIybPfvyz19aJTatN5nOoDg15VW/2336B912r
JYV8DhbrIh2f9SL4e//4TZb8j+BP1OoKj1RmcGDIrvo6LZvPIScvXmqmE4PD
qSdpXrXxfA6/Wm5+9IllcJgcFzw/OZjPoT5h4cv/5QwOGiziFzY48jl8ulC+
fVMPg0P9rP9/koHuixHkt06bzeBwzeCFprgwn8PxwGX7JFcxOBy7duPUhx+8
DhVXZggUb2RwOPem6OSH2wh+dy/3zL2bEHzFZS8jvPp5HXg+nJL2XQy0v/SU
6fRCXgftNzVBDO0MDs1Lff48Boa39wu9zs1ZDA6w+Hjd1hBWbI3gw+ILAFo2
yW8=
                    "]}]}}, "1"], Annotation[#, 1, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.801, 0.202, 0.192], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQAmIQXZbSYZ8W/c8+fk2T9mbuD/th/JBrMdGpn9/tv26x
v3Vm0z/7SuMJIWf43u3/s376qf8X/tnrFMx3mp35dr9ymq5Nmvx/+10Hnm5M
O/Jmf5vs37SZLf/tGV92ZJ4pfLN/Mtej3T4MDA4wfohQnd8zDQR/m+DDj/W+
DA7HWsXezJzxZr/Ja0MzyTwGB//9hh9Nnr3Zv6NxF8PmPgaHTTwt5WeM3+7X
jdeM7VnO4MBSVxXJsODt/rn7DLSX7WBwUFT3kTir9W4/r5zFz/0nGRxsL8he
n7n13f6jZ60f+FxicPh/67nc/6D3cP7xmZbmDYwf4HyunwvSN0d92K+1NnCh
D1B/nM1KmYZVH/b/W6bP7LudweHIIv7mZx8+7D+ZGt3qs5TBQYuz7KWP+cf9
PtuXKJ3tZnBQ9p+0bmbOx/3Fqsulz2YxOKzfrPj/zISP+6eL6u8+48ngYHXz
sxLD1o/7eVeclDNWY3Bo6LY+LXn84/6le3/c/P//vz2Mf+LId37jtQh+5IQu
ZePk//YLHi8+Krn54/7Qh5+f/1f8b39/cskuye6P+4OMYtecefDPXt7Fdb1k
8sf9S1h7gtLW/7PnS1ii1aDzcb+XzOG1Z3r/2a9eceW/z/MP+z8Y/eIwzvln
77bJfYXkIkR8t3yy63sWgeDD0gMAoYQdCg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQzcx31DHt8j/7V/ky3Q28H/bD+GFq/HIN5R/28+uv
sX/2/p/96SVtZgynP+xXL6yyfqbx397pfa8iA8fH/fabPcyfJf6332k5lYfB
9eP+KTfDQ9NW/rcvrSuXaEj+uF85Tdcm7T+Cz/bu6eN6bQYHGP+jzuWDPf4M
DpW6fCGbXT7uv/AxOe5mNoNDQ7f1aUn2j/s3ft2ortbB4NC6arVow8kP+9VE
jf74TGNwOBG4bJ9kEYLvzLwx5xkDgr8v9PrCWUXv97eZnN9mP4HBIcCtadrs
r+/2B6zbza3WwuAg/mamxZmud/slNVYk8FQwOLDUVUUyKLzbv+5s9sTINAYH
yz0KSqZn3+5nTQnZxwN0X9+uw8Lpk97uj/ll83q/OYPDkx1prDPD3+73WaDb
M1OWwUFp3Zy9xlZv94dsO941kwHBV1p3YMuZdf/tYXy/+zUmz9L/21+wvzLh
dNHb/YZ1du/qdf7bB/vzbPv3+O1+oXtO1ZIf/9lfjXO5bRj6DhEfT/4uNRJ6
vx89vgCsidtF
                    "]}]}}, "2"], Annotation[#, 2, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{3.6475049166666667`, -1.1073733333333333`}, {
                    3.6475049166666667`, -0.8926266666666667}, {
                    3.6766554166666667`, -0.8926266666666667}, {
                    3.7894484166666667`, -1.0612308333333333`}, {
                    3.7894484166666667`, -0.8926266666666667}, {
                    3.8166950833333333`, -0.8926266666666667}, {
                    3.8166950833333333`, -1.1073733333333333`}, {
                    3.787544083333333, -1.1073733333333333`}, {
                    3.6747510833333332`, -0.9386233333333334}, {
                    3.6747510833333332`, -1.1073733333333333`}}}]}}, "3"], 
                Annotation[#, 3, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{5.4597049166666665`, 0.6973266666666665}, {
                    5.4597049166666665`, 0.9120733333333333}, {
                    5.4888554166666665`, 0.9120733333333333}, {
                    5.6016484166666665`, 0.7434691666666666}, {
                    5.6016484166666665`, 0.9120733333333333}, {
                    5.628895083333333, 0.9120733333333333}, {
                    5.628895083333333, 0.6973266666666665}, {
                    5.599744083333333, 0.6973266666666665}, {
                    5.4869510833333335`, 0.8660766666666666}, {
                    5.4869510833333335`, 0.6973266666666665}}}]}}, "4"], 
                Annotation[#, 4, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{2.781404916666667, 0.3926266666666667}, {
                    2.781404916666667, 0.6073733333333333}, {
                    2.810555416666667, 0.6073733333333333}, {
                    2.923348416666667, 0.43876916666666665`}, {
                    2.923348416666667, 0.6073733333333333}, {
                    2.9505950833333334`, 0.6073733333333333}, {
                    2.9505950833333334`, 0.3926266666666667}, {
                    2.9214440833333333`, 0.3926266666666667}, {
                    2.8086510833333334`, 0.5613766666666666}, {
                    2.8086510833333334`, 0.3926266666666667}}}]}}, "5"], 
                Annotation[#, 5, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{5.4597049166666665`, -0.9120733333333334}, {
                    5.4597049166666665`, -0.6973266666666667}, {
                    5.4888554166666665`, -0.6973266666666667}, {
                    5.6016484166666665`, -0.8659308333333333}, {
                    5.6016484166666665`, -0.6973266666666667}, {
                    5.628895083333333, -0.6973266666666667}, {
                    5.628895083333333, -0.9120733333333334}, {
                    5.599744083333333, -0.9120733333333334}, {
                    5.4869510833333335`, -0.7433233333333333}, {
                    5.4869510833333335`, -0.9120733333333334}}}]}}, "6"], 
                Annotation[#, 6, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{4.5981, 0.5}, 0.2]}, "7"], 
                Annotation[#, 7, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{4.5981, -0.5}, 0.2]}, "8"], 
                Annotation[#, 8, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{3.7321, 1.}, 0.2]}, "9"], 
                Annotation[#, 9, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{2.866, -0.5}, 0.2]}, "10"], 
                Annotation[#, 10, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{6.127900000000001, 0.}, 0.2]}, "11"], 
                Annotation[#, 11, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{3.7321, -2.}, 0.2]}, "12"], 
                Annotation[#, 12, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{5.855, 1.7553}, 0.2]}, "13"], 
                Annotation[#, 13, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{2., 1.}, 0.2]}, "14"], 
                Annotation[#, 14, "Tooltip"]& ]}}, Frame -> True, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> None, ImageSize -> Dynamic[{
                UpTo[
                8.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])], 
                UpTo[
                4.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])]}], {
             AspectRatio -> 0.9521209795563798, 
              PlotRangePadding -> {0.08, 0.07616967836451038}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Formula: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    SubscriptBox["\"C\"", "8"], 
                    SubscriptBox["\"H\"", "10"], 
                    SubscriptBox["\"N\"", "4"], 
                    SubscriptBox["\"O\"", "2"]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Atoms: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["24", "SummaryItem"]}], "\"  \"", 
                  RowBox[{
                    TagBox["\"Bonds: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["25", "SummaryItem"]}]}, "RowDefault"], 
                "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               StyleBox[{
                 
                 LineBox[{{{3.7921, 1.8138914166666666`}, {3.7921, 
                  1.4069457083333332`}}, {{3.6721, 1.8138914166666666`}, {
                  3.6721, 1.4069457083333332`}}}], 
                 
                 LineBox[{{{2.123878534341068, -0.8591940564018317}, {
                  2.479938937159644, -0.6536164566220537}}, {{
                  2.1838798543846294`, -0.9631163427172804}, {
                  2.539940257203205, -0.7575387429375025}}}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 LineBox[{{{3.7921, 1.4069457083333332`}, {3.7921, 1.}}, {{
                  3.6721, 1.4069457083333332`}, {3.6721, 1.}}}], 
                 
                 LineBox[{{{2.479938937159644, -0.6536164566220537}, {
                  2.8359993399782195`, -0.4480388568422757}}, {{
                  2.539940257203205, -0.7575387429375025}, {
                  2.8960006600217807`, -0.5519611431577244}}}], 
                 
                 LineBox[{{4.234206191436269, -0.7101003513647408}, {
                  4.5981, -0.5}}], 
                 
                 LineBox[{{3.22994181375266, -0.7101038065769887}, {
                  2.866, -0.5}}], 
                 LineBox[{{3.7321, -1.5911866666666667`}, {3.7321, -2.}}], 
                 
                 LineBox[{{4.995243668982119, 0.6278901669190993}, {4.5981, 
                  0.5}}], 
                 
                 LineBox[{{5.889635190252114, 0.32853271488026803`}, {
                  6.127900000000001, 0.}}], 
                 
                 LineBox[{{5.727979220759462, 1.3666744681491587`}, {5.855, 
                  1.7553}}], 
                 
                 LineBox[{{3.3681581862473404`, 0.7898961934230113}, {3.7321, 
                  1.}}], 
                 LineBox[{{2.866, -0.0911866666666667}, {2.866, -0.5}}], 
                 LineBox[{{2.363893808563731, 0.7898996486352592}, {2., 1.}}], 
                 
                 LineBox[{{4.995243668982119, -0.6278901669190993}, {
                  4.5981, -0.5}}], 
                 
                 LineBox[{{{5.889635190252114, -0.32853271488026803`}, {
                  6.127900000000001, 0.}}, {{
                  5.763138256559612, -0.2985572955104733}, {
                  5.972048341428801, -0.010500500969289131`}}}], 
                 
                 LineBox[{{{4.5981, 0.5}, {4.5981, -0.5}}, {{4.7181, 0.4}, {
                  4.7181, -0.4}}}], 
                 LineBox[{{4.5981, 0.5}, {3.7321, 1.}}]}, {
                 RGBColor[0.4, 0.4, 0.4]}, StripOnInput -> False], 
               StyleBox[{
                 
                 LineBox[{{3.870312382872538, -0.9202007027294815}, {
                  4.234206191436269, -0.7101003513647408}}], 
                 
                 LineBox[{{3.5938836275053196`, -0.9202076131539774}, {
                  3.22994181375266, -0.7101038065769887}}], 
                 LineBox[{{3.7321, -1.1823733333333333`}, {
                  3.7321, -1.5911866666666667`}}], 
                 
                 LineBox[{{5.392387337964238, 0.7557803338381985}, {
                  4.995243668982119, 0.6278901669190993}}], 
                 
                 LineBox[{{5.651370380504226, 0.6570654297605361}, {
                  5.889635190252114, 0.32853271488026803`}}], 
                 
                 LineBox[{{5.600958441518922, 0.9780489362983171}, {
                  5.727979220759462, 1.3666744681491587`}}], 
                 
                 LineBox[{{3.0042163724946804`, 0.5797923868460226}, {
                  3.3681581862473404`, 0.7898961934230113}}], 
                 
                 LineBox[{{2.866, 0.31762666666666667`}, {
                  2.866, -0.0911866666666667}}], 
                 
                 LineBox[{{2.727787617127462, 0.5797992972705185}, {
                  2.363893808563731, 0.7898996486352592}}], 
                 
                 LineBox[{{5.392387337964238, -0.7557803338381985}, {
                  4.995243668982119, -0.6278901669190993}}], 
                 
                 LineBox[{{{5.651370380504226, -0.6570654297605361}, {
                  5.889635190252114, -0.32853271488026803`}}, {{
                  5.554228171690425, -0.5866140900516574}, {
                  5.763138256559612, -0.2985572955104733}}}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609]}, StripOnInput -> 
                False]}, {
               TagBox[
                TooltipBox[{{
                   RGBColor[0.801, 0.202, 0.192], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQAmIQvTUjP46Lk9dhYXDtFZ8v/+1h/OxTGivVnBkcnl7q
Ylwiw+ug9Pn2K58aBocKvu/K1515Hb4qR+jPXMrg0P3yYAxXNq/Dxf624Gfn
GBxsj2p+WjyX1+HA0blPex4zOPA69v5afBvBP+eh2WvLwgfnG3j0GFzX4HPo
i/vVcvMmg8M6xbslBZ58DjoTNh8uOsbgYLQj1Z4ri8/hyh+5RzybGRyWT70y
+3ETn0N9wsKX/6czOIh/vZ35dzKfg8W3Nzt9Shkc2kMem4sv5XP42G3RNTOI
wcGe5bnckrV8Dg6cbhYO2gi+ZdqxE/X//tvD+N/Y4mf4LP1vv+Txn/uLl/A5
LDoc9rg+9L99xd1bjksm8TnYxH6okeT/b+88h+3I4gY+h2vfOsU2n/hnf+yt
f6JKOp/D3Q25gWmT/9m/jQ6KUnHjcwj0ucdgnP/PXtDn1k9lVT6HY2o8d/97
/bNvv1cS28XI59BQcsTkmcU/e5+py7XDgeED49+TWH7sw0YEf1ldwYUPPbwO
CTIxVs98/tmrqi81Cs/hdVDM6XZ9VvLPfvH5m1P2evM6PNy9K+DZHKB5lh/T
uYx5HT7Nj75af/mf/fwjPVNtlXgdQsO1GTZL/Lf/5K9xuECQ12GX747wZ7GI
+K7hPVgouRzBh6UHAPxc99s=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQXbO3N57LlddBbMLjkvpP/+1h/FU3Pzys7/hvz+jX
GOcVzOtgGl158r/Jf3ve/IyYU/m8DvsEiu79//7PXnKCf5RXD6+D+7Gsz/93
/bN3UQ7P5NrA69Dd2PG8fs4/++6XB2O4biP4DSoTla6z8cH52cl1DE+0+Bza
L31c7bP7n72XBv9cA3c+h4aSIybPfvyz19aJTatN5nOoDg15VW/2336B912r
JYV8DhbrIh2f9SL4e//4TZb8j+BP1OoKj1RmcGDIrvo6LZvPIScvXmqmE4PD
qSdpXrXxfA6/Wm5+9IllcJgcFzw/OZjPoT5h4cv/5QwOGiziFzY48jl8ulC+
fVMPg0P9rP9/koHuixHkt06bzeBwzeCFprgwn8PxwGX7JFcxOBy7duPUhx+8
DhVXZggUb2RwOPem6OSH2wh+dy/3zL2bEHzFZS8jvPp5HXg+nJL2XQy0v/SU
6fRCXgftNzVBDO0MDs1Lff48Boa39wu9zs1ZDA6w+Hjd1hBWbI3gw+ILAFo2
yW8=
                    "]}]}}, "1"], Annotation[#, 1, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.801, 0.202, 0.192], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQAmIQXZbSYZ8W/c8+fk2T9mbuD/th/JBrMdGpn9/tv26x
v3Vm0z/7SuMJIWf43u3/s376qf8X/tnrFMx3mp35dr9ymq5Nmvx/+10Hnm5M
O/Jmf5vs37SZLf/tGV92ZJ4pfLN/Mtej3T4MDA4wfohQnd8zDQR/m+DDj/W+
DA7HWsXezJzxZr/Ja0MzyTwGB//9hh9Nnr3Zv6NxF8PmPgaHTTwt5WeM3+7X
jdeM7VnO4MBSVxXJsODt/rn7DLSX7WBwUFT3kTir9W4/r5zFz/0nGRxsL8he
n7n13f6jZ60f+FxicPh/67nc/6D3cP7xmZbmDYwf4HyunwvSN0d92K+1NnCh
D1B/nM1KmYZVH/b/W6bP7LudweHIIv7mZx8+7D+ZGt3qs5TBQYuz7KWP+cf9
PtuXKJ3tZnBQ9p+0bmbOx/3Fqsulz2YxOKzfrPj/zISP+6eL6u8+48ngYHXz
sxLD1o/7eVeclDNWY3Bo6LY+LXn84/6le3/c/P//vz2Mf+LId37jtQh+5IQu
ZePk//YLHi8+Krn54/7Qh5+f/1f8b39/cskuye6P+4OMYtecefDPXt7Fdb1k
8sf9S1h7gtLW/7PnS1ii1aDzcb+XzOG1Z3r/2a9eceW/z/MP+z8Y/eIwzvln
77bJfYXkIkR8t3yy63sWgeDD0gMAoYQdCg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQzcx31DHt8j/7V/ky3Q28H/bD+GFq/HIN5R/28+uv
sX/2/p/96SVtZgynP+xXL6yyfqbx397pfa8iA8fH/fabPcyfJf6332k5lYfB
9eP+KTfDQ9NW/rcvrSuXaEj+uF85Tdcm7T+Cz/bu6eN6bQYHGP+jzuWDPf4M
DpW6fCGbXT7uv/AxOe5mNoNDQ7f1aUn2j/s3ft2ortbB4NC6arVow8kP+9VE
jf74TGNwOBG4bJ9kEYLvzLwx5xkDgr8v9PrCWUXv97eZnN9mP4HBIcCtadrs
r+/2B6zbza3WwuAg/mamxZmud/slNVYk8FQwOLDUVUUyKLzbv+5s9sTINAYH
yz0KSqZn3+5nTQnZxwN0X9+uw8Lpk97uj/ll83q/OYPDkx1prDPD3+73WaDb
M1OWwUFp3Zy9xlZv94dsO941kwHBV1p3YMuZdf/tYXy/+zUmz9L/21+wvzLh
dNHb/YZ1du/qdf7bB/vzbPv3+O1+oXtO1ZIf/9lfjXO5bRj6DhEfT/4uNRJ6
vx89vgCsidtF
                    "]}]}}, "2"], Annotation[#, 2, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{3.6475049166666667`, -1.1073733333333333`}, {
                    3.6475049166666667`, -0.8926266666666667}, {
                    3.6766554166666667`, -0.8926266666666667}, {
                    3.7894484166666667`, -1.0612308333333333`}, {
                    3.7894484166666667`, -0.8926266666666667}, {
                    3.8166950833333333`, -0.8926266666666667}, {
                    3.8166950833333333`, -1.1073733333333333`}, {
                    3.787544083333333, -1.1073733333333333`}, {
                    3.6747510833333332`, -0.9386233333333334}, {
                    3.6747510833333332`, -1.1073733333333333`}}}]}}, "3"], 
                Annotation[#, 3, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{5.4597049166666665`, 0.6973266666666665}, {
                    5.4597049166666665`, 0.9120733333333333}, {
                    5.4888554166666665`, 0.9120733333333333}, {
                    5.6016484166666665`, 0.7434691666666666}, {
                    5.6016484166666665`, 0.9120733333333333}, {
                    5.628895083333333, 0.9120733333333333}, {
                    5.628895083333333, 0.6973266666666665}, {
                    5.599744083333333, 0.6973266666666665}, {
                    5.4869510833333335`, 0.8660766666666666}, {
                    5.4869510833333335`, 0.6973266666666665}}}]}}, "4"], 
                Annotation[#, 4, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{2.781404916666667, 0.3926266666666667}, {
                    2.781404916666667, 0.6073733333333333}, {
                    2.810555416666667, 0.6073733333333333}, {
                    2.923348416666667, 0.43876916666666665`}, {
                    2.923348416666667, 0.6073733333333333}, {
                    2.9505950833333334`, 0.6073733333333333}, {
                    2.9505950833333334`, 0.3926266666666667}, {
                    2.9214440833333333`, 0.3926266666666667}, {
                    2.8086510833333334`, 0.5613766666666666}, {
                    2.8086510833333334`, 0.3926266666666667}}}]}}, "5"], 
                Annotation[#, 5, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.292, 0.438, 0.889], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{5.4597049166666665`, -0.9120733333333334}, {
                    5.4597049166666665`, -0.6973266666666667}, {
                    5.4888554166666665`, -0.6973266666666667}, {
                    5.6016484166666665`, -0.8659308333333333}, {
                    5.6016484166666665`, -0.6973266666666667}, {
                    5.628895083333333, -0.6973266666666667}, {
                    5.628895083333333, -0.9120733333333334}, {
                    5.599744083333333, -0.9120733333333334}, {
                    5.4869510833333335`, -0.7433233333333333}, {
                    5.4869510833333335`, -0.9120733333333334}}}]}}, "6"], 
                Annotation[#, 6, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{4.5981, 0.5}, 0.2]}, "7"], 
                Annotation[#, 7, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{4.5981, -0.5}, 0.2]}, "8"], 
                Annotation[#, 8, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{3.7321, 1.}, 0.2]}, "9"], 
                Annotation[#, 9, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{2.866, -0.5}, 0.2]}, "10"], 
                Annotation[#, 10, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{6.127900000000001, 0.}, 0.2]}, "11"], 
                Annotation[#, 11, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{3.7321, -2.}, 0.2]}, "12"], 
                Annotation[#, 12, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{5.855, 1.7553}, 0.2]}, "13"], 
                Annotation[#, 13, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{
                  Opacity[0], 
                  EdgeForm[None], 
                  DiskBox[{2., 1.}, 0.2]}, "14"], 
                Annotation[#, 14, "Tooltip"]& ]}}, Frame -> True, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> None, ImageSize -> Dynamic[{
                UpTo[
                8.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])], 
                UpTo[
                4.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])]}], {
             AspectRatio -> 0.9521209795563798, 
              PlotRangePadding -> {0.08, 0.07616967836451038}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Formula: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    SubscriptBox["\"C\"", "8"], 
                    SubscriptBox["\"H\"", "10"], 
                    SubscriptBox["\"N\"", "4"], 
                    SubscriptBox["\"O\"", "2"]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Atoms: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["24", "SummaryItem"]}], "\"  \"", 
                  RowBox[{
                    TagBox["\"Bonds: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["25", "SummaryItem"]}]}, "RowDefault"], 
                "SummaryItem"]}, {
               RowBox[{
                 TagBox["\"SMILES: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                  "\"O=c1n(C([H])([H])[H])c(=O)n(C([H])([H])[H])c2nc([H])n(C([\
H])([H])[H])c21\"", ImageSize -> {{1, 300}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"InChIKey: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RYYVLZVUVIJVGH-UHFFFAOYSA-N\"", "SummaryItem"]}]}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Molecule[{
   "O", "O", "N", "N", "N", "N", "C", "C", "C", "C", "C", "C", "C", "C", "H", 
    "H", "H", "H", "H", "H", "H", "H", "H", "H"}, {
    Bond[{1, 9}, "Double"], 
    Bond[{2, 10}, "Double"], 
    Bond[{3, 8}, "Aromatic"], 
    Bond[{3, 10}, "Aromatic"], 
    Bond[{3, 12}, "Single"], 
    Bond[{4, 7}, "Aromatic"], 
    Bond[{4, 11}, "Aromatic"], 
    Bond[{4, 13}, "Single"], 
    Bond[{5, 9}, "Aromatic"], 
    Bond[{5, 10}, "Aromatic"], 
    Bond[{5, 14}, "Single"], 
    Bond[{6, 8}, "Aromatic"], 
    Bond[{6, 11}, "Aromatic"], 
    Bond[{7, 8}, "Aromatic"], 
    Bond[{7, 9}, "Aromatic"], 
    Bond[{11, 15}, "Single"], 
    Bond[{12, 16}, "Single"], 
    Bond[{12, 17}, "Single"], 
    Bond[{12, 18}, "Single"], 
    Bond[{13, 19}, "Single"], 
    Bond[{13, 20}, "Single"], 
    Bond[{13, 21}, "Single"], 
    Bond[{14, 22}, "Single"], 
    Bond[{14, 23}, "Single"], 
    Bond[{14, 24}, "Single"]}, {AtomCoordinates -> QuantityArray[
      StructuredArray`StructuredData[{24, 3}, {CompressedData["
1:eJwBUQKu/SFib1JlAgAAABgAAAADAAAA3Lqbpzrkzj+XkA96Nqv3vzlnRGlv
8P4/f4y5awn5BsBXfa62Yn/hv5zEILByaPO/AKlNnNzv7b/Ik6RrJt/jP6Rw
PQrXo/W/HVpkO99PAEDbxMn9DkXhPwzSjEXT2eU/z9VW7C+79b86kst/SL/w
vzHw3Hu45Ng/elioNc079j+TOgFNhA37P+M2GsBbIPK/aam8HeG06T8cfGEy
VTDCP65kx0YgXtU/G2SSkbOw2T+nRBK9jGLrP+B/K9mxEem/mLwBZr6Dt78w
Ub01sFXrvwH76NSVz+4/LiEf9GxW/L/s+gW7YdvUv9Fcp5GWyue/iUFg5dAi
A0DRs1n1udr3PyC1iZP7Hc6/n82qz9VW9r+xUGuad5z1PxWMSuoENATARbbz
/dT4BkAuUigLX1+rP/JBz2bV5/w/FR3J5T8kAsCBJsKGp1cAwPIk6ZrJN+8/
4L4OnDOiCkDmP6Tfvg4AQMCy0qQUdM+/R3L5D+k3AsCYu5aQD3r+P7gehetR
OALAgZVDi2zn+b9kIxCv6xflP7FyaJHtfArAH9ydtdsu5L/gLZCg+DEAQFwg
QfFjzAbAMQisHFpkCEBgB84ZUdrvv8iYu5aQD/s/+DHmriXkAkDtEtVbA1vN
PyqpE9BE2AVAbcX+sntyDkDYEvJBz2biP/YoXI/C9fw/jblrCfmgAMAhH/Rs
Vv0AwL8OnDOiNABAc2iR7Xw/CsB6xyk6ksv7v1sqb0c4Leo/D3o2qz7XAMAA
kX77OvAHwONrzywJUOA/+3wsEQ==
        "], "Angstroms", {{1}, {2}}}]], 
    AtomDiagramCoordinates -> CompressedData["
1:eJxTTMoPSmViYGCQAGIQXWW22i78Nq8DAwSg0R/2o8p/2P/i5ppfMbpiDjKv
H5lJHXhpr7ihKGPiWzao/AN7NPn9vp/7gktShODyaHx089HN22+6aIv5jyYJ
mLvQ3XvgTeAOudZscYeMza+Kt4r+sUdzv/26bUn1N/9KwfW38Pqvn/KUA64f
Zt43jZj+Q19ZDuxYz/y8J0MQLt9c7Dbl2zFJh8I13bczGH7a92q85d1nIOHw
YI7g0r0HmRysXN2LfvKLOoBEZ2r9t68WWef+sIrJAeRNlek/7HnBGr/bQ8z/
Ys91fXGBLddve+MjG/XyFt+1BwCxzYbj
     "]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.83848482332938*^9},
 CellLabel->
  "Out[262]=",ExpressionUUID->"fe9369bd-e1a1-440b-b2ff-5f83bb981e4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "water molecule", Typeset`newq$$ = 
   "water molecule", Typeset`chosen$$ = 
   "Molecule[Entity[\"Chemical\", \"Water\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "water molecule", 
                  Defer[
                   Molecule[
                    Entity["Chemical", "Water"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Molecule", "[", 
                  TemplateBox[{"\"water\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", 
                    "\"chemical\""},
                   "Entity"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Molecule", "[", 
                  TemplateBox[{"\"water\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", 
                    "\"chemical\""},
                   "Entity"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"water\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", 
                    "\"chemical\""}, "Entity"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "water molecule", 
                    Defer[
                    Molecule[
                    Entity["Chemical", "Water"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"water\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", 
                    "\"chemical\""},
                    "Entity"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"water\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", 
                    "\"chemical\""},
                    "Entity"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Molecule", "[", 
                    TemplateBox[{"\"water\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
                    "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", 
                    "\"chemical\""}, "Entity"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[263]:=",ExpressionUUID->"e62adb2c-05a7-42ae-a6e0-cb88fed2b203"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Molecule",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               StyleBox[{
                 
                 LineBox[{{2.6907849255769762`, -0.0661651267618946}, {
                  2.8133925457434827`, 0.004613946332364283}}], 
                 
                 LineBox[{{2.3830222387409115`, -0.06615271747007352}, {
                  2.260457826360141, 0.004614590851846304}}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 LineBox[{{2.8133925457434827`, 0.004613946332364283}, {
                  2.9360001659099892`, 0.07539301942662316}}], 
                 
                 LineBox[{{2.260457826360141, 0.004614590851846304}, {
                  2.137893413979371, 0.07538189917376613}}]}, {
                 RGBColor[0.433333, 0.466667, 0.466667]}, StripOnInput -> 
                False]}, {
               TagBox[
                TooltipBox[{{
                   RGBColor[0.801, 0.202, 0.192], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQAmIQvfXn20jXSmaHs2xtMxebHNkP47v9Oh5q77l//9Nk
zr/3epgd8h4nyZer7NhfMb9UXmgLswPPyTv9735t2t9d5RDhepvZ4ccsOZEp
i1bvtw1b8fYeL4tDgnxg3/uKZft5L3F/u+eN4J+7ubyjogTBN7jJpSM0k8Vh
w2ut7cefrti/blN0weqdLA4OLfc4Kvav3W/k+cTK9RaLg8VaRvMKn437l6sF
T5f7zOJwxnyrm/i6LfvF26JSLVhYHdY1ONnWsuzc3/400ThIlNVhwsnzxo+j
9u63n5oqdV+W1eEiv8BONuWDcD5nke137seH4XylnIqqpWuO7V9SUn37ngir
w8G2XUrc2if3V+RF2t5nYnX4svNtqF3c6f3Ouq37731gcVB/q9BZOPHs/mN1
52Lir7M4vJJh3nTd+vz+t28uhMZvY3FYrmAvvVPvwn7BuxFf46ayOFzc1r6q
df+F/e35nyOOFgLV1y/zfsN+cb+Pmpr6JG8E/95K1UPaSgj+Mv73p7X/Mjtk
PnA3fbP9wn7VHcp6k+4wO6Qv7OJ4I35h/+KEiAk/djM7nDoya/v19+f2+5zK
T3ZdzOzgumTyJG7rs/vnh3JPrJjE7KD3UtSmSPD0/k8Plu1b3cjswGG2rv76
8xPw+P5unrHebt6x/ejpAQBX8Ahz
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQXePHE+26ldlBTTlkGp/zkf0wfuO1l7rck4/vZ7z/
P7L1MLOD1qmlH7n1T+3nZXgezvqA2eGR7ANPbvEz+yUVz4W2/mF2mF0otYjr
/9n9LluuprgqsDjUT9dh5P58bn93lUOEqzeC37CVX06oHMHP/vLnt9xsFoc5
/I/uLvlzdr/Xzt4Z2dtZHK7895l+g//Mfu29txN3XGZx+Pf97Csu5VP7F9yJ
Nrv/kMVBwGix0Y3043D+m70/FtneOwznn/p19kjJwoP7Gf78+HDxNouDRtVn
vY9R+/efKn3quuM8i0PSig32ZSx79k9+f3HWvMMsDmfMt7qJr9uxX2Pq1NOv
N7I4FGg+794rvm1/vXbdj3mzWBxkZP5L+Dpu2X/tYJpqUDOLwwk+8WV3sjbt
P5Yefkw7k8Vhy45j6ZvqN+4/V/vxiLYPgt8t1zXlhxKCr2ieEdL6n9lBw62Z
sdBl8/7JbJ6Glx4yO9gdctbmOrdtf7PZ6e9yR5gdguxYQheH74LHh7ZpxtUr
8gf2o8cXAP7o2Ss=
                    "]}]}}, "1"], 
                Annotation[#, 1, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.433, 0.467, 0.467], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{2.9896717500000003`, 
                    0.04762666666666665}, {2.9896717500000003`, 
                    0.26237333333333335`}, {3.0180895833333334`, 
                    0.26237333333333335`}, {3.0180895833333334`, 
                    0.17418999999999998`}, {3.12971075, 
                    0.17418999999999998`}, {3.12971075, 
                    0.26237333333333335`}, {3.1581282500000003`, 
                    0.26237333333333335`}, {3.1581282500000003`, 
                    0.04762666666666665}, {3.12971075, 0.04762666666666665}, {
                    3.12971075, 0.14884666666666665`}, {3.0180895833333334`, 
                    0.14884666666666665`}, {3.0180895833333334`, 
                    0.04762666666666665}}}]}}, "2"], 
                Annotation[#, 2, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.433, 0.467, 0.467], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{1.91577175, 
                    0.04762666666666665}, {1.91577175, 
                    0.26237333333333335`}, {1.9441895833333334`, 
                    0.26237333333333335`}, {1.9441895833333334`, 
                    0.17418999999999998`}, {2.05581075, 
                    0.17418999999999998`}, {2.05581075, 
                    0.26237333333333335`}, {2.08422825, 
                    0.26237333333333335`}, {2.08422825, 
                    0.04762666666666665}, {2.05581075, 0.04762666666666665}, {
                    2.05581075, 0.14884666666666665`}, {1.9441895833333334`, 
                    0.14884666666666665`}, {1.9441895833333334`, 
                    0.04762666666666665}}}]}}, "3"], 
                Annotation[#, 3, "Tooltip"]& ]}}, Frame -> True, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> None, ImageSize -> Dynamic[{
                UpTo[
                8.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])], 
                UpTo[
                4.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])]}], {
             AspectRatio -> 0.4253866878522119, 
              PlotRangePadding -> {0.08, 0.03403093502817695}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Formula: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    SubscriptBox["\"H\"", "2"], "\"O\""}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Atoms: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}], "\"  \"", 
                  RowBox[{
                    TagBox["\"Bonds: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, "RowDefault"], 
                "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               StyleBox[{
                 
                 LineBox[{{2.6907849255769762`, -0.0661651267618946}, {
                  2.8133925457434827`, 0.004613946332364283}}], 
                 
                 LineBox[{{2.3830222387409115`, -0.06615271747007352}, {
                  2.260457826360141, 0.004614590851846304}}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 LineBox[{{2.8133925457434827`, 0.004613946332364283}, {
                  2.9360001659099892`, 0.07539301942662316}}], 
                 
                 LineBox[{{2.260457826360141, 0.004614590851846304}, {
                  2.137893413979371, 0.07538189917376613}}]}, {
                 RGBColor[0.433333, 0.466667, 0.466667]}, StripOnInput -> 
                False]}, {
               TagBox[
                TooltipBox[{{
                   RGBColor[0.801, 0.202, 0.192], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQAmIQvfXn20jXSmaHs2xtMxebHNkP47v9Oh5q77l//9Nk
zr/3epgd8h4nyZer7NhfMb9UXmgLswPPyTv9735t2t9d5RDhepvZ4ccsOZEp
i1bvtw1b8fYeL4tDgnxg3/uKZft5L3F/u+eN4J+7ubyjogTBN7jJpSM0k8Vh
w2ut7cefrti/blN0weqdLA4OLfc4Kvav3W/k+cTK9RaLg8VaRvMKn437l6sF
T5f7zOJwxnyrm/i6LfvF26JSLVhYHdY1ONnWsuzc3/400ThIlNVhwsnzxo+j
9u63n5oqdV+W1eEiv8BONuWDcD5nke137seH4XylnIqqpWuO7V9SUn37ngir
w8G2XUrc2if3V+RF2t5nYnX4svNtqF3c6f3Ouq37731gcVB/q9BZOPHs/mN1
52Lir7M4vJJh3nTd+vz+t28uhMZvY3FYrmAvvVPvwn7BuxFf46ayOFzc1r6q
df+F/e35nyOOFgLV1y/zfsN+cb+Pmpr6JG8E/95K1UPaSgj+Mv73p7X/Mjtk
PnA3fbP9wn7VHcp6k+4wO6Qv7OJ4I35h/+KEiAk/djM7nDoya/v19+f2+5zK
T3ZdzOzgumTyJG7rs/vnh3JPrJjE7KD3UtSmSPD0/k8Plu1b3cjswGG2rv76
8xPw+P5unrHebt6x/ejpAQBX8Ahz
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQXePHE+26ldlBTTlkGp/zkf0wfuO1l7rck4/vZ7z/
P7L1MLOD1qmlH7n1T+3nZXgezvqA2eGR7ANPbvEz+yUVz4W2/mF2mF0otYjr
/9n9LluuprgqsDjUT9dh5P58bn93lUOEqzeC37CVX06oHMHP/vLnt9xsFoc5
/I/uLvlzdr/Xzt4Z2dtZHK7895l+g//Mfu29txN3XGZx+Pf97Csu5VP7F9yJ
Nrv/kMVBwGix0Y3043D+m70/FtneOwznn/p19kjJwoP7Gf78+HDxNouDRtVn
vY9R+/efKn3quuM8i0PSig32ZSx79k9+f3HWvMMsDmfMt7qJr9uxX2Pq1NOv
N7I4FGg+794rvm1/vXbdj3mzWBxkZP5L+Dpu2X/tYJpqUDOLwwk+8WV3sjbt
P5Yefkw7k8Vhy45j6ZvqN+4/V/vxiLYPgt8t1zXlhxKCr2ieEdL6n9lBw62Z
sdBl8/7JbJ6Glx4yO9gdctbmOrdtf7PZ6e9yR5gdguxYQheH74LHh7ZpxtUr
8gf2o8cXAP7o2Ss=
                    "]}]}}, "1"], 
                Annotation[#, 1, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.433, 0.467, 0.467], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{2.9896717500000003`, 
                    0.04762666666666665}, {2.9896717500000003`, 
                    0.26237333333333335`}, {3.0180895833333334`, 
                    0.26237333333333335`}, {3.0180895833333334`, 
                    0.17418999999999998`}, {3.12971075, 
                    0.17418999999999998`}, {3.12971075, 
                    0.26237333333333335`}, {3.1581282500000003`, 
                    0.26237333333333335`}, {3.1581282500000003`, 
                    0.04762666666666665}, {3.12971075, 0.04762666666666665}, {
                    3.12971075, 0.14884666666666665`}, {3.0180895833333334`, 
                    0.14884666666666665`}, {3.0180895833333334`, 
                    0.04762666666666665}}}]}}, "2"], 
                Annotation[#, 2, "Tooltip"]& ], 
               TagBox[
                TooltipBox[{{
                   RGBColor[0.433, 0.467, 0.467], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{1.91577175, 
                    0.04762666666666665}, {1.91577175, 
                    0.26237333333333335`}, {1.9441895833333334`, 
                    0.26237333333333335`}, {1.9441895833333334`, 
                    0.17418999999999998`}, {2.05581075, 
                    0.17418999999999998`}, {2.05581075, 
                    0.26237333333333335`}, {2.08422825, 
                    0.26237333333333335`}, {2.08422825, 
                    0.04762666666666665}, {2.05581075, 0.04762666666666665}, {
                    2.05581075, 0.14884666666666665`}, {1.9441895833333334`, 
                    0.14884666666666665`}, {1.9441895833333334`, 
                    0.04762666666666665}}}]}}, "3"], 
                Annotation[#, 3, "Tooltip"]& ]}}, Frame -> True, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> None, ImageSize -> Dynamic[{
                UpTo[
                8.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])], 
                UpTo[
                4.1 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])]}], {
             AspectRatio -> 0.4253866878522119, 
              PlotRangePadding -> {0.08, 0.03403093502817695}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Formula: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    SubscriptBox["\"H\"", "2"], "\"O\""}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Atoms: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}], "\"  \"", 
                  RowBox[{
                    TagBox["\"Bonds: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, "RowDefault"], 
                "SummaryItem"]}, {
               RowBox[{
                 TagBox["\"SMILES: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                  "\"O([H])[H]\"", ImageSize -> {{1, 300}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"InChIKey: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"XLYOFNOQVPJJNP-UHFFFAOYSA-N\"", "SummaryItem"]}]}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Molecule[{"O", "H", "H"}, {
    Bond[{1, 2}, "Single"], 
    Bond[{1, 3}, "Single"]}, {AtomCoordinates -> QuantityArray[
      StructuredArray`StructuredData[{3, 
       3}, {{{-0.063259, -0.25268, 0.2621}, {0.74277, 0.26059, 
        0.17009000000000002`}, {-0.67951, -0.0079118, -0.43219}}, 
        "Angstroms", {{1}, {2}}}]], 
    AtomDiagramCoordinates -> {{2.5369, -0.155}, {3.0739, 0.155}, {2., 
     0.155}}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.838484856874094*^9},
 CellLabel->
  "Out[263]=",ExpressionUUID->"051ed5ae-3536-4382-b1d4-032c768ef520"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "toast+orange juice", Typeset`newq$$ = 
   "toast+orange juice", Typeset`chosen$$ = 
   "EntityGroup[{EntityInstance[Entity[\"Food\", {EntityProperty[\"Food\", \
\"FoodType\"] -> ContainsExactly[{Entity[\"FoodType\", \"Toast\"]}], \
EntityProperty[\"Food\", \"AddedFoodTypes\"] -> ContainsExactly[{}], \
EntityProperty[\"Food\", \"CompleteItem\"] -> True}], Quantity[1, \
\"Items\"]], EntityInstance[Entity[\"Food\", {EntityProperty[\"Food\", \
\"FoodType\"] -> ContainsExactly[{Entity[\"FoodType\", \"OrangeJuice\"]}], \
EntityProperty[\"Food\", \"AddedFoodTypes\"] -> ContainsExactly[{}]}], \
Quantity[1, \"Servings\"]]}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "toast+orange juice", 
                  Defer[
                   EntityGroup[{
                    EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    Quantity[1, "Items"]], 
                    EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], 
                    Quantity[1, "Servings"]]}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"EntityGroup", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
                    "Quantity"]}], "]"}], ",", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    
                    TemplateBox[{
                    "1", "\"serving\"", "serving", "\"Servings\""},
                    "Quantity"]}], "]"}]}], "}"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"EntityGroup", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
                    "Quantity"]}], "]"}], ",", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    
                    TemplateBox[{
                    "1", "\"serving\"", "serving", "\"Servings\""},
                    "Quantity"]}], "]"}]}], "}"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"EntityGroup", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {EntityProperty["Food", "FoodType"] -> 
                    ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    SelectWithContents -> True], ",", " ", 
                    
                    TemplateBox[{"1", "\"item\"", "item", "\"Items\""}, 
                    "Quantity", SyntaxForm -> Mod]}], "]"}], ",", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {EntityProperty["Food", "FoodType"] -> 
                    ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], SelectWithContents -> True], ",", 
                    " ", 
                    
                    TemplateBox[{
                    "1", "\"serving\"", "serving", "\"Servings\""}, 
                    "Quantity", SyntaxForm -> Mod]}], "]"}]}], "}"}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "toast+orange juice", 
                    Defer[
                    EntityGroup[{
                    EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    Quantity[1, "Items"]], 
                    EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], 
                    Quantity[1, "Servings"]]}]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"EntityGroup", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
                    "Quantity"]}], "]"}], ",", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    
                    TemplateBox[{
                    "1", "\"serving\"", "serving", "\"Servings\""},
                    "Quantity"]}], "]"}]}], "}"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"EntityGroup", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
                    "Quantity"]}], "]"}], ",", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    
                    TemplateBox[{
                    "1", "\"serving\"", "serving", "\"Servings\""},
                    "Quantity"]}], "]"}]}], "}"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"EntityGroup", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {EntityProperty["Food", "FoodType"] -> 
                    ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    SelectWithContents -> True], ",", " ", 
                    
                    TemplateBox[{"1", "\"item\"", "item", "\"Items\""}, 
                    "Quantity", SyntaxForm -> Mod]}], "]"}], ",", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {EntityProperty["Food", "FoodType"] -> 
                    ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], SelectWithContents -> True], ",", 
                    " ", 
                    
                    TemplateBox[{"1", "\"serving\"", "serving", 
                    "\"Servings\""}, "Quantity", SyntaxForm -> Mod]}], 
                    "]"}]}], "}"}], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[264]:=",ExpressionUUID->"211357c0-d982-420e-936f-1442ee25eccc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityGroup", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = True}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"complete item\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", "True"}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "Toast"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}], 
         EntityProperty["Food", "CompleteItem"] -> True}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
       "Quantity"]}], "]"}], ",", 
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "OrangeJuice"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}]}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"serving\"", "serving", "\"Servings\""},
       "Quantity"]}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{3.838484929100878*^9},
 CellLabel->
  "In[268]:=",ExpressionUUID->"aab1c50f-90dc-4014-93d6-c1232f824286"],

Cell[BoxData[
 RowBox[{"EntityGroup", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"complete item\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", "True"}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "Toast"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}], 
         EntityProperty["Food", "CompleteItem"] -> True}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
       "Quantity"]}], "]"}], ",", 
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "OrangeJuice"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}]}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"serving\"", "serving", "\"Servings\""},
       "Quantity"]}], "]"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{{3.838484929168807*^9, 3.838484935337615*^9}},
 CellLabel->
  "Out[268]=",ExpressionUUID->"4c8ca1cb-37a2-4ce5-94e4-d318b8c48b74"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"EntityGroup", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"complete item\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", "True"}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "Toast"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}], 
         EntityProperty["Food", "CompleteItem"] -> True}],
       SelectWithContents->True], ",", " ", 
      TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
       "Quantity"]}], "]"}], ",", " ", 
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "OrangeJuice"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}]}],
       SelectWithContents->True], ",", " ", 
      TemplateBox[{"1", "\"serving\"", "serving", "\"Servings\""},
       "Quantity"]}], "]"}]}], "}"}], "]"}]], "Input",ExpressionUUID->\
"36edb793-640c-4408-8ce0-909ccd4e0778"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityGroup", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"complete item\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", "True"}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "Toast"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}], 
         EntityProperty["Food", "CompleteItem"] -> True}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
       "Quantity"]}], "]"}], ",", 
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "OrangeJuice"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}]}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"serving\"", "serving", "\"Servings\""},
       "Quantity"]}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{3.838484943687388*^9},
 CellLabel->
  "In[269]:=",ExpressionUUID->"e134b8b9-6397-4b0d-b364-ad1d3ed364c3"],

Cell[BoxData[
 RowBox[{"EntityGroup", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"complete item\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", "True"}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "Toast"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}], 
         EntityProperty["Food", "CompleteItem"] -> True}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"item\"", "item", "\"Items\""},
       "Quantity"]}], "]"}], ",", 
    RowBox[{"EntityInstance", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"food\""}, "ImplicitEntityBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                TemplateBox[{"\"food type\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                 "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                   "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                TemplateBox[{"\"added food types\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                  "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""},
                  "GrayEntityFrame"], "\":\"", 
                RowBox[{
                  StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                  TemplateBox[{}, "EntityContainsSequence"]}]}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
         "ImplicitEntityToggle"]],
       Entity[
       "Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
            Entity["FoodType", "OrangeJuice"]}], 
         EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}]}],
       SelectWithContents->True], ",", 
      TemplateBox[{"1", "\"serving\"", "serving", "\"Servings\""},
       "Quantity"]}], "]"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.838484943782292*^9},
 CellLabel->
  "Out[269]=",ExpressionUUID->"75eec210-84c9-48b4-96a2-abaf9115aec9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "GDP of Germany", Typeset`newq$$ = 
   "GDP of Germany", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Germany\"][EntityProperty[\"Country\", \"GDP\", \
{\"CurrencyUnit\" -> \"CurrentUSDollar\"}]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "GDP of Germany", 
                  Defer[
                   Entity["Country", "Germany"][
                    EntityProperty[
                    "Country", "GDP", {
                    "CurrencyUnit" -> "CurrentUSDollar"}]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}], 
                    SelectWithContents -> True], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "GDP of Germany", 
                    Defer[
                    Entity["Country", "Germany"][
                    EntityProperty[
                    "Country", "GDP", {
                    "CurrencyUnit" -> "CurrentUSDollar"}]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Germany\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Germany\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Germany\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}], 
                    SelectWithContents -> True], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[270]:=",ExpressionUUID->"9d13d829-d69d-4733-a011-cf35b525e1cf"],

Cell[BoxData[
 TemplateBox[{"3.86112355803921`*^12", 
   RowBox[{
     FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
   RowBox[{"\"per \"", "\[InvisibleSpace]", "\"year\""}], 
   "US dollars per year", 
   FractionBox["\"USDollars\"", "\"Years\""]},
  "QuantityPrefixUnit"]], "Output",
 CellChangeTimes->{3.838484960620325*^9},
 CellLabel->
  "Out[270]=",ExpressionUUID->"5a16abeb-6a57-4c46-b533-22ee670f2214"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "30-year mortgage of EUR250,000 at 5%", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "MonthlyPayments", "Monthly payments", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Formula", "title" -> 
     "Input information"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox["\"fixed rate mortgage\"", 
                    GrayLevel[0], StripOnInput -> False], 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                 TagBox[
                  PaneBox[
                  "\"loan period\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["30", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"loan amount\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["250000.00", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "250000.00", "SRString" -> 
                    "250000.00"]]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"euros\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"annual percentage rate\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5", "SRString" -> "5"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {{None}}, 
                 "ItemsIndexed" -> {{{1, 1}, {1, 2}} -> 
                   GrayLevel[0.9568627450980393]}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MonthlyPayments", "numsubpods" -> "1",
      "position" -> "200", "primary" -> "true", "scanner" -> "Formula", 
     "title" -> "Monthly payments"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"monthly payment\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"effective interest rate\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    RowBox[{
                    TagBox[
                    InterpretationBox[
                    "\"5.116\"", 5.116189788173364, AutoDelete -> True], 
                    NumberForm[#, {10, 3}]& ], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, {Right}}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MortgageTotals", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "Formula", "title" -> 
     "Mortgage totals"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"principal paid\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["250000", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"total interest paid\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["233139", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"total payments\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["483139", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, {Right}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], 
                GraphicsBox[{
                  EdgeForm[
                   RGBColor[0.59, 0.615, 0.71]], 
                  RGBColor[
                   NCache[{
                    Rational[254, 255], 
                    Rational[248, 255], 
                    Rational[236, 255]}, {0.996078431372549, 
                    0.9725490196078431, 0.9254901960784314}]], 
                  DiskBox[{0, 0}, 1, {0, 3.2512275533932087`}], 
                  Hue[0.67, 0.6, 0.6, 0.15], 
                  
                  DiskBox[{0, 0}, 1, {3.2512275533932087`, 
                   6.283185307179586}], 
                  RGBColor[0.59, 0.615, 0.71], 
                  PointBox[{-0.05479000005125369, 0.9984978997946784}], 
                  PointBox[{0.05479000005125356, -0.9984978997946784}], 
                  LineBox[
                   NCache[{{-0.05479000005125369, 0.9984978997946784}, {
                    Rational[-21, 20], 0.9984978997946784}, {-1.15, 
                    0.9984978997946784}}, {{-0.05479000005125369, 
                    0.9984978997946784}, {-1.05, 0.9984978997946784}, {-1.15, 
                    0.9984978997946784}}]], 
                  LineBox[
                   NCache[{{0.05479000005125356, -0.9984978997946784}, {
                    Rational[21, 20], -0.9984978997946784}, {
                    1.15, -0.9984978997946784}}, {{
                    0.05479000005125356, -0.9984978997946784}, {
                    1.05, -0.9984978997946784}, {
                    1.15, -0.9984978997946784}}]], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    StyleBox["\"principal\"", 
                    Opacity[1], FontFamily -> "Helvetica", LineBreakWithin -> 
                    False, StripOnInput -> False], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                   NCache[{
                    Rational[-6, 5], 0.9984978997946784}, {-1.2, 
                    0.9984978997946784}], {1, 0}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    StyleBox["\"interest\"", 
                    Opacity[1], FontFamily -> "Helvetica", LineBreakWithin -> 
                    False, StripOnInput -> False], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                   NCache[{
                    Rational[6, 5], -0.9984978997946784}, {
                    1.2, -0.9984978997946784}], {-1, 0}]}, 
                 ImageSize -> {250, 100}, {
                 Background -> None, ImageSize -> {Automatic, 120}, 
                  LabelStyle -> Automatic, RotateLabel -> False, 
                  AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> 
                  False, AxesLabel -> None, AxesOrigin -> Automatic, 
                  AxesStyle -> {}, Background -> None, BaselinePosition -> 
                  Automatic, BaseStyle -> {}, ColorOutput -> Automatic, 
                  ContentSelectable -> Automatic, CoordinatesToolOptions -> 
                  Automatic, DisplayFunction :> $DisplayFunction, 
                  Epilog -> {}, FormatType :> TraditionalForm, Frame -> False,
                   FrameLabel -> None, FrameStyle -> {}, FrameTicks -> 
                  Automatic, FrameTicksStyle -> {}, GridLines -> None, 
                  GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                  All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, 
                  LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
                  PlotRange -> Automatic, PlotRangeClipping -> False, 
                  PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
                  PreserveImageOptions -> Automatic, Prolog -> {}, 
                  RotateLabel -> True, Ticks -> Automatic, 
                  TicksStyle -> {}}]}}, AutoDelete -> False, 
              GridBoxItemSize -> {"Columns" -> {{Automatic}}}, RowsEqual -> 
              True], "Grid"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Payments and balances", "scanner" -> "Formula", "id" -> 
     "PaymentsAndBalances", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{{1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05}, {1041.67, 1040.42, 1039.16, 1037.9, 1036.63, 1035.36, \
1034.08, 1032.8, 1031.51, 1030.21, 1028.91, 1027.61, 1026.3, 1024.98, \
1023.66, 1022.33, 1021., 1019.66, 1018.32, 1016.97, 1015.62, 1014.26, \
1012.89, 1011.52, 1010.14, 1008.76, 1007.37, 1005.98, 1004.58, 1003.17, \
1001.76, 1000.34, 998.917, 997.487, 996.052, 994.61, 993.162, 991.709, \
990.249, 988.783, 987.311, 985.833, 984.349, 982.858, 981.362, 979.859, \
978.35, 976.834, 975.312, 973.784, 972.25, 970.709, 969.162, 967.608, \
966.048, 964.481, 962.908, 961.328, 959.742, 958.149, 956.549, 954.943, \
953.33, 951.71, 950.084, 948.451, 946.811, 945.164, 943.51, 941.85, 940.182, \
938.508, 936.826, 935.138, 933.442, 931.74, 930.03, 928.313, 926.589, \
924.858, 923.12, 921.374, 919.622, 917.861, 916.094, 914.319, 912.537, \
910.747, 908.95, 907.145, 905.333, 903.514, 901.686, 899.852, 898.009, \
896.159, 894.301, 892.435, 890.562, 888.681, 886.792, 884.895, 882.99, \
881.077, 879.156, 877.228, 875.291, 873.346, 871.393, 869.432, 867.463, \
865.485, 863.5, 861.506, 859.503, 857.493, 855.474, 853.446, 851.41, 849.366, \
847.313, 845.252, 843.182, 841.103, 839.016, 836.92, 834.815, 832.702, \
830.579, 828.448, 826.308, 824.159, 822.001, 819.834, 817.658, 815.474, \
813.279, 811.076, 808.864, 806.642, 804.411, 802.171, 799.922, 797.663, \
795.394, 793.117, 790.829, 788.533, 786.226, 783.91, 781.585, 779.249, \
776.904, 774.55, 772.185, 769.811, 767.426, 765.032, 762.628, 760.213, \
757.789, 755.355, 752.91, 750.455, 747.99, 745.515, 743.029, 740.534, \
738.027, 735.51, 732.983, 730.445, 727.897, 725.338, 722.768, 720.188, \
717.597, 714.995, 712.382, 709.759, 707.124, 704.479, 701.822, 699.154, \
696.476, 693.786, 691.085, 688.372, 685.648, 682.913, 680.167, 677.409, \
674.64, 671.859, 669.066, 666.262, 663.447, 660.619, 657.78, 654.929, \
652.066, 649.191, 646.304, 643.405, 640.494, 637.57, 634.635, 631.688, \
628.728, 625.755, 622.771, 619.774, 616.764, 613.742, 610.708, 607.66, 604.6, \
601.528, 598.442, 595.344, 592.233, 589.108, 585.971, 582.821, 579.657, \
576.481, 573.291, 570.087, 566.871, 563.641, 560.398, 557.141, 553.87, \
550.586, 547.288, 543.977, 540.652, 537.312, 533.959, 530.592, 527.211, \
523.816, 520.407, 516.983, 513.545, 510.093, 506.627, 503.146, 499.65, \
496.14, 492.616, 489.076, 485.522, 481.953, 478.37, 474.771, 471.157, \
467.528, 463.885, 460.226, 456.551, 452.862, 449.157, 445.436, 441.7, \
437.949, 434.182, 430.399, 426.6, 422.786, 418.956, 415.11, 411.247, 407.369, \
403.474, 399.564, 395.637, 391.693, 387.733, 383.757, 379.764, 375.755, \
371.728, 367.685, 363.625, 359.549, 355.455, 351.344, 347.216, 343.071, \
338.909, 334.729, 330.532, 326.317, 322.085, 317.835, 313.567, 309.282, \
304.979, 300.657, 296.318, 291.961, 287.586, 283.192, 278.78, 274.35, \
269.901, 265.434, 260.948, 256.443, 251.92, 247.378, 242.816, 238.236, \
233.637, 229.019, 224.381, 219.724, 215.048, 210.352, 205.636, 200.901, \
196.147, 191.372, 186.577, 181.763, 176.928, 172.074, 167.199, 162.304, \
157.388, 152.452, 147.495, 142.518, 137.52, 132.501, 127.461, 122.4, 117.318, \
112.215, 107.091, 101.945, 96.7781, 91.5895, 86.3792, 81.1472, 75.8935, \
70.6178, 65.3201, 60.0004, 54.6585, 49.2944, 43.9079, 38.4989, 33.0674, \
27.6133, 22.1365, 16.6368, 11.1143, 5.56869}}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{}, 
                GraphicsComplexBox[CompressedData["
1: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
56Ot89HW+ej/nY/+PyTEj/Y=
                 "], {{{}, {}, {}, {
                    EdgeForm[], 
                    Hue[0.67, 0.6, 0.6, 0.15], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl1FV4EAQUBeCNUpAUJCUGCArSCCidUgKCCgYdwgaM3NiIURsw2OiO0TW6
Nrq7RtugKCEoiglK/Hw8/OfhvN7vnqBOoS17pwoICAgkWPTgnOI8KZzlDKc5
xUlOcJxjHOUIhznEQQ6wn33sZQ+72cVOdrCdZJLYxla2sJlNbGQD61nHWtaQ
yGpWsZIVLGcZS1nCYhaxkAQWMJ95zGUOs5nFTGYwnWlMZQqTmcRE4oljAuOJ
ZRxjGUMM0YxmFCMZwXCiGMZQhjCYSCIYRDhhDGQA/elHX/oQyrMD9aInIQTT
g+58Tje60oXOdKIjHWhPO9ryGZ/yCR/ThtZ8xId8QCta8j4taE4z3qMpTWhM
IxryLg2oTz3qUofa1KImNahONaryDm9ThcpU4i0qUoHylKMsZShNKd6kJCV4
g9cpTjFeoyhFKEwQhShIAfLzKvnISx5yk4ucvEIOsvMy2chKFjKTiYy8RAbS
8yIvkI60pCE1qQgkgCf+6TGP+J//eMgD/uUf/uYv/uQP7vM7v3GPX/mFu9zh
Z25zi5vc4Cd+5Do/8D3XuMp3fMs3fM1XfMkXXOEyl7jIBc4/2wBSOMsZTnOK
k5zgOMc4yhEOc4iDHGA/+9jLHnazi53sYDvJJLGNrWxhM5vYyAbWs461rCGR
1axiJStYzjKWsoTFLGIhCSxgPvOYyxxmM4uZzGA605jKFCYziYnEE8cExhPL
OMYyhhiiGc0oRjKC4UQxjKEMYTCRRDCIcMIYyAD604++9CGU3vSiJyGBz3f6
KcYWxRU=
                    "]]}]}, {}, {}, {}, {
                    EdgeForm[], 
                    RGBColor[
                    NCache[{
                    Rational[254, 255], 
                    Rational[248, 255], 
                    Rational[236, 255]}, {0.996078431372549, 
                    0.9725490196078431, 0.9254901960784314}]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl1mPbEAYUBuA327Zt27Ztt2zbtm3btq1t2djClt3aXX24r3N+wMGTqHH7
yu0CBwQEBOKC5jdNK1rThra0oz0d6EgnOtOFrnSjOz3oSS9604e+9KM/AxjI
IAYzhKEMYzgjGMkoRjOGsYxjPBOYyCQmM4WpTGM6M5jJLGYzh7nMYz4LWMgi
FrOEpSxjOStYySpWs4a1rGM9G9jIJjazha1sYzs72MkudrOHvexjPwc4yCEO
c4SjHOM4JzjJKU5zhrOc4zwXuMglLnOF3/mDP7nKNa5zg5vc4jZ3uMs97vOA
hzziMU/4i795yjOe84J/+JeXvOI1b3jLO97zgY984jNf+Mo3/uM7AeYrEIEJ
QlCCEZwQhCQUoQlDWMIRnghEJBKRiUJUohGdGMQkFrGJQ1ziEZ8EJCQRiUlC
UpKRnBSkJBWpSUNa0pGeDGQkE5nJQlaykZ0c5CQXuclDXvKRnwIUpBCFKUJR
ilGcEpSkFKUpQ1nKUZ4KVKQSlalCVapRnRrUpBa1qUNd6lGfBjSkEY1pQlOa
0ZwWtPyx/7SiNW1oy48D0Z4OdKQTnelCV7rRnR70pBe96UNf+tGfAQxkEIMZ
wlCGMZwRjGQUoxnDWMYxnglMZBKTmcJUpjGdGcxkFrOZw1zmMZ8FLGQRi1nC
UpaxnBWsZBWrWcNa1rGeDWxkE5vZwla2sZ0d7GQXu9nDXvaxnwMc5BCHOcJR
jnGcE5zkFKc5w1nOcT7wr/vc0h61oDnNaEoTGtOIhjSgPvWoSx1qU4ua1KA6
1ahKFSpTiYpUoDzlKEsZSlOKkpSgOMUoShEKU4iCFCA/+chLHnKTi5zkIDvZ
yEoWMpOJjGQgPelISxpSk4qUpCA5yUhKEhKTiIQkID7xiEscYhOLmMQgOtGI
ShQiE4mIRCA84QhLGEITipCEIDjBCEoQAhMo0K9H+l35j2985Quf+cRHPvCe
d7zlDa95xUv+5R9e8JxnPOVv/uIJj3nEQx5wn3vc5Q63ucVNbnCda1zlT/7g
d65wmUtc/JEBOM85znKG05ziJCc4zjGOcoTDHOIgB9jPPvayh93sYic72M42
trKFzWxiIxtYzzrWsobVrGIlK1jOMpayhMUsYiELmM885jKH2cxiJjOYzjSm
MoXJTGIiExjPOMYyhtGMYiQjGM4whjKEwQxiIAPoTz/60ofe9KInPehON7rS
hc50oiMdaE872tKG1rTiN1rSguY0oylNaEwjGtKA+tSjLnWoTS1qUoPqVKMq
VahMJSpSgfKUoyxlKE0pSlKC4hSjKEUoTCEKUoD85CMvechNLnKSg+xkIytZ
yEwmMpKB9KQjLWlITSpSkoLkJCMpSUhMIhKSgPjEIy5xiE0sYhKD6EQjKlGI
TCQiEoHwhCMsYQhNKEISguAEIyhBAn5Gm58Z+n+s1lkh
                    
                    "]]}]}, {}, {}}, {{}, {}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    NCache[
                    Rational[217, 255], 0.8509803921568627], 
                    NCache[
                    Rational[176, 255], 0.6901960784313725], 
                    NCache[
                    Rational[7, 15], 0.4666666666666667]]], 
                    LineBox[CompressedData["
1:eJwl1PefCAQYBvC7M8/enLOOc8Y5jjOOs7fD4azjrDvjojIbQsgoo4yytwYN
iqIoe5RZZBaVPaKFjEi+9+mH7/P+Ac/necNShyQODgwICHhKpN8gMpCRTGQm
C1kJJhvZyUFOcpGbPOQlH/kpQEEKUZgihFCUUIpRnBKUpBRhlKYM4ZQlgnKU
pwIViaQSUVSmCtFUpRoxVKcGNalFLLWpQxx1qUd9GtCQRjSmCU1pRnNa0JJW
xNOaNrQlgXa0pwOJdKQTnelCV5LoRneS6UFPetGbPqSQSl/60Z8BpKX3w0AG
8TTP8CyDGcJQhjGcETzH87zAi4zkJUYxmjG8zFjGMZ5XmMBEJjGZV3mNKUxl
GtN5nTeYwUxmMZs3eYs5zGUe81nAQhaxmCUsZRnLWcFK3uYd3uU9VrGa9/mA
D/mINazlYz5hHev5lM/YwEY+5ws2sZkv+YotbGUb29nBTnaxmz3s5Wu+YR/7
OcBBDnGYb/mOIxzle45xnBOc5BSn+YEfOcNZfuJnfuEc57nARS5xmStc5RrX
+ZUb3OQ3fucP/uQvbnGbO/zNXe5xnwf8w0Me8S+P+Y/08QcSRAYykonMZCEr
wWQjOznISS5yk4e85CM/BShIIQpThBCKEkoxilOCkpQijNKUIZyyRFCO8lSg
IpFUIorKVCGaqlQjhurUoCa1iKU2dYijLvWoTwMa0ojGNKEpzWhOC1rSinha
04a2JNCO9nQgkY50ojNd6EoS3ehOMj3oSS9604cUUulLP/ozgLTA///zEwOL
l1o=
                    "]]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    LineBox[CompressedData["
1:eJwVyWlgDgQAgOFvQ0oUJSpXrkilpMMVOt05inJEudrGNvc2zH2zue/72Jyb
zdwb5r5ZoYiiy32Uu1I8fjzvn7d428gmEUGBQCBEQgmjE50J5+GMpAtd6UZ3
etCTXkQRTQy96UNfYulHfwYwkEEMZghDGcZwRjCSUYxmDHHEM5ZxjGcCE5nE
ZKYwlWlMZwYzmcVs5jCXecxnAQtZRAKJLGYJS1nGclaQRDIrSSGVVaSxmjWs
ZR3r2cBG0slgE5vZQiZb2cZ2drCTXexmD3vZx34OcJBDHCaLb/mOIxzlGN/z
A8c5wY+c5BQ/8TOnOcMv/Mpv/M4fnOUc57nARS5xmStc5Rp/8hfXucFNbnGb
O9zlb/7hX+7xH/9zn0BwIBBEMNnITg4eISeP8hi5eJzc5OEJniQv+XiKp8nP
MxSgIM/yHM9TiMIUoSjFeIHilKAkpSjNi5ShLC9Rjpd5hVcpz2u8TgXeoCJv
8hZv8w6VqEwVqlKNd6lODWryHu/zAR/yER9Ti9rUoS71qE8DPqEhjWhMEz7l
M5rSjM/5gua0oCWt+JLWtOErvqYt7WhPBzryDSGEEkYnOhNOBJF0oSvd6E4P
etKLKKKJoTd96Ess/ejPAAYyiMEMYSjDGM4IRjKK0YwhjnjGMo7xTGAik5jM
FKYyjenMYCazmM0c5jKP+SxgIYtIIJHFLGEpy1jOCpJIZiUppLKKNFazhrWs
Yz0b2Eg6GWxiM1vIZCvb2M4OdrKL3exhL/vYzwEOcojDZPEAiurDag==
                    
                    "]]}}, {{
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    NCache[
                    Rational[217, 255], 0.8509803921568627], 
                    NCache[
                    Rational[176, 255], 0.6901960784313725], 
                    NCache[
                    Rational[7, 15], 0.4666666666666667]]]}, {
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]]}}, {{
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    NCache[
                    Rational[217, 255], 0.8509803921568627], 
                    NCache[
                    Rational[176, 255], 0.6901960784313725], 
                    NCache[
                    Rational[7, 15], 0.4666666666666667]]]}, {
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    0.24720000000000014`, 0.24, 0.6]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    NCache[
                    Rational[217, 255], 0.8509803921568627], 
                    NCache[
                    Rational[176, 255], 0.6901960784313725], 
                    NCache[
                    Rational[7, 15], 0.4666666666666667]]]}, {
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    0.24720000000000014`, 0.24, 
                    0.6]]}, {}, {}, {}}}], {{}, {}}}, {GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                DisplayFunction -> Identity, DisplayFunction -> Identity, 
                AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {True, True}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0., 0}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, Epilog -> {
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"principal\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], {251.99999999999997`, 
                   1006.540543147782}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"interest\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], {90., 201.30810862955224`}]}, 
                Frame -> {{True, False}, {True, False}}, 
                FrameLabel -> {{None, None}, {
                   FormBox[
                    StyleBox[
                    "\"years\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], None}}, FrameStyle -> 
                Directive[
                  AbsoluteThickness[0.2]], FrameTicks -> {{{{0., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["0", #& ]}], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["200", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {400., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["400", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {600., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["600", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {800., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["800", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1", "SRString" -> "1"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1200., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["1.2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.2", "SRString" -> "1.2"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {100., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {150., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {250., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {300., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {350., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {450., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {550., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {650., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {700., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {750., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {850., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {900., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {950., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1050., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1100., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1150., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1250., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1300., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, None}, {{{60, 
                    FormBox["5", TraditionalForm]}, {120, 
                    FormBox["10", TraditionalForm]}, {180, 
                    FormBox["15", TraditionalForm]}, {240, 
                    FormBox["20", TraditionalForm]}, {300, 
                    FormBox["25", TraditionalForm]}, {360, 
                    FormBox["30", TraditionalForm]}}, None}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], 
                GridLines -> {None, None}, GridLinesStyle -> Automatic, 
                ImageSize -> 200, 
                LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
                Method -> {
                 "OptimizePlotMarkers" -> True, 
                  "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                PlotRange -> {{0, 360.}, {0, 1342.0540575303899`}}, 
                PlotRangeClipping -> True, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                Ticks -> {Automatic, Automatic}, TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"monthly payment breakdown\"", 
                 "\[NoBreak]", "\")\""}], {
               FontFamily -> "Verdana", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{{0, 250000.}, {1, 249700.}, {2, 249398.}, {3, \
249095.}, {4, 248791.}, {5, 248485.}, {6, 248179.}, {7, 247871.}, {8, \
247562.}, {9, 247251.}, {10, 246939.}, {11, 246626.}, {12, 246312.}, {13, \
245996.}, {14, 245679.}, {15, 245360.}, {16, 245041.}, {17, 244720.}, {18, \
244397.}, {19, 244073.}, {20, 243748.}, {21, 243422.}, {22, 243094.}, {23, \
242765.}, {24, 242434.}, {25, 242103.}, {26, 241769.}, {27, 241435.}, {28, \
241099.}, {29, 240761.}, {30, 240422.}, {31, 240082.}, {32, 239740.}, {33, \
239397.}, {34, 239052.}, {35, 238706.}, {36, 238359.}, {37, 238010.}, {38, \
237660.}, {39, 237308.}, {40, 236955.}, {41, 236600.}, {42, 236244.}, {43, \
235886.}, {44, 235527.}, {45, 235166.}, {46, 234804.}, {47, 234440.}, {48, \
234075.}, {49, 233708.}, {50, 233340.}, {51, 232970.}, {52, 232599.}, {53, \
232226.}, {54, 231851.}, {55, 231475.}, {56, 231098.}, {57, 230719.}, {58, \
230338.}, {59, 229956.}, {60, 229572.}, {61, 229186.}, {62, 228799.}, {63, \
228410.}, {64, 228020.}, {65, 227628.}, {66, 227235.}, {67, 226839.}, {68, \
226442.}, {69, 226044.}, {70, 225644.}, {71, 225242.}, {72, 224838.}, {73, \
224433.}, {74, 224026.}, {75, 223618.}, {76, 223207.}, {77, 222795.}, {78, \
222381.}, {79, 221966.}, {80, 221549.}, {81, 221130.}, {82, 220709.}, {83, \
220287.}, {84, 219863.}, {85, 219437.}, {86, 219009.}, {87, 218579.}, {88, \
218148.}, {89, 217715.}, {90, 217280.}, {91, 216843.}, {92, 216405.}, {93, \
215964.}, {94, 215522.}, {95, 215078.}, {96, 214632.}, {97, 214184.}, {98, \
213735.}, {99, 213283.}, {100, 212830.}, {101, 212375.}, {102, 211918.}, \
{103, 211459.}, {104, 210998.}, {105, 210535.}, {106, 210070.}, {107, \
209603.}, {108, 209134.}, {109, 208664.}, {110, 208191.}, {111, 207716.}, \
{112, 207240.}, {113, 206761.}, {114, 206281.}, {115, 205798.}, {116, \
205314.}, {117, 204827.}, {118, 204338.}, {119, 203848.}, {120, 203355.}, \
{121, 202860.}, {122, 202364.}, {123, 201865.}, {124, 201364.}, {125, \
200861.}, {126, 200356.}, {127, 199848.}, {128, 199339.}, {129, 198828.}, \
{130, 198314.}, {131, 197798.}, {132, 197280.}, {133, 196760.}, {134, \
196238.}, {135, 195714.}, {136, 195187.}, {137, 194658.}, {138, 194127.}, \
{139, 193594.}, {140, 193059.}, {141, 192521.}, {142, 191981.}, {143, \
191439.}, {144, 190895.}, {145, 190348.}, {146, 189799.}, {147, 189248.}, \
{148, 188694.}, {149, 188138.}, {150, 187580.}, {151, 187020.}, {152, \
186457.}, {153, 185892.}, {154, 185324.}, {155, 184755.}, {156, 184182.}, \
{157, 183608.}, {158, 183031.}, {159, 182451.}, {160, 181869.}, {161, \
181285.}, {162, 180698.}, {163, 180109.}, {164, 179518.}, {165, 178924.}, \
{166, 178327.}, {167, 177728.}, {168, 177127.}, {169, 176523.}, {170, \
175916.}, {171, 175307.}, {172, 174695.}, {173, 174081.}, {174, 173464.}, \
{175, 172845.}, {176, 172223.}, {177, 171599.}, {178, 170972.}, {179, \
170342.}, {180, 169710.}, {181, 169075.}, {182, 168437.}, {183, 167797.}, \
{184, 167154.}, {185, 166509.}, {186, 165860.}, {187, 165209.}, {188, \
164556.}, {189, 163899.}, {190, 163240.}, {191, 162578.}, {192, 161914.}, \
{193, 161246.}, {194, 160576.}, {195, 159903.}, {196, 159227.}, {197, \
158549.}, {198, 157867.}, {199, 157183.}, {200, 156496.}, {201, 155806.}, \
{202, 155113.}, {203, 154417.}, {204, 153718.}, {205, 153017.}, {206, \
152312.}, {207, 151605.}, {208, 150895.}, {209, 150181.}, {210, 149465.}, \
{211, 148746.}, {212, 148023.}, {213, 147298.}, {214, 146570.}, {215, \
145839.}, {216, 145104.}, {217, 144367.}, {218, 143626.}, {219, 142883.}, \
{220, 142136.}, {221, 141386.}, {222, 140633.}, {223, 139877.}, {224, \
139118.}, {225, 138355.}, {226, 137590.}, {227, 136821.}, {228, 136049.}, \
{229, 135274.}, {230, 134495.}, {231, 133714.}, {232, 132929.}, {233, \
132141.}, {234, 131349.}, {235, 130554.}, {236, 129756.}, {237, 128955.}, \
{238, 128150.}, {239, 127342.}, {240, 126531.}, {241, 125716.}, {242, \
124898.}, {243, 124076.}, {244, 123251.}, {245, 122422.}, {246, 121590.}, \
{247, 120755.}, {248, 119916.}, {249, 119074.}, {250, 118228.}, {251, \
117378.}, {252, 116525.}, {253, 115669.}, {254, 114809.}, {255, 113945.}, \
{256, 113078.}, {257, 112207.}, {258, 111332.}, {259, 110454.}, {260, \
109572.}, {261, 108687.}, {262, 107798.}, {263, 106905.}, {264, 106008.}, \
{265, 105108.}, {266, 104204.}, {267, 103296.}, {268, 102384.}, {269, \
101469.}, {270, 100549.}, {271, 99626.3}, {272, 98699.3}, {273, 97768.5}, \
{274, 96833.9}, {275, 95895.3}, {276, 94952.8}, {277, 94006.4}, {278, \
93056.}, {279, 92101.7}, {280, 91143.4}, {281, 90181.1}, {282, 89214.8}, \
{283, 88244.5}, {284, 87270.1}, {285, 86291.7}, {286, 85309.2}, {287, \
84322.6}, {288, 83331.9}, {289, 82337.}, {290, 81338.}, {291, 80334.9}, {292, \
79327.6}, {293, 78316.}, {294, 77300.3}, {295, 76280.3}, {296, 75256.1}, \
{297, 74227.6}, {298, 73194.9}, {299, 72157.8}, {300, 71116.4}, {301, \
70070.7}, {302, 69020.6}, {303, 67966.1}, {304, 66907.2}, {305, 65844.}, \
{306, 64776.3}, {307, 63704.1}, {308, 62627.5}, {309, 61546.4}, {310, \
60460.8}, {311, 59370.6}, {312, 58276.}, {313, 57176.7}, {314, 56072.9}, \
{315, 54964.5}, {316, 53851.4}, {317, 52733.8}, {318, 51611.4}, {319, \
50484.4}, {320, 49352.7}, {321, 48216.3}, {322, 47075.2}, {323, 45929.3}, \
{324, 44778.6}, {325, 43623.1}, {326, 42462.8}, {327, 41297.7}, {328, \
40127.7}, {329, 38952.8}, {330, 37773.1}, {331, 36588.4}, {332, 35398.8}, \
{333, 34204.3}, {334, 33004.7}, {335, 31800.2}, {336, 30590.6}, {337, \
29376.1}, {338, 28156.4}, {339, 26931.7}, {340, 25701.8}, {341, 24466.9}, \
{342, 23226.8}, {343, 21981.5}, {344, 20731.}, {345, 19475.3}, {346, \
18214.4}, {347, 16948.3}, {348, 15676.8}, {349, 14400.1}, {350, 13118.}, \
{351, 11830.6}, {352, 10537.9}, {353, 9239.74}, {354, 7936.19}, {355, \
6627.2}, {356, 5312.76}, {357, 3992.84}, {358, 2667.43}, {359, 1336.49}, \
{360, 0}}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{}, 
                GraphicsComplexBox[CompressedData["
1:eJzt2GlcDXjfBvAzSIWobEU4iqhpIluJdIUslfZo77TXaTtrSoZjrIOy3kVR
xzLU3CpUGFmOYuyEktC0WkIqVEryeB6//+fzvLpf3K9PL6rv59d1rq63//FB
ca6hfTgczqPv3/735///km0YbPPjt1br2Mysl3pJzBxM+dx6M1/IrIY3z2yz
LCKYNXG7oNHnrD/zMAQkqrX/7MGsg4Cc2oBUe2Y9CMx37eqwYeaiYt20tQ4W
zPrQtn0wZp8p8wRs3BEbVDWB2RAfCr/ZaI5mnoxvNrGn5moxG+NwS9of/qrM
Jtic6jg0/qsG2RRB+p4tv31knorZG2NNNzYxmyHjT+trq2uYp6GMH5MdWcE8
HZ9+Tb5jf5t5BgbEGRkaXGGeiW8pl3JazjDPQtari/anTjCbI8l0OyfiMLMF
rp1dd2HoPubZ0I18Iy5MZrbEnBMqo+3WM8/B9cD+x8oTmOei7JG2unsssxWk
2QstbgQzz0NwefYkMy9mayxLtr6d4sgMuMztGVG3gCwD3AXXeifNZncb2JdJ
4oNN2d0GUo1K4R4Ddp+PbRX/bjyrw+7zUX31j5IyDXZfgEBP/rfqPuy+AGdq
dqXUdA6i+0Joxx0PrnhHli2E0YPJost17G6L3oRNuQcfs7stcsQG6oLb7L4I
A7w9EmYp2H0RhPND3rcWsvtimJ/e6p+Vw+6LYbOjvdgmk92XIEnralflbnZf
AhSqDgzazO5LcXrS1fqaJHZfiv7zW8QuAna3w/lWwakzIexuhxIjg5QhXuxu
j0PPH/T4LGN3e4gaLFszbNjdAQ0fNXzuz2R3B+jvfDelw4jdl+F0Z2Sg5lh2
X4bZOgPrx2izuyMs1iw6OrY/uzuiyHZDunb3QLo7oXzA2LNdzWSZE/yf+r97
VMfuzrDSX29yqIIMZ9QeOhcZeJP9vTP2eo9NHXaRrHDGzbVXj5w/yfIuWBJ+
YoPbUZZ3wYrEG8Y1aSzvgvvcns1+21jeBXrFo1PurWF5V0zZ8s50mojlXRGY
PsF3SyjLuwJ/81UfeLK8Kxx3L9cf5MDybsg1FGTOtmZ5N1yYOzXGaxrLuyFz
MEcWNZHl3VC0aPaNOB2Wd4day0TzsIEs7440HueSY+8Ayrsja9rHZUZtZIU7
bhvpPmlvIHM84D7p12WFj8nwwGCdUVkhN1neA0ENTy/2v8DyHrD0Tk9Pz2P5
5aiYaGDIPcTyy5F8ZopL2h6WX46t0/iDOJtYfjkCQ6KXeCew/ArIcy63/8Fn
+RWwr3ver8GX5VdggbdJmJYTy69A+hWVAWY2LO+Jx5ona22ms7wnDFYHPl0w
keU9EcWzfjVrJMt7IsjMv3OUOst7YXX4le6WbnXKe6Esxqeu6B1Z5oWXOzQy
ov8hK7wQ/+r4yGFlZI43Bts1LTpxheW9kTNrrc7MApb3xpRSldV5R1neGy9+
Vw3USWV5H1xN/XpGtJnlfVDi7hRzMYHlfdAnyVX8OZLlffCxy+6cgQ/L+8L7
Nf9naweW98USwcNiOyuW90V38Q7PRaYs74vs+sxWs3Es74c5FU0iDU2W98NH
uyX3nnBY3g/tuWvb9rSpUd4P11UX3J5XT+b4o6h5ml3VQzL8wY2p9g0uJcv8
canzYtvzApb3x0Unq07boywfgArxKZ/MvSwfgMXb/DRebmD5AFx5IOzWk7J8
AMzWD9RaEMryPMiuz7D29CBzebDMbBT52rLP42Hsrd79TjPJPB7SLrgdNpvI
Pp8Hg3XyxD7DyXIejmSnaJT0Y3087J5RaC/4pPrDtTxM+m3PeI1GMicQITMz
Vu97ROYGYuAEQzvtUjIC8SuSVq46TeYFYuOGu21lh8iyQKg/n3Ns+C6yPBDH
hjxYt0RGVgRiVv56YWQc6w+EVc/MoAR/1h8Em/IiSJex/iCoZ1zoCpjL+oNw
fUJLosXPrD8IRvLq3F5d1h8EN1nf306rsf4gXAm7Xu/W2Z/6gzBMI+lC/Qty
bRBKTX2++JeTOcE4J9qx7UYJmRuMcndjr3GnyAiG5xAj5+AsMi8YVhvEvnuT
ybJgRBk+jzydRJYHo7Z+XMjFSNYfjLPqL2cVrWD9wRhrrri735b1h+CXucbD
oqaz/hBkq25tnzye9YfgeMoUv0eDWX8IJha5z+L3qFB/COJnjYlubiLLv/99
cmqTbyVZEYKL1Wf3n7tKrg1BY1VgOOc0mROKtbn+VjOyyNxQjGkM7O++nYxQ
+Lqo5QYkknmhyPlcOXpFGOsPRfMnaytLN9YfCj3evi9qYP2hOGGpb1NqwvpD
8cFV9XOELusPQ7CJ94BuFdYfhgsvhwfFf+hH/WEYMnFsU/U/ZF4Yij7N+33q
bbIsDJMLTUxiz5Ll3/Nd64tTj5AVYbBddZP75w5ybRgyWiJts5PInHCofftL
e1c4mRuOtHEdwhA31h+OJbL5DvrWrD8cv7z/c+stY9YfjtDz+iP8RrD+cHDk
GyqrfmL94SjN2X0WzX2pPxwVIzsydz0hcyJgb2sdf6eUzI3AgeQXE9vyyIhA
h9ni1G/7ybwIrJyXk9+5gSyLwNI4c++qOLI8An8M77fmqDdZEYHTPap9vWxZ
fwScHPUfdExh/ZEoXqlT9uso1h8J7uDUV839WH8k+haYfFvU0of6I5H62a13
SxVZFom3tpF3CkrJ8kgMKM53vp5LVkTizTBnUWkauTYSDrs8dbLXkTl8rHx4
wUgaReby8bjEI9nYgww+ViXUGd2Yx/r5SNTp+3LZZNbPx4zz87OLtVj/97ud
xgqtLz9RPx/bYwufODaSa/lQD48dKrlL5kTh1AePZtkZMjcKWmZ8B2kWGVFQ
25gywmULmRcF85VbzYYJybIoLNqnvv6SF1keBe3gjFan+aw/CmfGFgTcMGb9
UUhQHC+aNJT1R2PX3YLKmC8c6o/G07ntf6Y3kBEND8+YYXm3ybxo7MvkdB0v
IMuiMfxovNWWDLI8Ggs+Jf7tuJ6siMbRD2kJX/jk2mjkFcMixZXMicEOletN
/S1Zfwzuc3jC0PGsPwaVFgYFOWqsPwYHXw8zPF7zDT/6Y1Bk3NB0LZcsj8Gq
jyaJ+UlkRQwyi8wygpeSa2NQ4P1pRP0IMicW6X3mFBg39v4wNxYnSlJmWZ0i
IxYHQuaE664h82IxYqLTwMt2ZFksdEXpr38ZSZbHQi0n/2pow1fqj0V8eX1I
WD659vvnRy5NmZJE5sThlcp5lSuLyNw4uP58Z8cobTLicOprZeuc6h7qj8P9
3vZ3E7LJsjjsu9W7uEJElseh8+HWaw5WZEUc/Ed/mLxNlVwbh6Gf7GfufPCF
+gUwLIrN9ckgawpglNji1hxC5gqQVjn+7UJT8lQBPmSOnBnU2U3/nwD7U+Qf
FyrIzgK4aNq9freFzBPgtzb/ci8XskAAE71XCdt0yTIBtjsdT11X1/XDOwVI
eMJ9PyeHLBcgZuku6/MC8kkBXKd9sOsxJysEeFv5+f5P3z7/cJkAfd4OT7l1
jVwrwDxr6cLl28mtApxe9/XUUVcyR4iRLU7/KtIhawpxSf3GiS3/dNJ+IUyc
ks6MOUqeKkRMs4VAEkmGENoJv6dtNyU7C/HiQF5T6McO2i+E7ZPDBpxzZIEQ
lka6fXxWk2VCTL222iYe5J1ChN1uPejSjywXQv2z06N319tpvxC9y00OLt5G
Vgjh2XHvTKAjuUyINfvMn1lqkWuF6AnVu/bw0SfaLwQnq8nUKJXMEWGjw5WH
Vp5kTRGM2lbxNUeRuSKcnH0kX/7sI+0XYUpuks/7A2SI8MK327DLj+wswsU9
N28pxpJ5IqzauPjbwpoPtF+ElK8bV2/MIstESNew614XQN4pwr+KB061HEeW
i5CV316e+08b7f/+eXWNWc8PkhUi5NpGLP7bl1wmgt0qxTr+aHKtCCHimn43
q1ppvwjjJ0Vsqksjc8RYPTuvuMCDrCnGseNFXtZDyVwxJr4MMVY71EL7xVi6
T9O272gyxFBP3BsVt/c97Rdj6mGJioMGmSeG9ebdifs2NtN+MZoXm5i6f31H
+8Vo++n5ljUS8k4xtPTT3o94+5b2iyEuzC3VCySfFGNe4c2oHY/f0H4xBN7v
l8bak8vE6I1aqTh3uYn2i2GxWccsdjq5VYwYwfOe5GOvab8E9/wmbBipS9aU
YM/844YDtr2i/RL46QoXhPa8pP0SVP1SbzE5hgwJMkPzQlyrX9B+CZZueW7Q
4EDmSVCx6drDquJG2i+BScnQuzONyTIJOpxLYjrSGmi/BAcW6g0ZrUKWS7Ct
uXjAEWE97Zfg2NitfyVX19F+CdrjLoqfLiGXSbBVVrVzS0Et7ZcgzTwvPG0M
uVWCRPW8A4MG19B+KYZaS2bk1FTTfin8tg9B35PPab8UpR2icN21z2i/FK2b
9F3eODyl/VI4XzE7LNGtov1ScMbM7z3TWEn7pdBOXKd6Mu8x7Zdi2s5sf/+V
FbRfikx+12HFvHLaL0XSPStRRb9HtF8KWd61iIybD2i/FG9TQ8drJZfRfiny
zN7w+Zn3aL8U/w5PTxzEvUP7pTiblJyhknWT9kuhsUfY7Tr6Ou2Ph9Hw9xfa
9l6l/fHgC+X9awaW0P54/F5i1jqFc5n2x6N8WZ7f9Ia/aH889HalbC1RFNL+
eDzldtnlm+XT/nisD3iWW/X4KO2Px0cXQb+2ur20P57+j//8pXyfVr5P/x+V
79PK92nl+7TyfVr5Pk155fu08n1a+T6tfJ9Wvk//6Fe+Tyvfp5Xv08r3aeX7
9I/9yvdp5fu08n1a+T6tfJ/+sf+/f5/+H5CMy+M=
                 "], {{{}, {
                    EdgeForm[], 
                    Hue[0.67, 0.6, 0.6, 0.15], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxF1FV3EAQAhuGN2GAjBozRsdEdIzZgG7XRNWB0jRoNKiEqChh0NwpKhxIm
GKCgoKCkAkoYhEUjICrgs8MFF895f8B3zheZOiJ5eIaAgIBABgc+7iDSGMgA
+tOPvqTSh970oic96E43utKFznQihY50oD3JtKMtbWhNK1rSguY0oylNSCKR
xjSiIQ2oTwLxxFGPutQhlhhqU4ua1CCa6lSjKlWoTCUqUoHylKMsZShNKUpS
gigiKU4xilKEwhSiIAXITz4iyEs4echNLsLISQ6yk41QQshKFoIJIjOZyEiG
9J0CH432UB5wn//4l3+4x9/c5Q63+Ytb3OQG17nGVa5wmT/5g9/5jV+5xEUu
cJ5f+Jmf+JFznOUMp/mB7znFSU7wHd9ynGMc5QiHOcQ3fM1BDvAVX7KffXzB
5+xlD5/xKbvZxSd8zEd8yE528AHv8x7v8g5vs51tbGULb/Emm9nERjawnnWs
ZQ2rWcUbvM5KVvAar7KcZSxlCYtZxEIWMJ95zGUOs5nFTGYwnWlMZQqv8DIv
8SKTmcREXuB5JvAcz/IM43macYxlDKN5iid5glGMZATDGcZQhjCYQaQxkAH0
px99SaUPvelFT3rQnW50pQud6UQKHelAe5JpR1va0JpWtKQFzWlGU5qQRCKN
aURDGlCfBOKJox51qUMsMdSmFjWpQTTVqUZVqlCZSlSkAuUpR1nKUJpSlKQE
UURSnGIUpQiFKURBCpCffESQl3DykJtchJGTHGQnG6GEkJUsBBNEZjKRkfS/
/h93bZgz
                    "]]}]}, {}, {}}, {{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.007333333333333334], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwl1PefCAQYBvA7ztmcfbazzp07Z++z93bucO7OOByyUhQK0aDsPduZZSuK
sreGVdmESGlYlULf+/TD93n/gOfzvGGpw+OGBQYEBAwS6TcDGQkiE8FkJgtZ
yUZ2cpCTXOQmhDzkJR/5KUBBChFKYYpQlGIUpwQlKUUYpSlDWcpRnnAqEEEk
FYkimkrEUJkqVKUa1alBTWpRmzrUpR71iaUBDWlEY5rQlGY0pwUtaUVr2tCW
drSnAx3pRGfi6EI8CXSlG91JpAdJJJNCT3rRmz6k0pd+9CeNAQxM74inGMwQ
hjKM4TzNCJ7hWUYyiud4ntGMYSwv8CLjGM8EXmIik3iZV3iV15jMFF7nDaYy
jenMYCazmM0c5jKP+SxgIYtYzBKWsow3eYu3eYd3eY/3+YDlrGAlq1jNGj7k
I9ayjvVsYCOb2MwWPuYTtrKNT/mM7ezgc75gJ7vYzR72so/9HOAghzjMEY5y
jC/5iq/5huOc4CSnOM23fMf3nOEs5zjPBS5yictc4Qeuco3r/MgNbvITt/iZ
X7jNr/zG7/zBHe5yj/s84E/+4m8e8g//8ojHPCF9/IFkICNBZCKYzGQhK9nI
Tg5ykovchJCHvOQjPwUoSCFCKUwRilKM4pSgJKUIozRlKEs5yhNOBSKIpCJR
RFOJGCpThapUozo1qEktalOHutSjPrE0oCGNaEwTmtKM5rSgJa1oTRva0o72
dKAjnehMHF2IJ4GudKM7ifQgiWRS6EkvetOHVPrSj/6kMYCBgf//6P8AaGCX
xQ==
                    "]]}}, {{
                    Directive[
                    PointSize[0.007333333333333334], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}}, {{
                    Directive[
                    PointSize[0.007333333333333334], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {}}, {{
                    Directive[
                    PointSize[0.007333333333333334], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {}}}], {{}, {}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                DisplayFunction -> Identity, DisplayFunction -> Identity, 
                AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {True, True}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0., 0.}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, 
                Frame -> {{True, False}, {True, False}}, 
                FrameLabel -> {{None, None}, {
                   FormBox[
                    StyleBox[
                    "\"years\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], None}}, FrameStyle -> 
                Directive[
                  AbsoluteThickness[0.2]], FrameTicks -> {{{{0., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["0", #& ]}], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["50", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "50", "SRString" -> "50"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["100", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "100", "SRString" -> "100"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {150000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["150", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "150", "SRString" -> "150"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["200", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "200", "SRString" -> "200"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {250000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["250", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "250", "SRString" -> "250"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000& , AutoDelete -> True]}]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {20000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {40000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {60000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {80000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {90000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {110000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {120000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {130000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {140000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {160000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {170000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {180000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {190000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {210000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {220000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {230000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {240000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, None}, {{{60, 
                    FormBox["5", TraditionalForm]}, {120, 
                    FormBox["10", TraditionalForm]}, {180, 
                    FormBox["15", TraditionalForm]}, {240, 
                    FormBox["20", TraditionalForm]}, {300, 
                    FormBox["25", TraditionalForm]}, {360, 
                    FormBox["30", TraditionalForm]}}, None}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], 
                GridLines -> {None, None}, GridLinesStyle -> Automatic, 
                ImageSize -> 200, 
                LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
                Method -> {
                 "OptimizePlotMarkers" -> True, 
                  "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{0, 360.}, {0, 250000.}},
                 PlotRangeClipping -> True, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                Ticks -> {Automatic, Automatic}, TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"remaining balance\"", "\[NoBreak]", 
                 "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Payments table", "scanner" -> "Formula", "id" -> 
     "PaymentsTable", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"year\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"monthly payment\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"ending balance\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"yearly principal paid\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"yearly interest paid\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                  "1", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["246312", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["3688", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["12416", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "2", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["242434", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["3877", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["12228", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "3", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["238359", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["4075", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["12029", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "4", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["234075", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["4284", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["11821", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "5", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["229572", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["4503", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["11601", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "6", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["224838", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["4734", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["11371", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "7", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["219863", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["4976", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["11129", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "8", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["214632", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["5230", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["10874", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "9", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["209134", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["5498", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["10607", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "10", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["203355", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["5779", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["10325", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "11", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["197280", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["6075", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["10030", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "12", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["190895", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["6386", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["9719", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "13", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["184182", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["6712", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["9392", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "14", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["177127", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["7056", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["9049", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "15", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["169710", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["7417", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["8688", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "16", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["161914", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["7796", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["8308", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "17", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["153718", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["8195", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["7910", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "18", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["145104", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["8614", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["7490", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "19", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["136049", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["9055", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["7050", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "20", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["126531", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["9518", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["6586", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "21", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["116525", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["10005", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["6099", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "22", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["106008", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["10517", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["5587", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "23", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["94953", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["11055", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["5049", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "24", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["83332", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["11621", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["4484", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "25", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["71116", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["12215", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["3889", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "26", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["58276", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["12840", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["3264", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "27", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["44779", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["13497", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["2607", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "28", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["30591", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["14188", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1917", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "29", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["15677", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["14914", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1191", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "30", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["0", #& ]}], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["15677", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"\[Euro]\"", TraditionalForm], 
                    "\[VeryThinSpace]"}], "\[InvisibleSpace]", 
                    TagBox["428", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                   "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Center, {Right}}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}, {1, 5} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "4"}, {
      XMLElement[
      "assumption", {
       "type" -> "SelectFormulaVariable", "word" -> "EUR250,000", "template" -> 
        "Assuming \"EUR250,000\" refers to loan amount${separator}Use ${desc} \
or ${desc} instead", "count" -> "3", "pulldown" -> "false", "default" -> 
        "{\"FSVar\", \"Q\", {\"21\", \"30\"}, \"EUR250,000\"} -> \
{{\"FixedRateMortgage\", \"MA\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "loan amount", "input" -> 
          "{\"FSVar\", \"Q\", {\"21\", \"30\"}, \"EUR250,000\"} -> \
{{\"FixedRateMortgage\", \"MA\"}, {\"FixedRateMortgage\", \
\"SaleAmountHouse\"}, {\"FixedRateMortgage\", \"DP\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "sale amount", "input" -> 
          "{\"FSVar\", \"Q\", {\"21\", \"30\"}, \"EUR250,000\"} -> \
{\"FixedRateMortgage\", \"SaleAmountHouse\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "down payment", "input" -> 
          "{\"FSVar\", \"Q\", {\"21\", \"30\"}, \"EUR250,000\"} -> \
{\"FixedRateMortgage\", \"DP\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SelectFormulaVariable", "word" -> "5%", "template" -> 
        "Assuming \"5%\" refers to annual percentage rate${separator}Use \
${desc} instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FSVar\", \"Q\", {\"35\", \"36\"}, \"5%\"} -> \
{{\"FixedRateMortgage\", \"AnnualPercentageRateFixed\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "annual percentage rate", 
          "input" -> 
          "{\"FSVar\", \"Q\", {\"35\", \"36\"}, \"5%\"} -> \
{{\"FixedRateMortgage\", \"AnnualPercentageRateFixed\"}, {\"FixedRateMortgage\
\", \"DP\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "down payment", "input" -> 
          "{\"FSVar\", \"Q\", {\"35\", \"36\"}, \"5%\"} -> \
{\"FixedRateMortgage\", \"DP\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaSelect", "template" -> 
        "Assuming fixed rate mortgage${separator}Use ${desc} or ${desc} \
instead", "count" -> "3", "pulldown" -> "false", "default" -> 
        "\"FSelect\" -> {{\"FixedRateMortgage\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "fixed rate mortgage", 
          "input" -> "\"FSelect\" -> {{\"FixedRateMortgage\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "AdjustableRateMortgage", "desc" -> 
          "adjustable rate mortgage", "input" -> 
          "\"FSelect\" -> {{\"AdjustableRateMortgage\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RentVsBuy", "desc" -> "rent vs. buy", "input" -> 
          "\"FSelect\" -> {{\"RentVsBuy\"}}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableInclude", "template" -> 
        "Also include: \
${desc}${separator}${desc}${separator}${desc}${separator}${desc}", "count" -> 
        "4", "pulldown" -> "false", "default" -> 
        "{\"FVarOpt\", \"1\"} -> {{}, {{{\"FixedRateMortgage\", \"PTS\"}}, {{\
\"FixedRateMortgage\", \"IOP\"}}, {{\"FixedRateMortgage\", \"MTR\"}}, \
{{\"FixedRateMortgage\", \"BP\"}}}, {{\"FixedRateMortgage\", \"MA\"}}}"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.PTS", "desc" -> "points", "input" -> 
          
          "{\"FVarOpt\"} -> {{\"FixedRateMortgage\", \"PTS\"}, \
{\"FixedRateMortgage\", \"MA\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.IOP", "desc" -> 
          "interest\[Hyphen]only period", "input" -> 
          "{\"FVarOpt\"} -> {{\"FixedRateMortgage\", \"IOP\"}, \
{\"FixedRateMortgage\", \"MA\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.MTR", "desc" -> "tax rate", "input" -> 
          "{\"FVarOpt\"} -> {{\"FixedRateMortgage\", \"MTR\"}, \
{\"FixedRateMortgage\", \"MA\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.BP", "desc" -> "balloon payment", 
          "input" -> 
          "{\"FVarOpt\"} -> {{\"FixedRateMortgage\", \"BP\"}, \
{\"FixedRateMortgage\", \"MA\"}}"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Formula", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "4.104", "parsetiming" -> "2.734", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP31781c105f79a12hf22c0000583d4d9i7h4abh7h", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "35", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa31791c105f79a12hf22c000064b8a7695c2fif961618716694557819118", "version" -> 
    "2.6", "inputstring" -> "30-year mortgage of EUR250,000 at 5%"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2021, 8, 20, 23, 50, 2.19522`7.094053039387675}, "Line" -> 271,
     "SessionID" -> 21354177791867475517}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "MonthlyPayments", "Monthly payments", 1, 1, "Content"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "30-year mortgage of EUR250,000 at 5%"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{413., {49., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[271]:=",ExpressionUUID->"7b475549-3962-4280-8342-68653319fa8e"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      StyleBox[GridBox[{
         {
          PaneBox["\<\"monthly payment\"\>",
           
           BaseStyle->{{
             BaselinePosition -> Baseline, FontColor -> GrayLevel[0.3]}, 
             LineSpacing -> {0.9, 0, 1.5}, 
             LinebreakAdjustments -> {1, 10, 10000, 0, 100}, TextAlignment -> 
             Left},
           BaselinePosition->Baseline], 
          StyleBox[
           StyleBox[
            RowBox[{
             FormBox["\<\"\[Euro]\"\>",
              TraditionalForm], "\[VeryThinSpace]", "\[InvisibleSpace]", 
             "1342"}], "Unit"],
           ZeroWidthTimes->False,
           LineIndent->0,
           LinebreakAdjustments->{1, 100, 1, 0, 100}]},
         {
          PaneBox["\<\"effective interest rate\"\>",
           
           BaseStyle->{{
             BaselinePosition -> Baseline, FontColor -> GrayLevel[0.3]}, 
             LineSpacing -> {0.9, 0, 1.5}, 
             LinebreakAdjustments -> {1, 10, 10000, 0, 100}, TextAlignment -> 
             Left},
           BaselinePosition->Baseline], 
          StyleBox[
           StyleBox[
            RowBox[{
             TagBox[
              InterpretationBox["\<\"5.116\"\>",
               5.116189788173364,
               AutoDelete->True],
              NumberForm[#, {10, 3}]& ], "\[NoBreak]", 
             StyleBox["\<\"%\"\>",
              FontFamily->"Helvetica",
              FontSize->Smaller]}], "Unit"],
           ZeroWidthTimes->False,
           LineIndent->0,
           LinebreakAdjustments->{1, 100, 1, 0, 100}]}
        },
        AllowScriptLevelChange->False,
        AutoDelete->False,
        BaselinePosition->Automatic,
        FrameStyle->GrayLevel[0.84],
        GridBoxAlignment->{
         "Columns" -> {Left, {Right}}, "Rows" -> {{Baseline}}},
        GridBoxBackground->{"Columns" -> {None, None}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}], "Grid"],
      
      StripOnInput->False,
      LineSpacing->{0.9, 0, 1.5},
      LineIndent->0],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "30-year mortgage of EUR250,000 at 5%", {{"MonthlyPayments", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.838485006800853*^9},
 CellLabel->
  "Out[271]=",ExpressionUUID->"3b2485f4-bbb2-4b0a-8b06-4436d423f078"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.838485109061604*^9, 3.8384851246378613`*^9}},
 CellLabel->
  "In[272]:=",ExpressionUUID->"18c226e6-8211-4779-a087-31413e2963bd"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$383934#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
     0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485127426032*^9},
 CellLabel->
  "Out[272]=",ExpressionUUID->"d3f0e096-151e-4ec8-88d7-9c98efdec720"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "+", "b"}], ")"}], "10"], "]"}]], "Input",
 CellChangeTimes->{{3.838485269816485*^9, 3.838485287320648*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"594f7122-c70b-4f6c-b3ce-ed7862432e06"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["a", "10"], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["a", "9"], " ", "b"}], "+", 
  RowBox[{"45", " ", 
   SuperscriptBox["a", "8"], " ", 
   SuperscriptBox["b", "2"]}], "+", 
  RowBox[{"120", " ", 
   SuperscriptBox["a", "7"], " ", 
   SuperscriptBox["b", "3"]}], "+", 
  RowBox[{"210", " ", 
   SuperscriptBox["a", "6"], " ", 
   SuperscriptBox["b", "4"]}], "+", 
  RowBox[{"252", " ", 
   SuperscriptBox["a", "5"], " ", 
   SuperscriptBox["b", "5"]}], "+", 
  RowBox[{"210", " ", 
   SuperscriptBox["a", "4"], " ", 
   SuperscriptBox["b", "6"]}], "+", 
  RowBox[{"120", " ", 
   SuperscriptBox["a", "3"], " ", 
   SuperscriptBox["b", "7"]}], "+", 
  RowBox[{"45", " ", 
   SuperscriptBox["a", "2"], " ", 
   SuperscriptBox["b", "8"]}], "+", 
  RowBox[{"10", " ", "a", " ", 
   SuperscriptBox["b", "9"]}], "+", 
  SuperscriptBox["b", "10"]}]], "Output",
 CellChangeTimes->{3.838485288209944*^9},
 CellLabel->
  "Out[273]=",ExpressionUUID->"1a1eea00-4829-43f8-a832-6237a244d3e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.838485340929426*^9, 3.83848536014545*^9}},
 CellLabel->
  "In[274]:=",ExpressionUUID->"49f733de-fe39-46a1-bc05-fe62685b6ed8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$384852#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
     0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384853608988857`*^9},
 CellLabel->
  "Out[274]=",ExpressionUUID->"16459ac9-e4a4-4377-84dd-dae429a203f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.838485472289681*^9, 3.838485482710813*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"0da2aec8-3a25-40bb-bc5c-f552bbceaf06"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
0P8DAC5/Fg==
       "]]},
     Annotation[#, "Charting`Private`Tag$386054#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999999784391316, 0.9999999998606331}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485434620945*^9, 3.838485483202664*^9},
 CellLabel->
  "Out[276]=",ExpressionUUID->"0ff06dfc-428f-4ee4-9c1c-4b8d8a15e1a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "+", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", "x"}], "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.838485497427923*^9, 3.838485514241268*^9}},
 CellLabel->
  "In[277]:=",ExpressionUUID->"63de91e7-4b9e-41c5-bd8f-d4a05984a627"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
A4L4KqE=
       "]]},
     Annotation[#, "Charting`Private`Tag$386398#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.7601700305420807`, 1.7601681046181747`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485514829104*^9},
 CellLabel->
  "Out[277]=",ExpressionUUID->"5164311b-1526-40fa-8f71-0c53696fd565"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Log", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8384855541004763`*^9, 3.838485630656872*^9}, {
  3.838485670432211*^9, 3.838485711576948*^9}},
 CellLabel->
  "In[286]:=",ExpressionUUID->"9d60e473-ec35-4fd6-81c2-ec9bf8ee49a8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.838485631338621*^9, {3.838485673990402*^9, 3.838485712145105*^9}},
 CellLabel->
  "Out[286]=",ExpressionUUID->"4909b0ea-6ce3-42c0-9ba3-bccbcc652297"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%286", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[287]:=",ExpressionUUID->"03cf39fa-a5b7-4b25-bf94-3f2d0b133f7b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVjnk8lfkegI83SpYRMcjeq82Msmepvj8Zt6HFmRpLxqVOlCsiypyyJXua
i4zTZBlLaW5Jksg2fq99Dckyds2x5FDOgiPrdP94Ps9/z+fRYvie9iBoNJrP
F/5vdUdJ/9vFjRASZ7saRluBxrb+O4ZnmqB3PnVHRNIyeDIHGn/6phlodXK5
VWLLIK49KBq5qQWEQ25cVuhnsA0aCu0uaoWKeVtCGLwEbftG/a/Ld0BITrlB
Te4iePeMFmTMdoBqZrGi8OAiRCO/RQajE/qbyuu3vlmAPbN+hvHmb8HmGmvK
eGMePK388wc5XVBj3fW70S0BmD7gt845vAMj3ZXKtl0CEJ/z52yqfQeOLy7l
Ob3hw5PUgD3fpnVDYsG96iUtPnB417KDj/fCb+6zWo6jXPDO+jlF7Vk//Crx
nK5t8REOLQqL9JUGoD3aVyWqeBakTjC7rCMH4MneQzMSBrOQL2TKXHEZBCPv
qC2W+jPw6dTNuCqpYQg3+6E3+1/TUBpaVVVgMgYXUrLq06snIOvJ+psy7zFw
1eR75DpOQGz3keHanDG4I6YbID43Dk46eKXvq/fAWq41rtAah8892JQ29R6C
ZTq8+Sl/g7lu9Uv6fTbIPvZ6Tbs0CsbdvayqZjbUV3IZCrUjoBc0e/PbVTYE
0BormzVHYHezopX4+XG4pz6tzBsbgu0eV95hnQno1jnxu3vAAMymq8zvr5oE
8QPtDgMDPZApFWgsPTEN53r7rw0rtUJqUbxykCIH5L07jGI1W4DlnL32wYYD
v+wy1ZTVaYa7/2urr3vOAUsN3e3ZRxuB+R3pEMycgQTXGliJrYXTwZ2BM5If
4UiH45R5SykQgQpD7spcODg3yWyh38DO5552lRpxoX1ExfOs/h380haapehc
CIgpHG94m4wZGv8peRXNheFbAg+zpCxc01SZKDrPhYLcWu+3Wfk4QsXd+lE7
D+obptiWHhVYtPrlc3aEAB5p+3WPXm7GLnnHcg9mCmBqshRlq7fgVylDafHl
AuCrBrt7dbZgd6/NcYY8AYyPng1T12/D9dudL0S4zgOTZ+nmMNWOoy+KKJFm
C3Ak08oyWb4Lb5GihzM+LYLdJ7kNSrwPO+1xpky2CmHpaR898EwffnrUfUNC
Wwh2Vqld3Rl9+NQNZkjRWSHELtRGJ+r/hVmTWTdE64WwoHBERMm+H++u5l19
nLYE08mqN7f+MoitA5MZnO+XId+BES9bP4ojxnqt/B+uAZT+KHu4nI1Hyo77
MCvXIN4m/5hJDxubJ1Os0J41WItL6lbisjHX+un0nS3rcDneNy511zh2zQtJ
eHh5HcQ11Hx/TRjH5oHag92GG2A5+Cos3G0CfxYzK1Nh0JDd0SsndbiT+EVa
ND2UL4KkLWYmFQencev26CkZGoHmWxcNkGAaT8ZHhWZLE6iz4Wu6gyQHqwZH
PqvbSyDIvO11woKDY11ui0u6EWjXIl36QioHn1MLpe63EuhDXngx3X4Gb8u8
rlf4aBMKHgn9s69qFvvmuG8bdxBDHXaOErYec9jVK1UtJlwcZS5m1rhO83Dc
D4FmhumSqGl/3XH2WwEWlU+ZDFv+CpmO/Fvm/JMF3NcaxY2UkUV3C5Z37DMW
YvsghklqrRy6tOKhsFK+hL0lZ3a2O8sjid5htpX4MtbIa2Bt5iig9N7ishyT
FRxUanVGJk0RJd1wadS/tIr9HnuXmBxQRn/a6Ui6+K1hKeIgY//EDvTauGFT
Ysg6tvb5MUUnWRXdGnVaf3F9AyuVqflaa6ujsOditd/spVH3/GOT9Po0UOJg
ytDPv9Go09F2uhklmoi1T6t28yqN0vkp0v5RiBbyf9DRon1WhOqd3JqTbL8T
VajlTDwoE6HaGROWchokSniW2lQgQ1DvRf9YStlJotkYUm6vLEHNP/YsUN5N
okZZ1tdZcgSlPDOjqqVLIsadDHqCAkG5B/CFByxIFBO4FO+lQlDLERv5Jx1J
dBvVGcvvIajduco74hK+9DXUCOMjBGV2bLBTKplEFw15fz0CgjoxnR6TyCLR
Hx+xj7wlQV3V1Vy4n0Gikk3P3vKtCKqyeHfn4zwSqRSdjnpmQ1CnGwyj6xpJ
VFpBf7HdnqA8PBcOfd9KorboN1fDHAiKKfFa0NpOIjVaOZ/jSFAZp8zPv+sh
kcF/DxtWOxPUh1506G82iaQ9fAq9zn35ZRICjykSFX436dd9nqCkVeqeTHNI
hMoiuYcvEJSB2zFFHo9EpN9dvW0XCcpaZGv7tQUSmafv5DEvEZTTw5bIpSUS
demZ+r/3JCgv67sWwaskMopiF9l4EVTI1En+xgaJRsfNSwovE9Q/oQppxA==

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Large,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485741494615*^9},
 CellLabel->
  "Out[287]=",ExpressionUUID->"d681e1ca-c444-4645-aebd-556c771bbf58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%287", ",", 
   RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[288]:=",ExpressionUUID->"46177f7f-f8da-45b3-aab4-0eed8faa57e0"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Large,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384857464328938`*^9},
 CellLabel->
  "Out[288]=",ExpressionUUID->"06a8632d-ca9d-473f-898f-218c34d9172f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%288", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[289]:=",ExpressionUUID->"c9ab0f11-b23e-4c67-8491-6d5983869a27"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Tiny,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384857527448673`*^9},
 CellLabel->
  "Out[289]=",ExpressionUUID->"8d8bd9df-56ad-478a-a78d-6856c307032e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%289", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[290]:=",ExpressionUUID->"a51f38a4-a4a5-4ec0-98c6-591d59dcc6b6"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384857568764467`*^9},
 CellLabel->
  "Out[290]=",ExpressionUUID->"7788fdf2-a9d4-44e2-ab1a-92baaf4356d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%290", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[291]:=",ExpressionUUID->"ec1daf13-d235-4e8c-b734-d41feda1d514"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Tiny,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485760557123*^9},
 CellLabel->
  "Out[291]=",ExpressionUUID->"f58b7d09-9286-48b2-aaf8-e400decf5697"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%291", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[292]:=",ExpressionUUID->"c104daad-419f-41d3-9785-a579fd1eb5a4"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Tiny,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8384857628311777`*^9},
 CellLabel->
  "Out[292]=",ExpressionUUID->"8f4a7301-5981-42f7-b066-176ae5c0f192"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%292", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[293]:=",ExpressionUUID->"e2f247cd-785b-4a44-aedc-59b503557499"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485766200266*^9},
 CellLabel->
  "Out[293]=",ExpressionUUID->"ea1f4140-28f8-469b-8788-d4304b303962"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%293", ",", 
   RowBox[{"AxesStyle", "\[Rule]", "Black"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[294]:=",ExpressionUUID->"a651fdb0-7b3b-4337-9d81-54d05bf9acbf"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  AxesStyle->GrayLevel[0],
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485770487548*^9},
 CellLabel->
  "Out[294]=",ExpressionUUID->"c49595e6-3fa4-4cae-86d2-bef008d98054"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%294", ",", 
   RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[295]:=",ExpressionUUID->"dc8d55ab-fd53-4ee9-b53f-5bbc44b19ce3"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->False,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  AxesStyle->GrayLevel[0],
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485772858757*^9},
 CellLabel->
  "Out[295]=",ExpressionUUID->"645d10d5-2dd4-409a-b138-921f749a10bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%295", ",", 
   RowBox[{"Axes", "\[Rule]", "True"}], ",", 
   RowBox[{"AxesStyle", "\[Rule]", "Gray"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[296]:=",ExpressionUUID->"75f5ec23-4de0-49ef-92be-1fcc7b546922"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$392660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  AxesStyle->GrayLevel[0.5],
  Background->GrayLevel[0.85],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.3025850521777183`, 1.6876220564959958`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485778995034*^9},
 CellLabel->
  "Out[296]=",ExpressionUUID->"a3768323-fcd4-4548-ac4c-51b39aadf2e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.838485815108499*^9, 3.8384858229801607`*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"eb0e1ab9-12d9-4634-9413-d6778b559e45"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
0P8DAC5/Fg==
       "]]},
     Annotation[#, "Charting`Private`Tag$396169#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999999784391316, 0.9999999998606331}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485823661173*^9},
 CellLabel->
  "Out[297]=",ExpressionUUID->"3f52632b-d36f-45fc-96cc-a4779862d9e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], "-", "10"}]], "Input",
 CellChangeTimes->{{3.838485843450753*^9, 3.8384858476851807`*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"68e1d2c5-4f73-45d3-a3a1-cf98530c5f7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "10"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{{3.8384858487281847`*^9, 3.838485912981496*^9}},
 CellLabel->
  "Out[303]=",ExpressionUUID->"adb7f866-0666-4901-a55d-6624824597f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "10"}], "+", 
     SuperscriptBox["x", "2"]}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[304]:=",ExpressionUUID->"278b4463-1b76-44a1-a277-109fee6af66d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", 
      SqrtBox["10"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     SqrtBox["10"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8384859146321*^9},
 CellLabel->
  "Out[304]=",ExpressionUUID->"ed9a2956-d662-41d3-9414-d25d4db7fca9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10"}], "+", 
     SuperscriptBox["x", "2"]}], ")"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[301]:=",ExpressionUUID->"2faa1a5f-f5c0-45b9-bd85-ca43cc027e97"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "10"}], " ", "x"}], "+", 
  FractionBox[
   SuperscriptBox["x", "3"], "3"]}]], "Output",
 CellChangeTimes->{3.838485865024839*^9},
 CellLabel->
  "Out[301]=",ExpressionUUID->"3d59f2c6-6d98-41d2-9991-d632cda17e84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "10"}], "+", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "7.745966692414833`"}], ",", "7.745966692414833`"}], 
    "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[299]:=",ExpressionUUID->"4f21137d-b060-4bf0-915d-03c869f05868"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
5btfKyKpk0ekdk9S0GV/zhTM3hENWXWJh1MUrFBpjnfJB/L7x99Hdk5TsKNP
Z1BcCYjbt6GKb7Q1WwWFPzUUkhOciN1LZyi4bV3zWOFxAWnJy9a7T3uk+952
D/c3hN9s5XnFWQqeDa52X8mXR07yXHKSn6Pr6znM71ydQ+5JXV99m7bNZHZc
fvRr4mNaLckzT4Hswp4aa/UsstuAN7CGtvflZS4Z8xlEbWF8Vu0P3d8Cddz8
ZenkfRvjaQhttesx0Rb/SSNLe/0vtdCWUvzgaFaYQhakZMNUFiioVjl8f8b0
JYn3GCo6TTv0r56Pcf3JZHh8dl0abax9dm53UBLpf7izaID2zE6eDX3S/5Io
z3ehrEUKMgxvWd1MeUwG3H0DDtI+ZaoUuUkvgYzddntykTYn1yo4PSeGJHbc
m46nnffRr3eu5y7hs5j3fUtbtTV6r774bSI+9WBDI23tZs+jrMAwUlXosbyf
tvz8K8XXzZeIVsolpWnaXH7P7qnWuhHj0o82C7R7RivjeK6ZIkmh/TWLtP/W
3M6Q3uCDrp5dcmaOtrmPbenUm39QksC8ztj/1g+v4razjUDnitZu6/zf9z3w
eugYHIVGn0Y6fqLdEGK+Td78AZLN+qsolba9t1Zj7Zo4NNonZHST9gUNkfxi
/0foHEd+iRNtWBsQyvzxBCVVO41q0xZkjZhfMHmKQgIHBZfQNpaxWVWX9wxJ
HnluUkXX7+7y2gk16gUyOfqoNIJ2m8Cuomvhr5BWcK37PtrKCxmRPZOpqLp+
225u2ke9y6WM7DMQ/2TuxeP0/s2P8QTM3s9Eie8q2xfp/U9w3/49qTILjb9m
eMbR/mn/MpNnaw66wzhJldP9E97RI5d2KhcNhFnutqC90VLh8omEPDTCjrjd
Tveft+lNk1yhAsRVGf+2le5PueoPOQ47CpHIN/+Yg7QLDReZEmffolLZO0nv
flPAw8qd0jwNSE/ojFEk3e97Zda+v9VYhBxqaqp/0PmpktQW4g4sRrOfszQV
aZuJ7TXyWF2CFtln3xvTebMSdqk/cO49snwRcCx2jM7v/LPvSyXKkM2JWrtu
Or8zv3PXXswvQxc/hQj20PkOmCxz77f9iJaEyDS0DVBwbfjnZFlaOfLsLftZ
QM+DuI41AlcPVKKb+g6Da+j5QbVpGU5OVqKNSsM14910vpo5N+0fVqGdBgfb
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
ieuX+HOTHPx/9yH4/+9D/gu4XaNa
       "]]},
     Annotation[#, "Charting`Private`Tag$396868#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-7.745966692414833, 7.745966692414833}, {-9.999998578340218, 
   49.99999510204091}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.838485852605876*^9},
 CellLabel->
  "Out[299]=",ExpressionUUID->"da02700c-76e5-42b3-90df-4dc32e535984"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8384859008105307`*^9, 
  3.838485908712343*^9}},ExpressionUUID->"5ec03726-824d-45c5-bdef-\
c65441b7f31a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prime", "[", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", " ", "25"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[306]:=",ExpressionUUID->"38722af0-7028-46fb-8836-8fae0ea0155a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
   "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
   ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
   "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}]], "Output",
 CellChangeTimes->{{3.838485975482814*^9, 3.838485988886775*^9}},
 CellLabel->
  "Out[306]=",ExpressionUUID->"62f8329d-d71a-47b4-8eb7-710a504ff442"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
     "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
     ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
     "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Business\>\""}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[310]:=",ExpressionUUID->"a7b7f6eb-ea2c-4fc2-a623-5debfab29db1"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, 
     {RGBColor[0.34398, 0.49112, 0.89936], Opacity[0.3], EdgeForm[None], 
      GraphicsGroupBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQEf7KEMBzQ+FFg6YOU7REDFLaD8MCjfHEIfCIHy
zaD8YCjfFKo+CMo3gcoHQvnGUH4AlG8EoRv8oHxDKN8XyjeA8r2gfD0o3x3K
14HyXaF8LSjfBcrXgPKdoHw1KG0PpVWgtC2UVoLSUH8yKKC6m0EG1Z0MEqj2
Moig2SOApo8DTR0DXBwA6s4how==
        "]]]}, {}, {}}, {{}, {}, 
     {RGBColor[0.34398, 0.49112, 0.89936], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[3], 
      CapForm["Butt"], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7KEMB1SaA40WgdICUFoGTVwNSktAaS00dYZQ
WgFKG0NpJShtDqVVoLQtmrn2UFoDQjc4odrT4ALl60D5rlC+HpTvDuUbQPle
qO5q8IXyjaB8P1R3HgiA8k2g/EAo3xRCOwRB+WZQ+WBUfx0IgfItoOrDoHxL
KD/CAQCjFx/5
       "]]}}, 
    {RGBColor[0.34398, 0.49112, 0.89936], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[3], 
     CapForm["Butt"], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[
            Rational[7, 360]], 
           RGBColor[0.34398, 0.49112, 0.89936], 
           CapForm["Butt"], 
           AbsoluteThickness[3]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], CompressedData["

1:eJxTTMoPSmVmYGCQBGJGIGZigIEP9lCGAyrNgUaLQGkBKC2DJq4GpSWgtBaa
OkMorQCljaG0EpQ2h9IqUNoWzVx7KK0BoRucUO1pcIHydaB8VyhfD8p3h/IN
oHwvVHc1+EL5RlC+H6o7DwRA+SZQfiCUbwqhHYKgfDOofDCqvw6EQPkWUPVh
UL4llB/hAACtYx/7
      "]]}, {
     {RGBColor[0.34398, 0.49112, 0.89936], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[3], 
      CapForm["Butt"], PointBox[{1., 2.}], PointBox[{2., 3.}], 
      PointBox[{3., 5.}], PointBox[{4., 7.}], PointBox[{5., 11.}], 
      PointBox[{6., 13.}], PointBox[{7., 17.}], PointBox[{8., 19.}], 
      PointBox[{9., 23.}], PointBox[{10., 29.}], PointBox[{11., 31.}], 
      PointBox[{12., 37.}], PointBox[{13., 41.}], PointBox[{14., 43.}], 
      PointBox[{15., 47.}], PointBox[{16., 53.}], PointBox[{17., 59.}], 
      PointBox[{18., 61.}], PointBox[{19., 67.}], PointBox[{20., 71.}], 
      PointBox[{21., 73.}], PointBox[{22., 79.}], PointBox[{23., 83.}], 
      PointBox[{24., 89.}], PointBox[{25., 97.}]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{True, False}, {True, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->{{
     StrokeForm[
      Opacity[0]], 
     StrokeForm[
      Opacity[0]]}, {Automatic, None}},
  FrameTicks->FrontEndValueCache[{{Charting`FindScaledTicks[
       (Charting`SimpleTicks[#, #2, 6]& )[
        SlotSequence[1]], {Identity, Identity}]& , None}, {
     Charting`FindScaledTicks[
       (Charting`SimpleTicks[#, #2, 6]& )[
        SlotSequence[1]], {Identity, Identity}]& , None}}, {{{{0., 
        FormBox["0", TraditionalForm], {0.01, 0.}}, {20., 
        FormBox["20", TraditionalForm], {0.01, 0.}}, {40., 
        FormBox["40", TraditionalForm], {0.01, 0.}}, {60., 
        FormBox["60", TraditionalForm], {0.01, 0.}}, {80., 
        FormBox["80", TraditionalForm], {0.01, 0.}}, {100., 
        FormBox["100", TraditionalForm], {0.01, 0.}}}, None}, {{{0., 
        FormBox["0", TraditionalForm], {0.01, 0.}}, {5., 
        FormBox["5", TraditionalForm], {0.01, 0.}}, {10., 
        FormBox["10", TraditionalForm], {0.01, 0.}}, {15., 
        FormBox["15", TraditionalForm], {0.01, 0.}}, {20., 
        FormBox["20", TraditionalForm], {0.01, 0.}}, {25., 
        FormBox["25", TraditionalForm], {0.01, 0.}}}, None}}],
  GridLines->{None, {0., 20., 40., 60., 80., 100.}},
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 25.}, {0, 97.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Charting`FindScaledTicks[
     (Charting`SimpleTicks[#, #2, 6]& )[
      SlotSequence[1]], {Identity, Identity}]& , Charting`FindScaledTicks[
     (Charting`SimpleTicks[#, #2, 6]& )[
      SlotSequence[1]], {Identity, Identity}]& }]], "Output",
 CellChangeTimes->{3.838486112434517*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"4769b987-56e9-4624-b2ee-cffba6782286"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox["1234", "2468"]], "Input",
 CellChangeTimes->{{3.838486282642866*^9, 3.838486345014443*^9}},
 CellLabel->
  "In[311]:=",ExpressionUUID->"4302ed22-9982-4936-8258-0a0e5cacf909"],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{3.838486345783433*^9},
 CellLabel->
  "Out[311]=",ExpressionUUID->"e60c421d-692f-48f5-966d-6900bffc622f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"!", "10"}]], "Input",
 CellChangeTimes->{{3.838486372435501*^9, 3.838486372538982*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"2f38cb6f-9270-48f4-a38f-125fd9449b82"],

Cell[BoxData[
 RowBox[{"!", "10"}]], "Output",
 CellChangeTimes->{3.838486373008513*^9},
 CellLabel->
  "Out[312]=",ExpressionUUID->"101c661a-4155-4abf-abde-71f8f7487c7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"10", "!"}]], "Input",
 CellChangeTimes->{{3.838486374838316*^9, 3.838486375524907*^9}},
 CellLabel->
  "In[313]:=",ExpressionUUID->"d590063e-1148-4b13-8093-10dd15d8772d"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.838486376457111*^9},
 CellLabel->
  "Out[313]=",ExpressionUUID->"465008aa-9b30-49a8-9246-3f0a32a84bdf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"1234", "/", "5678"}], "]"}]], "Input",
 CellChangeTimes->{{3.838486431271727*^9, 3.838486456980466*^9}},
 CellLabel->
  "In[314]:=",ExpressionUUID->"7479bf79-f6b7-4bd7-b827-01a9d89d4e7c"],

Cell[BoxData["0.2173300457907714`"], "Output",
 CellChangeTimes->{3.8384864572945423`*^9},
 CellLabel->
  "Out[314]=",ExpressionUUID->"411b0e1b-2cfc-44f1-ac45-5d891b920113"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox["1234", "5678"], ",", "50"}], "]"}]], "Input",
 CellChangeTimes->{{3.8384864730797653`*^9, 3.83848649197165*^9}},
 CellLabel->
  "In[315]:=",ExpressionUUID->"ec22a9af-6598-41af-a598-b0cc01c44e2a"],

Cell[BoxData["0.\
21733004579077139837971116590348714336033814723494188094399436421275096865093`\
50."], "Output",
 CellChangeTimes->{3.83848649265412*^9},
 CellLabel->
  "Out[315]=",ExpressionUUID->"7e274121-31b7-42e4-8a43-a164be98687b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "1"], 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.8384865575786333`*^9, 3.8384865639226847`*^9}},
 CellLabel->
  "In[316]:=",ExpressionUUID->"00745230-cad5-4f8e-a7d2-ae8ce5131b9e"],

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"Cos", "[", "1", "]"}]}]], "Output",
 CellChangeTimes->{3.838486564949609*^9},
 CellLabel->
  "Out[316]=",ExpressionUUID->"787e83b6-67c7-4170-9606-cbbc9433c278"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.838486567395681*^9, 3.838486570957241*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"ef115910-3f55-40a5-a235-f1cc2cee672b"],

Cell[BoxData["0.45969769413186023`"], "Output",
 CellChangeTimes->{3.838486571549658*^9},
 CellLabel->
  "Out[317]=",ExpressionUUID->"38ebd83e-bd8b-49dd-9661-36d2bcbf36c2"]
}, Open  ]]
},
WindowSize->{1176, 2043},
WindowMargins->{{135, Automatic}, {Automatic, 10}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> True}, "TryRealOnly" -> False},
Magnification:>1.5 Inherited,
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6d61398c-ee7e-4f63-8992-ea3e64755028"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 198, 4, 46, "Input",ExpressionUUID->"7ea7e4f7-7914-4443-8e13-0d6396ee708b"],
Cell[781, 28, 154, 3, 52, "Output",ExpressionUUID->"2cf920b2-79da-4a25-8f16-a3304f6da599"]
}, Open  ]],
Cell[CellGroupData[{
Cell[972, 36, 201, 4, 46, "Input",ExpressionUUID->"b3a5eea0-190b-45b1-93b7-1129b177e587"],
Cell[1176, 42, 183, 3, 52, "Output",ExpressionUUID->"4d2306b4-54c7-469b-b3e1-613234fad2c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1396, 50, 14926, 365, 98, "WolframAlphaShortInput",ExpressionUUID->"316bdf21-461b-46a0-bf75-994d0a00be34"],
Cell[16325, 417, 16504, 291, 361, "Output",ExpressionUUID->"df635865-9ba9-41e3-9496-bd8fde0f5324"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32866, 713, 14980, 366, 98, "WolframAlphaShortInput",ExpressionUUID->"56176361-24e6-4427-964d-aa3b2c2e9fae"],
Cell[47849, 1081, 15947, 282, 361, "Output",ExpressionUUID->"13895803-2bb1-4654-8fc6-015cb721dabf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63833, 1368, 14960, 366, 98, "WolframAlphaShortInput",ExpressionUUID->"d4b79860-2739-4c58-aa1a-cbfe7ac93ade"],
Cell[78796, 1736, 16504, 291, 361, "Output",ExpressionUUID->"f8e23d2d-7f93-443d-a4f9-edda510590c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95337, 2032, 26647, 605, 106, "WolframAlphaShortInput",ExpressionUUID->"212c7a17-e28d-409f-82d4-2c4ae75688a7"],
Cell[121987, 2639, 1837, 50, 62, "Output",ExpressionUUID->"ecf1318c-9da8-44ee-aa82-eea73655446e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123861, 2694, 26643, 605, 106, "WolframAlphaShortInput",ExpressionUUID->"0c5d5651-4d79-4dc4-b088-76fbb01770bc"],
Cell[150507, 3301, 1813, 50, 62, "Output",ExpressionUUID->"88bbf56d-2e9c-4da4-976a-45903b45b0b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152357, 3356, 14463, 356, 98, "WolframAlphaShortInput",ExpressionUUID->"fee5f826-082d-4da0-8c53-158c81aa349e"],
Cell[166823, 3714, 605, 21, 91, "Output",ExpressionUUID->"dfbdcaba-6de1-4ab1-9b52-9fdc973bfeac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167465, 3740, 304421, 5127, 1620, "WolframAlphaShortInput",ExpressionUUID->"d739c134-35df-4a6d-ae03-6cd50839dde8"],
Cell[471889, 8869, 156592, 2613, 294, "Output",ExpressionUUID->"9d6e9043-3b86-4a92-8c9b-5fb950a15c5f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[628518, 11487, 17750, 423, 98, "WolframAlphaShortInput",ExpressionUUID->"48cb8adb-ae40-4b48-8339-461df2639a9b"],
Cell[646271, 11912, 6304, 112, 565, "Output",ExpressionUUID->"8e0ec0de-c73b-4c97-8434-8e2a6ef93762"]
}, Open  ]],
Cell[CellGroupData[{
Cell[652612, 12029, 24351, 553, 111, "WolframAlphaShortInput",ExpressionUUID->"d47a9578-d38a-4216-b4b5-b9bcf83004fa"],
Cell[676966, 12584, 163, 3, 52, "Output",ExpressionUUID->"4cd5c90a-bde6-4055-85de-1990b2928324"]
}, Open  ]],
Cell[CellGroupData[{
Cell[677166, 12592, 16615, 389, 108, "WolframAlphaShortInput",ExpressionUUID->"f1fb24d6-58eb-4800-a812-5c7b73a5a929"],
Cell[693784, 12983, 228, 5, 55, "Output",ExpressionUUID->"454ce765-b6ae-46fe-bdb1-f1dc74d2ba93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[694049, 12993, 20457, 478, 108, "WolframAlphaShortInput",ExpressionUUID->"735644b4-ee10-4a55-b876-b37454e8d5d2"],
Cell[714509, 13473, 227, 5, 55, "Output",ExpressionUUID->"2fdf7f80-9b59-43db-92eb-225f60816773"]
}, Open  ]],
Cell[CellGroupData[{
Cell[714773, 13483, 14856, 358, 108, "WolframAlphaShortInput",ExpressionUUID->"a003925a-3b5b-4382-9cf3-6b684b28f28c"],
Cell[729632, 13843, 37155, 747, 162, "Output",ExpressionUUID->"fe9369bd-e1a1-440b-b2ff-5f83bb981e4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[766824, 14595, 14781, 358, 108, "WolframAlphaShortInput",ExpressionUUID->"e62adb2c-05a7-42ae-a6e0-cb88fed2b203"],
Cell[781608, 14955, 16868, 331, 93, "Output",ExpressionUUID->"051ed5ae-3536-4382-b1d4-032c768ef520"]
}, Open  ]],
Cell[798491, 15289, 54458, 1108, 111, "WolframAlphaShortInput",ExpressionUUID->"211357c0-d982-420e-936f-1442ee25eccc"],
Cell[CellGroupData[{
Cell[852974, 16401, 5797, 115, 251, InheritFromParent,ExpressionUUID->"aab1c50f-90dc-4014-93d6-c1232f824286"],
Cell[858774, 16518, 5823, 115, 68, "Output",ExpressionUUID->"4c8ca1cb-37a2-4ce5-94e4-d318b8c48b74"]
}, Open  ]],
Cell[864612, 16636, 5745, 113, 62, "Input",ExpressionUUID->"36edb793-640c-4408-8ce0-909ccd4e0778"],
Cell[CellGroupData[{
Cell[870382, 16753, 5798, 115, 62, InheritFromParent,ExpressionUUID->"e134b8b9-6397-4b0d-b364-ad1d3ed364c3"],
Cell[876183, 16870, 5799, 115, 68, "Output",ExpressionUUID->"75eec210-84c9-48b4-96a2-abaf9115aec9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[882019, 16990, 23658, 530, 111, "WolframAlphaShortInput",ExpressionUUID->"9d13d829-d69d-4733-a011-cf35b525e1cf"],
Cell[905680, 17522, 422, 10, 58, "Output",ExpressionUUID->"5a16abeb-6a57-4c46-b533-22ee670f2214"]
}, Open  ]],
Cell[CellGroupData[{
Cell[906139, 17537, 179227, 3562, 100, "WolframAlphaShortInput",ExpressionUUID->"7b475549-3962-4280-8342-68653319fa8e"],
Cell[1085369, 21101, 3556, 95, 150, "Output",ExpressionUUID->"3b2485f4-bbb2-4b0a-8b06-4436d423f078"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1088962, 21201, 346, 9, 46, "Input",ExpressionUUID->"18c226e6-8211-4779-a087-31413e2963bd"],
Cell[1089311, 21212, 10750, 196, 346, "Output",ExpressionUUID->"d3f0e096-151e-4ec8-88d7-9c98efdec720"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1100098, 21413, 282, 7, 49, "Input",ExpressionUUID->"594f7122-c70b-4f6c-b3ce-ed7862432e06"],
Cell[1100383, 21422, 1026, 31, 52, "Output",ExpressionUUID->"1a1eea00-4829-43f8-a832-6237a244d3e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1101446, 21458, 348, 9, 46, "Input",ExpressionUUID->"49f733de-fe39-46a1-bc05-fe62685b6ed8"],
Cell[1101797, 21469, 10752, 196, 346, "Output",ExpressionUUID->"16459ac9-e4a4-4377-84dd-dae429a203f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1112586, 21670, 357, 9, 46, "Input",ExpressionUUID->"0da2aec8-3a25-40bb-bc5c-f552bbceaf06"],
Cell[1112946, 21681, 20100, 349, 359, "Output",ExpressionUUID->"0ff06dfc-428f-4ee4-9c1c-4b8d8a15e1a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1133083, 22035, 430, 12, 46, "Input",ExpressionUUID->"63de91e7-4b9e-41c5-bd8f-d4a05984a627"],
Cell[1133516, 22049, 29775, 508, 359, "Output",ExpressionUUID->"5164311b-1526-40fa-8f71-0c53696fd565"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1163328, 22562, 413, 11, 46, "Input",ExpressionUUID->"9d60e473-ec35-4fd6-81c2-ec9bf8ee49a8"],
Cell[1163744, 22575, 4196, 89, 359, "Output",ExpressionUUID->"4909b0ea-6ce3-42c0-9ba3-bccbcc652297"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1167977, 22669, 229, 6, 46, "Input",ExpressionUUID->"03cf39fa-a5b7-4b25-bf94-3f2d0b133f7b"],
Cell[1168209, 22677, 4167, 89, 561, "Output",ExpressionUUID->"d681e1ca-c444-4645-aebd-556c771bbf58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1172413, 22771, 234, 6, 46, "Input",ExpressionUUID->"46177f7f-f8da-45b3-aab4-0eed8faa57e0"],
Cell[1172650, 22779, 4200, 90, 561, "Output",ExpressionUUID->"06a8632d-ca9d-473f-898f-218c34d9172f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1176887, 22874, 228, 6, 46, "Input",ExpressionUUID->"c9ab0f11-b23e-4c67-8491-6d5983869a27"],
Cell[1177118, 22882, 4199, 90, 110, "Output",ExpressionUUID->"8d8bd9df-56ad-478a-a78d-6856c307032e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1181354, 22977, 230, 6, 46, "Input",ExpressionUUID->"a51f38a4-a4a5-4ec0-98c6-591d59dcc6b6"],
Cell[1181587, 22985, 4201, 90, 359, "Output",ExpressionUUID->"7788fdf2-a9d4-44e2-ab1a-92baaf4356d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1185825, 23080, 228, 6, 46, "Input",ExpressionUUID->"ec1daf13-d235-4e8c-b734-d41feda1d514"],
Cell[1186056, 23088, 4197, 90, 110, "Output",ExpressionUUID->"f58b7d09-9286-48b2-aaf8-e400decf5697"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1190290, 23183, 228, 6, 46, "Input",ExpressionUUID->"c104daad-419f-41d3-9785-a579fd1eb5a4"],
Cell[1190521, 23191, 4199, 90, 110, "Output",ExpressionUUID->"8f4a7301-5981-42f7-b066-176ae5c0f192"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1194757, 23286, 230, 6, 46, "Input",ExpressionUUID->"e2f247cd-785b-4a44-aedc-59b503557499"],
Cell[1194990, 23294, 4199, 90, 359, "Output",ExpressionUUID->"ea1f4140-28f8-469b-8788-d4304b303962"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1199226, 23389, 229, 6, 46, "Input",ExpressionUUID->"a651fdb0-7b3b-4337-9d81-54d05bf9acbf"],
Cell[1199458, 23397, 4226, 91, 359, "Output",ExpressionUUID->"c49595e6-3fa4-4cae-86d2-bef008d98054"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1203721, 23493, 224, 6, 46, "Input",ExpressionUUID->"dc8d55ab-fd53-4ee9-b53f-5bbc44b19ce3"],
Cell[1203948, 23501, 4219, 91, 360, "Output",ExpressionUUID->"645d10d5-2dd4-409a-b138-921f749a10bd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1208204, 23597, 274, 7, 46, "Input",ExpressionUUID->"75f5ec23-4de0-49ef-92be-1fcc7b546922"],
Cell[1208481, 23606, 4220, 91, 359, "Output",ExpressionUUID->"a3768323-fcd4-4548-ac4c-51b39aadf2e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1212738, 23702, 344, 9, 46, "Input",ExpressionUUID->"eb0e1ab9-12d9-4634-9413-d6778b559e45"],
Cell[1213085, 23713, 20078, 349, 359, "Output",ExpressionUUID->"3f52632b-d36f-45fc-96cc-a4779862d9e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1233200, 24067, 225, 5, 46, "Input",ExpressionUUID->"68e1d2c5-4f73-45d3-a3a1-cf98530c5f7d"],
Cell[1233428, 24074, 244, 6, 52, "Output",ExpressionUUID->"adb7f866-0666-4901-a55d-6624824597f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1233709, 24085, 293, 10, 49, "Input",ExpressionUUID->"278b4463-1b76-44a1-a277-109fee6af66d"],
Cell[1234005, 24097, 360, 12, 55, "Output",ExpressionUUID->"ed9a2956-d662-41d3-9414-d25d4db7fca9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1234402, 24114, 308, 10, 66, "Input",ExpressionUUID->"2faa1a5f-f5c0-45b9-bd85-ca43cc027e97"],
Cell[1234713, 24126, 264, 8, 73, "Output",ExpressionUUID->"3d59f2c6-6d98-41d2-9991-d632cda17e84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1235014, 24139, 374, 12, 49, "Input",ExpressionUUID->"4f21137d-b060-4bf0-915d-03c869f05868"],
Cell[1235391, 24153, 7560, 144, 361, "Output",ExpressionUUID->"da02700c-76e5-42b3-90df-4dc32e535984"]
}, Open  ]],
Cell[1242966, 24300, 154, 3, 46, "Input",ExpressionUUID->"5ec03726-824d-45c5-bdef-c65441b7f31a"],
Cell[CellGroupData[{
Cell[1243145, 24307, 203, 5, 46, "Input",ExpressionUUID->"38722af0-7028-46fb-8836-8fae0ea0155a"],
Cell[1243351, 24314, 488, 9, 52, "Output",ExpressionUUID->"62f8329d-d71a-47b4-8eb7-710a504ff442"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1243876, 24328, 667, 14, 109, "Input",ExpressionUUID->"a7b7f6eb-ea2c-4fc2-a623-5debfab29db1"],
Cell[1244546, 24344, 5031, 114, 365, "Output",ExpressionUUID->"4769b987-56e9-4624-b2ee-cffba6782286"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1249614, 24463, 202, 4, 69, "Input",ExpressionUUID->"4302ed22-9982-4936-8258-0a0e5cacf909"],
Cell[1249819, 24469, 173, 4, 68, "Output",ExpressionUUID->"e60c421d-692f-48f5-966d-6900bffc622f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1250029, 24478, 194, 4, 46, "Input",ExpressionUUID->"2f38cb6f-9270-48f4-a38f-125fd9449b82"],
Cell[1250226, 24484, 171, 4, 52, "Output",ExpressionUUID->"101c661a-4155-4abf-abde-71f8f7487c7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1250434, 24493, 194, 4, 46, "Input",ExpressionUUID->"d590063e-1148-4b13-8093-10dd15d8772d"],
Cell[1250631, 24499, 159, 3, 52, "Output",ExpressionUUID->"465008aa-9b30-49a8-9246-3f0a32a84bdf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1250827, 24507, 232, 5, 46, "Input",ExpressionUUID->"7479bf79-f6b7-4bd7-b827-01a9d89d4e7c"],
Cell[1251062, 24514, 173, 3, 52, "Output",ExpressionUUID->"411b0e1b-2cfc-44f1-ac45-5d891b920113"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1251272, 24522, 256, 6, 69, "Input",ExpressionUUID->"ec22a9af-6598-41af-a598-b0cc01c44e2a"],
Cell[1251531, 24530, 238, 5, 52, "Output",ExpressionUUID->"7e274121-31b7-42e4-8a43-a164be98687b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1251806, 24540, 322, 8, 68, "Input",ExpressionUUID->"00745230-cad5-4f8e-a7d2-ae8ce5131b9e"],
Cell[1252131, 24550, 205, 5, 52, "Output",ExpressionUUID->"787e83b6-67c7-4170-9606-cbbc9433c278"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1252373, 24560, 203, 4, 46, "Input",ExpressionUUID->"ef115910-3f55-40a5-a235-f1cc2cee672b"],
Cell[1252579, 24566, 172, 3, 52, "Output",ExpressionUUID->"38ebd83e-bd8b-49dd-9661-36d2bcbf36c2"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

